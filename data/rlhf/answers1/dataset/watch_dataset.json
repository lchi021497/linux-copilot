{"prompt": ["I have an embedded Linux system (running Ubuntu 10) on a microprocessor that has an onboard USB hub (specifically a BeagleBone Black).I made a simple bash script that's supposed to run a command, watch lsusb; and as that runs, my program needs to dump the output my command generates into a text or JSON file (ideally on a USB stick, called usb0 for the sake of the example).So far, this is what I have:#!/bin/bash\n#DATE=$(date +'%F %H:%M:%S')\nDIR=/home/ubuntu/lsusb_logs\nCMD='watch lsusb'\n$CMD > $DIR\nThis runs until I stop it, which is fine. But when I go to look at my now created lsusb_logs file, all the data appears to be either encoded or needs to be formatted because its not at all like the original format a single lsusb or even watch lsusb outputs.The purpose of this script is to gather historical data of the peripherals on the USB hub state over a 24 hour period in an environment chamber (climate stress testing).Any advice or insight is helpful, thanks.", "I want to watch the growing size of a single file, so i use this command:texai@maelstrom ~$ ls -lh club_prod.sql | awk '{print $5}'\n116M\nNow I want to watch that result each 5 seconds so:texai@maelstrom ~$ watch -n 5 ls -lh club_prod.sql | awk '{print $5}'\nbut this command doesn't return any result", "I want to watch the growing size of a single file, so i use this command:texai@maelstrom ~$ ls -lh club_prod.sql | awk '{print $5}'\n116M\nNow I want to watch that result each 5 seconds so:texai@maelstrom ~$ watch -n 5 ls -lh club_prod.sql | awk '{print $5}'\nbut this command doesn't return any result", "I want to watch the growing size of a single file, so i use this command:texai@maelstrom ~$ ls -lh club_prod.sql | awk '{print $5}'\n116M\nNow I want to watch that result each 5 seconds so:texai@maelstrom ~$ watch -n 5 ls -lh club_prod.sql | awk '{print $5}'\nbut this command doesn't return any result", "I want to watch the growing size of a single file, so i use this command:texai@maelstrom ~$ ls -lh club_prod.sql | awk '{print $5}'\n116M\nNow I want to watch that result each 5 seconds so:texai@maelstrom ~$ watch -n 5 ls -lh club_prod.sql | awk '{print $5}'\nbut this command doesn't return any result", "I want to watch the growing size of a single file, so i use this command:texai@maelstrom ~$ ls -lh club_prod.sql | awk '{print $5}'\n116M\nNow I want to watch that result each 5 seconds so:texai@maelstrom ~$ watch -n 5 ls -lh club_prod.sql | awk '{print $5}'\nbut this command doesn't return any result", "I want to watch the growing size of a single file, so i use this command:texai@maelstrom ~$ ls -lh club_prod.sql | awk '{print $5}'\n116M\nNow I want to watch that result each 5 seconds so:texai@maelstrom ~$ watch -n 5 ls -lh club_prod.sql | awk '{print $5}'\nbut this command doesn't return any result", "I want to watch the growing size of a single file, so i use this command:texai@maelstrom ~$ ls -lh club_prod.sql | awk '{print $5}'\n116M\nNow I want to watch that result each 5 seconds so:texai@maelstrom ~$ watch -n 5 ls -lh club_prod.sql | awk '{print $5}'\nbut this command doesn't return any result", "I want to watch the growing size of a single file, so i use this command:texai@maelstrom ~$ ls -lh club_prod.sql | awk '{print $5}'\n116M\nNow I want to watch that result each 5 seconds so:texai@maelstrom ~$ watch -n 5 ls -lh club_prod.sql | awk '{print $5}'\nbut this command doesn't return any result", "I'm trying to display the status progression of a file copied with dd command:\nI run this command : dd if=/dev/zero of=file.txt count=1024 bs=10485760Then in another terminal, I run this command to display the status of progression:\nwatch -n 1 kill -USR1 $pid_ddMy problem I have tried to redirect the output of watch to a file but without success.I have tried this solution proposed on this link How to save output of \"watch\" to filewhile true\ndo\n   watch -n 1 kill -USR1 $pid_dd | tee -a output_watch.txt\n   sleep 2\ndone\nI don't know how to redirect the output of this command to a file. My solution doesn't work.", "I'm trying to display the status progression of a file copied with dd command:\nI run this command : dd if=/dev/zero of=file.txt count=1024 bs=10485760Then in another terminal, I run this command to display the status of progression:\nwatch -n 1 kill -USR1 $pid_ddMy problem I have tried to redirect the output of watch to a file but without success.I have tried this solution proposed on this link How to save output of \"watch\" to filewhile true\ndo\n   watch -n 1 kill -USR1 $pid_dd | tee -a output_watch.txt\n   sleep 2\ndone\nI don't know how to redirect the output of this command to a file. My solution doesn't work."], "chosen": ["\nInstead of looping through the same repetitive command indefinitely, you can take another approach.\nYou can utilize udev to monitor for plugged or unplugged USB devices, and execute a script at that time.\nExample, create 2 scripts:\nvi /bin/device_added.sh\nvi /bin/device_removed.sh\n\nwhich will log to a log file the ACTION (added or removed),\nand make those executable:\nchmod +x /bin/device_added.sh\nchmod +x /bin/device_removed.sh\n\nthen create a udev rule that will contain the triggers on when a device change is detected:\nvi /etc/udev/rules.d/80-test.rules\n\nwhich will contain for example:\nSUBSYSTEM==\"usb\", ACTION==\"add\", ENV{DEVTYPE}==\"usb_device\",  RUN+=\"/bin/device_added.sh\"\nSUBSYSTEM==\"usb\", ACTION==\"remove\", ENV{DEVTYPE}==\"usb_device\", RUN+=\"/bin/device_removed.sh\"\n\nThis way with your 2 scripts log only upon change, and not all the time..\n", "\nwatch -n 5 \"du -h club_prod.sql\"\n\n", "\nYou're piping the output of watch into awk.  If you simplify your command line, what you have is:\n watch <some arguments> | awk '{print $5}'\n\nThat's not what you want.  Try:\nwatch -n 5 \"ls -lh club_prod.sql | awk '{print \\$5}'\"\n\n", "\nNot exactly related, but if you want to monitor growth rate of some file, you could use following command:\ntail -f yourfile.txt | pv > /dev/null\n\ntail -f - outputs data appended to file\npv - measures data flow through pipe\n> /dev/null - standard output gets discarded\n\nNote: sometimes pv may be not preinstalled\nI hope this will help somebody :)\n", "\nYou need to quote the pipeline so that it is done within watch.\nwatch -n 5 \"ls -lh club_prod.sql | awk '{print \\$5}'\"\n\nNote also the \\ added to \\$5 because the outer quotes are now double quotes, in which $-variables are expanded.  (Other methods of quoting are generally uglier than this.)\n", "\nwatch -n 5 \"ls -lh club_prod.sql | awk '{print \\$5}'\"\n\n", "\nFor fast detailed growth watching of a file, every 0.1 second: \nwatch -n 0.1 \"ls -l /mnt/some/file | awk '{print \\$5}' | sed -re ' :rep ; s/([0-9])([0-9]{3})($|[^0-9])/\\1,\\2\\3/ ; t rep '\"\n\nThis will produce something like 62,673,539,072.\n", "\nThe usage of watch is correct, but the usage of ls I would avoid. I would recommend the usage of stat or du, but this depends on what you want.\n\ndu: If you want the space occupied on your drive\nstat: If you want the number of bytes your file contains (how many bytes can I read from the file)\n\nImagine working with a compressed file system, or with processing sparse files, internal fragmentation, indirect blocks ...\nFor both cases, the result would be:\n$ watch -n 5 'stat --printf \"%s\\n\" file'\n$ watch -n 5 'du -B1 file'\n\nBoth results can actually be obtained in a single command with stat:\n$ watch -n 5 'stat --printf \"%s %b %B\\n\" file'\n\nThe product of the last two columns is the result of du.\n", "\nYou can perform this like that:\nwhile true; do\n  du -s **file_or_directory**\n sleep **time_interval**\ndone\n\n", "\nI have tested that loop above without the \"watch\" command like this :\nwhile true\ndo\n  kill -USR1 $pid_dd | tee -a output_watch.txt\n  sleep 2\ndone\n\nThe problem is the \"output_watch.txt\" file is empty. I don't understand why.\n", "\nkill -USR1 $pid_dd doesn't output anything. You have indeed successfully captured its output, which is empty. It sends a signal that causes the dd process -- an entirely different process -- to output progress data on its stderr, which you didn't redirect.\nIf you simply redirect dd ... 2>&1 | tee -a file it will make it more difficult to determine the PID of dd which you need. Depending on your shell consider instead\ndd ... 2> >(tee -a file) & pid=$!\n\nwatch -n1 kill -USR1 $pid\n# you don't need a loop around watch, it already _is_ a loop\n\n# or _instead_\nwhile kill -USR1 $pid; do sleep 1; done\n\nAlternatively, see pv which already does almost what you want (if available). Although described as monitoring the copying of data from one process to another, it actually does stdin to stdout which can (both) be files instead of piped processes.\n"], "rejected": ["\nwatch is going to print some non-readable characters because it needs to clear the screen every time it runs the command. You could however just run the command in an infinite while loop with some delay:\nwhile true; do\n    lsusb >> lsusb_logs\n    sleep 1 # 1 second delay\ndone\n\n", "\n#!/bin/bash  \n# Watch File Size and Growth  \n# Author: Marcelo Pacheco - [email\u00a0protected]  \n# Syntax: watchfilesize filetomonitor\nnm=\"$1\"  \nwhile true  \ndo  \n  sz=$(stat -c %s \"$nm\")  \n  sleep 1m  \n  sz1=$(stat -c %s \"$nm\")  \n  echo Growth: $(((sz1-sz)/1024))KB/min Size: $((sz1/1024/1024))MB  \n  sz=$sz1  \ndone\n\n", "\n#!/bin/bash  \n# Watch File Size and Growth  \n# Author: Marcelo Pacheco - [email\u00a0protected]  \n# Syntax: watchfilesize filetomonitor\nnm=\"$1\"  \nwhile true  \ndo  \n  sz=$(stat -c %s \"$nm\")  \n  sleep 1m  \n  sz1=$(stat -c %s \"$nm\")  \n  echo Growth: $(((sz1-sz)/1024))KB/min Size: $((sz1/1024/1024))MB  \n  sz=$sz1  \ndone\n\n", "\n#!/bin/bash  \n# Watch File Size and Growth  \n# Author: Marcelo Pacheco - [email\u00a0protected]  \n# Syntax: watchfilesize filetomonitor\nnm=\"$1\"  \nwhile true  \ndo  \n  sz=$(stat -c %s \"$nm\")  \n  sleep 1m  \n  sz1=$(stat -c %s \"$nm\")  \n  echo Growth: $(((sz1-sz)/1024))KB/min Size: $((sz1/1024/1024))MB  \n  sz=$sz1  \ndone\n\n", "\n#!/bin/bash  \n# Watch File Size and Growth  \n# Author: Marcelo Pacheco - [email\u00a0protected]  \n# Syntax: watchfilesize filetomonitor\nnm=\"$1\"  \nwhile true  \ndo  \n  sz=$(stat -c %s \"$nm\")  \n  sleep 1m  \n  sz1=$(stat -c %s \"$nm\")  \n  echo Growth: $(((sz1-sz)/1024))KB/min Size: $((sz1/1024/1024))MB  \n  sz=$sz1  \ndone\n\n", "\n#!/bin/bash  \n# Watch File Size and Growth  \n# Author: Marcelo Pacheco - [email\u00a0protected]  \n# Syntax: watchfilesize filetomonitor\nnm=\"$1\"  \nwhile true  \ndo  \n  sz=$(stat -c %s \"$nm\")  \n  sleep 1m  \n  sz1=$(stat -c %s \"$nm\")  \n  echo Growth: $(((sz1-sz)/1024))KB/min Size: $((sz1/1024/1024))MB  \n  sz=$sz1  \ndone\n\n", "\n#!/bin/bash  \n# Watch File Size and Growth  \n# Author: Marcelo Pacheco - [email\u00a0protected]  \n# Syntax: watchfilesize filetomonitor\nnm=\"$1\"  \nwhile true  \ndo  \n  sz=$(stat -c %s \"$nm\")  \n  sleep 1m  \n  sz1=$(stat -c %s \"$nm\")  \n  echo Growth: $(((sz1-sz)/1024))KB/min Size: $((sz1/1024/1024))MB  \n  sz=$sz1  \ndone\n\n", "\n#!/bin/bash  \n# Watch File Size and Growth  \n# Author: Marcelo Pacheco - [email\u00a0protected]  \n# Syntax: watchfilesize filetomonitor\nnm=\"$1\"  \nwhile true  \ndo  \n  sz=$(stat -c %s \"$nm\")  \n  sleep 1m  \n  sz1=$(stat -c %s \"$nm\")  \n  echo Growth: $(((sz1-sz)/1024))KB/min Size: $((sz1/1024/1024))MB  \n  sz=$sz1  \ndone\n\n", "\n#!/bin/bash  \n# Watch File Size and Growth  \n# Author: Marcelo Pacheco - [email\u00a0protected]  \n# Syntax: watchfilesize filetomonitor\nnm=\"$1\"  \nwhile true  \ndo  \n  sz=$(stat -c %s \"$nm\")  \n  sleep 1m  \n  sz1=$(stat -c %s \"$nm\")  \n  echo Growth: $(((sz1-sz)/1024))KB/min Size: $((sz1/1024/1024))MB  \n  sz=$sz1  \ndone\n\n", "\nExactly @dave_thompson ! It works, I have written this code :\ndd ... 2>>/home/file.txt & pid_dd=$!\nwatch -n 1 kill -USR1 $pid_dd\n\nThe file \"file.txt\" has all information about the dd progress. \nThanks so much.\n", "\nExactly @dave_thompson ! It works, I have written this code :\ndd ... 2>>/home/file.txt & pid_dd=$!\nwatch -n 1 kill -USR1 $pid_dd\n\nThe file \"file.txt\" has all information about the dd progress. \nThanks so much.\n"]}