{"prompt": ["I want to filter the Wordpress backend access.\nWhen I add the following instructions to the code below, it shows a 403 error for all IPs address.\neven when I visit the page from my 68.xx.xx.xxx VPN ip address.Any guess of why my IP is blocked?I've added the following code for restricting access to some WP folders or files in my Nginx configuration for my Azure app. :location ~ ^/(wp-admin|wp-login\\.php) {\n       allow xx.xx.xx.xxx;\n       deny all;               \n   }\nFull code :server {\n        listen 80;\n        ## Your website name goes here.\n        server_name mywebsite;\n\n        ## Your only path reference.\n        root /var/www/wordpress;\n        ## This should be in your http block and if it is, it's not needed here.\n        index index.php;\n\n        location = /favicon.ico {\n                log_not_found off;\n                access_log off;\n        }\n\n        location = /robots.txt {\n                allow all;\n                log_not_found off;\n                access_log off;\n        }\n\n        # Add locations of phpmyadmin here.\n        location /phpmyadmin {\n                root /home/;\n                index index.php index.html index.htm;\n                location ~ ^/phpmyadmin/(.+\\.php)$ {\n                        try_files $uri =404;\n                        root /home/;\n                        fastcgi_pass unix:/var/run/php/php-fpm.sock;\n                        fastcgi_index index.php;\n                        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n                        include /etc/nginx/fastcgi_params;\n                }\n                location ~* ^/phpmyadmin/(.+\\.(jpg|jpeg|gif|css|png|js|ico|html|xml|txt))$ {\n                        root /home/;\n                }\n        }\n\n        # Disable sendfile as per https://docs.vagrantup.com/v2/synced-folders/virtualbox.html\n        sendfile off;\n        set $skip_cache 0;\n\n        # POST requests and urls with a query string should always go to PHP\n        if ($request_method = POST) {\n                set $skip_cache 1;\n        }\n\n        if ($query_string != \"\") {\n                set $skip_cache 1;\n        }\n\n        # Don't cache uris containing the following segments\n        if ($request_uri ~* \"/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml\") {\n                set $skip_cache 1;\n        }\n\n        # Don't use the cache for logged in users or recent commenters\n        if ($http_cookie ~* \"comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in\") {\n                set $skip_cache 1;\n        }\n\n        # Don't cache WooCommerce URLs\n        # Cart widgets are still a problem: https://github.com/emcniece/docker-wordpress/issues/3\n        if ($request_uri ~* \"/(cart|checkout|my-account)/*$\") {\n                set $skip_cache 1;\n        }\n\n        location / {\n                # This is cool because no php is touched for static content.\n                # include the \"?$args\" part so non-default permalinks doesn't break when using query string\n                try_files $uri $uri/ /index.php?$args;\n        }\n\nlocation ~ ^/(wp-admin|wp-login\\.php) {\n       allow xx.xx.xx.xxx;\n       deny all;               \n   }\n\n        location ~* \\.php$ {\n                #NOTE: You should have \"cgi.fix_pathinfo = 0;\" in php.ini\n                include fastcgi.conf;\n                include fastcgi_params;\n                fastcgi_intercept_errors on;\n                fastcgi_pass php;\n\n                fastcgi_read_timeout 300;\n                fastcgi_cache_bypass $skip_cache;\n                fastcgi_no_cache $skip_cache;\n                fastcgi_cache off;\n                fastcgi_cache_valid 60m;                \n        }\n\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico)$ {\n                expires max;\n                log_not_found off;\n        }\n}\n", "It doesn't work in shell script, but in javascript, it works fine, what's wrong with that?\nI just want to filter out all IPs that are not in the range of 2~254, for example, ignore the 255\nshell script\nI want to filter out the IP 192.168.18.255 only using the standard regular expressions.\n\ncurrent useful input IPs: 192.168.18.195 192.168.18.255\n\nwanted output IP: 192.168.18.195\n\n#!/usr/bin/env bash\n\nIPs=$(ifconfig | grep -oE '(192\\.168\\.1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])')\necho $IPs\n# 192.168.18.195 192.168.18.255 \u274c\n\nIPs1=$(ifconfig | grep -oE '192\\.168\\.(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.([2-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4])')\necho $IPs1\n# 192.168.18.195 192.168.18.25 \u274c\n\nIPs2=$(ifconfig | grep -oE '192\\.168\\.(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.([2-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4])$')\necho $IPs2\n# \u274c\n\n# wanted, ignore 192.168.18.255 \u2753\n# IPs=$(ifconfig | grep -oE '\u2753')\n# echo $IPs\n# 192.168.18.195\n\nThis minimal reproducible version input just for testing.en1: flags=8863<UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST> mtu 1500\n        options=6463<RXCSUM,TXCSUM,TSO4,TSO6,CHANNEL_IO,PARTIAL_CSUM,ZEROINVERT_CSUM>\n        ether a4:83:e7:91:62:79 \n        inet6 fe80::1ca2:3b0a:df9d:465f%en1 prefixlen 64 secured scopeid 0x7 \n        inet 192.168.18.195 netmask 0xffffff00 broadcast 192.168.18.255\n        inet6 fd80:eae6:1258:0:37:7544:1d1:7b08 prefixlen 64 autoconf secured \n        nd6 options=201<PERFORMNUD,DAD>\n        media: autoselect\n        status: active\n$ ifconfig\n# The output is too long, ignore it here, Please see the link below\nThe full version output of ifconfig link: https://gist.github.com/xgqfrms/a9e98b17835ddbffab07dde84bd3caa5javascript\nThis is just used for test ignore the IP 255 works well.\n\nfunction test(n) {\n  let reg = /192\\.168\\.(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.([2-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4])$/;\n   for (let i = 0; i < n; i++) {\n     let result = reg.test(`192.168.18.${i}`);\n     if(result) {\n       // console.log(`192.168.18.${i} \u2705`, i, result)\n     } else {\n       console.log(`192.168.18.${i} \u274c`, i, result)\n     }\n   }\n}\n\ntest(256);\n\n192.168.18.0 \u274c 0 false\n192.168.18.1 \u274c 1 false\n192.168.18.255 \u274c 255 false\n\n      \nrefshttps://regexper.com/https://regex101.com/", "I first decided to install Linux by moving from Windows 10 Pro 64-bit (updates were up-to-date), with old Acer unpopular motherboard, DDR3 12GB, Intel i5, GTX 1050Ti, and without TPM module and built-in WiFi adapter, to ArchLinux (01.01.2023 version), by extracting to a flash drive using Rufus for Windows.\nI formatted the USB flash drive (around 6GB free space without ISO-file) in GPT format with a large cache, unpacked the image (during this procedure, Rufus offered me to update the libraries, which I agreed to), got into ArchLinux's BootManager, selected the first line of the setup (x86-64), and everything except the \"systemd-networkd-wait-online.service\" automatically loads successfully.\nI have already prepared the distribution disk, by formatting the disk from which I downloaded ArchLinux (I have backup copies of Windows on other disks) under the Linux system according to the guide on YouTube.But after that, the first problems began. The \"ping\" command works just awful, which makes it impossible for me to install the necessary files, which needed to install the system afterwards.I have been experimenting for 17 hours now, almost non-stop trying to find at least some solutions, but nothing helps (and this problem has been relevant for decades on forums, and none of these answers helped me). The only thing that helps a little is the \"ip link\" command. I used to link ip \"localhost\" and dev \"lo\", because that's the only data the \"ip a\" command gives me. After that, I could connect to DNS servers with the \"ping\" command, and catch only one packet per attempt to enter the command, and even if I entered the IP (not in letters) of some website, for example \"google.com\", then nothing worked, as it was before the \"ip link\" command. By the way, \"ping localhost\" always worked fine, and I had a nice Internet speed, when I had a working OS.I tried to create a static IP, but could not do anything to raise the \"state\". Using the \"ip\" command does not change anything, and commands like \"ifconfig\", \"nmcli\" and many others simply do not work, most likely due to the lack of necessary files that I cannot download using this computer. The system clock is correct at first glance, but out of sync. All possible items that can block access to the Internet are disabled in the built-in UEFI menu. There is nothing left of Windows from the connected drives (SSD SATA-III (240GB), HDD (1TB)) on the computer, with the exception of the Windows recovery partition (around 100MB) on the HDD.Unfortunately, I don't have any wireless Internet adapter, but if there is no way without it, then I can buy it. I have a MiWiFi Router, and the settings on their site is good, and I even set Google and Cloudflare DNS servers, which didn't help.\nAny changes in any files don't make sense and mostly have been replaced instantly. After reboot, any changes are reset to default.My NVIDIA GPU was with \"NVIDIA STUDIO\" drivers installed earlier.When trying to enable \"dhcpcd\" or \"systemd-networkd-wait-online.service\", it starts spamming with one error with a pause, saying:\nroot@archiso ~ # [ OK ] Stopped Refresh Pacman mirrorlist with Reflector..\n\nStarting Refresh pacman mirrorlist with Reflector....\n\n[FAILED] Failed to start Refresh Pacman mirrorlist with Reflector.. See 'systemctl status reflector.service' for details.\n\nI tried to configure the configs of these services, but to no avail. And the command itself, which is advised to write a 'systemctl status reflector.service', gives only this afterwards:\n..reflector.service: enabled; preset: disabled) <...> Active: activating (auto-restart) (Result: exit-code) <...>  Process: ...(code=exited, status=1/FAILURE)...\".\n\nThe \"journalctl\" command shows errors like this:\n\n\"Unstable clock detected, switching default tracing clock to \"global\"...\n\nr8169 0000:03:00.0: unknown chip XID 481, contact r8169 maintainers (see MAINTAINERS file)\n\nACPI Warning: SystemIO range 0x0000000000000428-0x000000000000042F conflicts with OpRegion 0x0000000000000400-0x000000000000047F (\\PMIO) (20220331/utaddress-204\n\nACPI Warning: SystemIO range 0x0000000000000540-0x000000000000054F conflicts with OpRegion 0x0000000000000500-0x000000000000047F (\\GMIO) (20220331/utaddress-204)\n\nACPI Warning: SystemIO range 0x0000000000000530-0x000000000000053F conflicts with OpRegion 0x0000000000000500-0x0000000000000563 (\\GMIO) (20220331/utaddress-204)\n\nACPI Warning: SystemIO range 0x0000000000000500-0x000000000000052F conflicts with OpRegion 0x0000000000000500-0x0000000000000563 (\\GMIO) (20220331/utaddress-204)\n\nlpc_ich: Resource conflict(s) found affecting gpio_ich\n\ncfg80211: Process '/usr/bin/set-wireless-regdom' failed with exit code 1.\n\nat24 15-0050: supply vcc not found, using dummy regulator\n\ncontrolC1: Process '/usr/bin/alsact1 restore 1' failed with exit code 99.\n\ncontrolC0: Process '/usr/bin/alsact1 restore 0' failed with exit code 99.\n\ncontrolC2: Process '/usr/bin/alsact1 restore 2' failed with exit code 99.\n\nkauditd_printk_skb: 36 callbacks suppressed\n\nkauditd_printk_skb: 10 callbacks suppressed\n\nsystemd-networkd-wait-online[357]: Timeout occured while waiting for network connectivity.\n\nsystemd-networkd-wait-online.service: Main process exited, code=exited, status=1/FAILURE\n\nsystemd-networkd-wait-online.service: Failed with result 'exit-code'.\n\nFailed to start Wait dor Network to be Configured.\n\nReached target Network is Online.\n\nSwitching to fallback DNS server 1.1.1.1#cloudflare-dns.com.\n\nerror: failed to retrieve mirrorstatus data: URLError: <urlopen error [Errno -3] Temporary failure in name resolution>\n\nAnd I got what it says, but really don't know what to do now.I still want to fully and feature-richly try Linux, after the final disappointment in the lack of good customization in Windows (I'm not a hater, I just like to redo everything for myself), and I don't really want to go back there. That's why I turned here. I hope for your support, and sorry if there is a lot of text, I would just get bored of sending so much information separately.", "I would like to configure a wlan0 static ip and  connect through it by ssh.Here my /etc/network/interfaces :source-directory /etc/network/interfaces.d\nauto lo\niface lo inet loopback\n\nauto eth0\niface eth0 inet static\nadress 192.168.0.2\nnetmask 255.255.255.0\n\nauto wlan0\nallow-hotplug wlan0\niface wlan0 inet static\naddress 192.168.100.102\nnetmask 255.255.255.0\n    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\nWhen I do ifconfig my wlan0 and eth0 interfaces are correctly configured :However, when I want to ssh my raspberry by wifi, my Wifi router give to my raspberry the ip : 192.168.100.116.How can I force my Wifi router to give 192.168.100.102 to my rapsberry pi ?\nMoreover, My Wifi router give to my raspberry sometimes 192.168.100.102 and sometimes 192.168.100.116 Don't know why", "i have a file with the following lines:ex.host1   169.254.228.92\nhost2   169.254.230.182\nhost3   169.254.163.79\nand i want to sort it ascending by 3 column first and then 4when im using : sort -n -t .  -k 3,3  -k 4,4 test.txt \nit does not work properly, it only sorts by 3 column :host13  169.254.10.154\nhost12  169.254.18.77\nhost14  169.254.74.233\nAny solution ? ", "\u2514\u2500$ sed --version\nsed (GNU sed) 4.7file \"hosts\":ip1 == 10.0.0.1\nip2 == 10.0.0.100\ncommand executed:sudo -i sed -i 's/10.0.0.1/10.0.0.200/g' hosts\nOutput file :ip1 == 10.0.0.200\nip2 == 10.0.0.20000\n\nThe change in ip2 is not expected and an invalid.\nThis is just a sample logic need this logic for a Cloud Automation in RPA.\nThe Inputs of ip are dynamic vars.\n", "\u2514\u2500$ sed --version\nsed (GNU sed) 4.7file \"hosts\":ip1 == 10.0.0.1\nip2 == 10.0.0.100\ncommand executed:sudo -i sed -i 's/10.0.0.1/10.0.0.200/g' hosts\nOutput file :ip1 == 10.0.0.200\nip2 == 10.0.0.20000\n\nThe change in ip2 is not expected and an invalid.\nThis is just a sample logic need this logic for a Cloud Automation in RPA.\nThe Inputs of ip are dynamic vars.\n", "\u2514\u2500$ sed --version\nsed (GNU sed) 4.7file \"hosts\":ip1 == 10.0.0.1\nip2 == 10.0.0.100\ncommand executed:sudo -i sed -i 's/10.0.0.1/10.0.0.200/g' hosts\nOutput file :ip1 == 10.0.0.200\nip2 == 10.0.0.20000\n\nThe change in ip2 is not expected and an invalid.\nThis is just a sample logic need this logic for a Cloud Automation in RPA.\nThe Inputs of ip are dynamic vars.\n"], "chosen": ["\nI have tried the same which you tried and made some changes in the above given code. Here in the given code everything looks good but, I just changed the syntax format that you can check below.\nModification to the location block:\nlocation ~ ^/(wp-admin|wp-login\\.php) {\n    allow 68.84.18.107; # Replace with your actual IP address\n    deny all;\n    include fastcgi_params; # Make sure to include this line\n    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # Include this line as well if not already present\n    fastcgi_pass php;\n}\n\n\nIn webapp Go to Networking>Access Restrictions here I had configured network IP address access restrictions in the advanced tool site as per my requirement.\n\n\n\nReload or restart Nginx for the configuration to take effect.\nsudo service nginx reload \n\nHere is the full code for the reference.\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name yourdomain.com www.yourdomain.com;\n    return 301 https://erp.uni.mk$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name yourdomain.com;\n\n    ssl_certificate \"/etc/nginx/ssl/ca_full.crt\";\n    ssl_certificate_key \"/etc/nginx/ssl/private.key\";\n\n    # SSL configuration\n\n    location / {\n        # Your existing configuration for the main site\n        # ...\n    }\n\n    location ~ ^/(wp-admin|wp-login\\.php) {\n        allow xx.xx.xx.xxx;  # Replace with your allowed IP address\n        deny all;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        fastcgi_pass php;\n    }\n\n    location ~* \\.php$ {\n        include fastcgi.conf;\n        include fastcgi_params;\n        fastcgi_intercept_errors on;\n        fastcgi_pass php;\n        fastcgi_read_timeout 300;\n        fastcgi_cache_bypass $skip_cache;\n        fastcgi_no_cache $skip_cache;\n        fastcgi_cache off;\n        fastcgi_cache_valid 60m;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico)$ {\n        expires max;\n        log_not_found off;\n    }\n}\n\nRestricted:\n\nRedirected:\n\n", "\nsolutions\n\n\n\n\ntest environment\nresult\n\n\n\n\nmacOS 13.1\n\u2705\n\n\nRaspberry Pi OS x64\n\u2705\n\n\n\n\n\n\\b\ud83d\udc4d\n\n\nIt's very brief and clear. word boundary\n\n#!/usr/bin/env bash\n\nIPs=$(ifconfig | grep -oE '192\\.168\\.(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.([2-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4])\\b')\necho $IPs\n# 192.168.18.195\n\n\n\n\n[[:space:]] \ud83d\udc4e\n\n\nThis usage is not common, and not easy to understand.\n\nIt seems to be called character class keywords in GNU Linux.\n#!/usr/bin/env bash\n\nIPs=$(ifconfig | grep -oE '192\\.168\\.(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.([2-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4])[[:space:]]')\necho $IPs\n# 192.168.18.195\n\n\n\n\ngrep -w \ud83d\udc4e\n\n\nIt only works with grep, but is not compatible with standard regular expressions.\n\n#!/usr/bin/env bash\n\nIPs=$(ifconfig | grep -woE '192\\.168\\.(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.([2-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4])')\necho $IPs\n# 192.168.18.195\n\n\n\n$ man grep\n\n# ...\n\n     -w, --word-regexp\n             The expression is searched for as a word (as if surrounded by\n             \u2018[[:<:]]\u2019 and \u2018[[:>:]]\u2019; see re_format(7)).  This option has no\n             effect if -x is also specified.\n# ... \n\nrefs\n\nhttps://en.wikipedia.org/wiki/Regular_expression#Character_classes\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Assertions#:~:text=it%20in%20%22eat%22.-,%5Cb,-Matches%20a%20word\nhttps://www.tutorialspoint.com/unix/unix-regular-expressions.htm\n", "\nYeah guess what, you're not alone, this chip was \"known\" and working before the latest update.\n2023-03-05T18:59:26.743961-05:00 symphony kernel: [    1.503167] r8169 0000:02:00.0 eth0: RTL8168f/8111f, f8:0f:41:62:07:db, XID 481, IRQ 26\n2023-03-05T18:59:26.743962-05:00 symphony kernel: [    1.503175] r8169 0000:02:00.0 eth0: jumbo features [frames: 9194 bytes, tx checksumming: ko]\n\nBut now you get:\n2023-03-05T20:51:31.454817-05:00 symphony kernel: [    1.522054] r8169 0000:02:00.0: unknown chip XID 481, contact r8169 maintainers (see MAINTAINERS file)\n\nTo fix that you have to:\n\nget another computer\nget r8168-dkms from here: https://packages.debian.org/sid/all/r8168-dkms/download\ntransfer it to your computer with a usb stick or whatever\ninstall it, then, to be sure:\nsudo apt-mark hold r8168-dkms\ncreate \"/etc/modprobe.d/blacklist-r8169\"\nwrite \"blacklist r8169\" in it.\nreboot\n\nTa-da! LAN port lights up again.\n", "\nLogin on your router management interface and (if it has this feature, most do have it) reserve a DHCP address on the router for your selected client, so that the specific client always has the same IP address. See this article for more information.\n", "\nuse map and a lambda function to sort a list of tuples\nmyDict = [{'from': '10.246.47.121' },{'from': '10.60.0.111'}, {'from': '192.168.156.113'}, {'from': '192.168.20.100'}]\n\ndef store_dict(myDict):\n    myDict_by_ip = {\"from\":[]}\n    for d in myDict:\n        elements=d[\"from\"].split(\".\")\n        ip = [('element1',int(elements[0])),('element2',int(elements[1])),('element3',int(elements[2])),('element4',int(elements[3]))]    \n        myDict_by_ip[\"from\"].append(ip)\n    return myDict_by_ip\n\nmyDict_by_ip = store_dict(myDict)\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (x[0],x[1],x[2],x[3]),reverse=False)\n\nresult=list(map(lambda x:x,sort_array(myDict_by_ip['from'])))\ndata=[]\nfor components in result:\n    ip=[]\n    for key,value in components:\n        ip.append(str(value))\n    ip_string='.'.join(ip)\n    data.append(ip_string)\nprint(data)\n\n", "\nYou need to escape the . and add conditions to avoid partial match:\n$ sed 's/== 10\\.0\\.0\\.1$/== 10.0.0.200/' ip.txt\nip1 == 10.0.0.200\nip2 == 10.0.0.100\n\n$ is end of line anchor, if there can be whitespaces at the end of the line, use \\s*$\nUse ==\\s* instead of ==  if whitespaces after == can vary\nI'm assuming you can have only one match per line based on given sample, so g flag isn't used\n\nIf ip1, ip2 etc aren't actually part of input, use this:\n$ cat ip.txt \n10.0.0.1\n10.0.0.100\n\n$ sed 's/^10\\.0\\.0\\.1$/10.0.0.200/' ip.txt\n10.0.0.200\n10.0.0.100\n\n", "\nsudo -i sed -i 's/\\b10\\.0\\.0\\.1\\b/10.0.0.200/g' hosts\n\n\nescape the . ( . -> . ) because  means every character in regex\n\n\\b to limit the search to this exact sting\n\n\n", "\nYou have to change your command as follow:\nsed -i -e 's:10\\.0\\.0\\.1$:10\\.0\\.0\\.200:g' hosts\n\n"], "rejected": ["\nIssue resolved! It needed to add those lines as I was behind a reverse proxy into the location block:\nreal_ip_header X-Forwarded-For;\nset_real_ip_from 169.xx.xx.xx; # proxy address here\n\n", "\nSince output of your ifconfig contains not of only IPs, but also of text surrounding it, $ is not the only valid marker of IP end.\nSimplest way would be to replace it with \\b: word boundary. But it will work only if you are using GNU grep.\nIf your grep lacks support of \\b you can use ([[:space:]]|$) or [^0-9] instead. It will capture symbol following the IP if it is (whitespace or end-of-line) or non-digit correspondingly.\nExample of command with output of your ifconfig stored in file input_file.txt:\n$ ifconfig > input_file.txt\n\n$ cat input_file.txt | grep -oE '192\\.168\\.(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.([2-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-4])([[:space:]]|$)'\n192.168.18.195 \n\nDemo at regex101.\n", "\nYou have the needed information in the log, why didn't you follow the hint?\nr8169 0000:03:00.0: unknown chip XID 481, contact r8169 maintainers (see MAINTAINERS file)\nSupport for this chip version was removed because there was no hint that it really exists. For now you can downgrade the kernel or install vendor driver r8168.\n", "\nI experienced similar issues when I wanted to connect my Rasperry Pi 2 with Raspbian Jessie Lite in a headless configuration for access using SSH from my Windows 10 PC with PuTTY.\nIn my case it turned out that the Ahavi daemon (an implementation of zeroconf) conflicted with the DHCP and name server options of my router.\nRaspbian Jessie and Raspbian Jessie Lite comes pre-configured with an Avahi and a DHCP client deamon for automated network configuration. In most situation this will probably work fine, but if not, things take a turn for the worse with  unpredictable side-effects.\nInstead of going too deep into any details (its really a long story) I will just summarize here what I did and why. There are too many possible issues and I dont want to push you into the wrong direction. Try it out. If it fails, look for another approach or leave a comment for clarification.\nNow let's get your feet wet:\n\nTry it first on a non-productive SD card with a fresh copy of Raspbian Jessie (for headless servers I prefer Raspbian Jessie Lite).\n\nStart the Raspberry Pi with a keyboard and a monitor connected and login with user pi.\n\nStart raspi-config with sudo raspi-config and make sure to turn on the SSH server (menue 7 Advanced Options -> A4 SSH).\n\nGet your current IP address for eth0 with ifconfig.\n\nTry to connect to this address over ethernet using ssh. In case you cant connect, resolve this issue first. You cant connect over WLAN at this stage.\n\nIn case your connection succeeds, you can do the rest of your configuration using this connection over ssh.\n\nPurge the avahi-daemon\n$ sudo apt-get purge avahi-daemon\n\n\nDont worry about the error message 'rmdir: failed to remove \u2018/var/run/avahi-daemon\u2019: Directory not empty'. This is related to a an empty socket and a pid file, that currently cannot be removed. You can ignore this message or remove the directory manually, but it wont hurt in case you just leave it.\n$ sudo rm -r /var/run/avahi-daemon\n\n\nConfigure /etc/network/interfaces\n\nIt's important to know, that we need only one single change in this file. Open /etc/network/interfaces for changes with the editor of your choice (note: if you followed this steps 1:1 extended vim is not yet installed).\n$ sudo nano /etc/network/interfaces\n\nAdd the line auto eth0 just before the existing line iface eth0 inet manual. That's all we have to do here is to here. After the changes the file should look like this:\n# interfaces(5) file used by ifup(8) and ifdown(8)\n\n# Please note that this file is written to be used with dhcpcd\n# For static IP, consult /etc/dhcpcd.conf and 'man dhcpcd.conf'\n\n# Include files from /etc/network/interfaces.d:\nsource-directory /etc/network/interfaces.d\n\nauto lo\niface lo inet loopback\n\nauto eth0\niface eth0 inet manual\n\nallow-hotplug wlan0\niface wlan0 inet manual\n    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\n\nallow-hotplug wlan1\niface wlan1 inet manual\n    wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf\n\nNote: make sure to read and to understand the comments on top of the file!\n\nConfigure the DHCP client daemon\n\nNext, as stated in the comments of the previously edited file, add the static ip configuration at the end of the configuration file for the DHCP client daemon.\nIt might sound silly to use a DHCP client if we are going to use static IP addresses anyway. However, when I tried to remove the DHCP client daemon I experienced new configuration and/or dependency issues. Finally I decided to keep as close to the standard configuration as possible and leave it as is.\nThe configuration is done at the very end in the file /etc/dhcpcd.conf (watch proper spelling). The last line in the file should read: 'nohook lookup-hostname'. So let's open the the file in the editor and scroll down to the bottom of the file.\n$ sudo nano /etc/dhcpcd.conf\n\nAdd there the static ip definition. In my case the definitions at the of /etc/dhcpcd.conf look like this:\nnohook lookup-hostname\n\n# static ip configuration for eth0 and wlan0\ninterface eth0\nstatic ip_address=192.168.1.61/24\nstatic routers=192.168.1.1\nstatic domain_name_servers=192.168.1.1 8.8.8.8\n\ninterface wlan0\nstatic ip_address=192.168.1.62/24\nstatic routers=192.168.1.1\nstatic domain_name_servers=192.168.1.1 8.8.8.8\n\nNote that the syntax is different from the syntax used in /etc/network/interfaces. For a full class C network the netmask must be provided in form of a /24 at the end of the IP address. For further details consult man dhcpcd.conf.\n\nReboot and test your configuration with eth0\n\nAfter the next reboot you should have a reliable network configuration with static ip addresses. But remember, we are not yet finished and only eth0 will work. At this point even no IPv4 address will be shown for wlan0 if ifconfig is issued\nIn case it fails and you didn't do anything wrong so far (carefully check for typos), then you have another issue that must get fixed first; in this case this solution is probably not for you.\n\nConfigure WLAN\n\nTo configure WLAN we have to edit /etc/wpa_supplicant/wpa_supplicant.conf and add a network configuration to it.\nIn my case I'm using WPA/PSK for secure access and after modifying the country code and adding the network entry, the content of the file looks something like this:\ncountry=CH\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\n      \n# home network; allow all valid ciphers\nnetwork={\n    ssid=\"home\"\n    scan_ssid=1\n    key_mgmt=WPA-PSK\n    psk=\"very secret passphrase\"\n}\n\nssid=\"home\" is the WLAN network name (SSID) of the WLAN router or access point.\nscan_ssid=1 scans for hidden SSID's. This is usual practice but can slowdown the scan process.\nkey_mgmt=WPA-PSK defines that WPA pre-shared key management protocol will be used.\npsk=\"very secret passphrase\" defines your passphrase to access the router.\nReplace the values assigned for ssid and psk with the real values for your secure WLAN access. There are several supported protocols, some requiring other and more options.\nConsult man wpa_supplicant.conf for additional and more detailled information.\n\nReboot and test your configuration with wlan0\n\nNow it's time to reboot and test wlan0. The ip address configured for wlan0 should now appear if ifconfig is issued.\nIf this is the case you should be able to access the Rasperry Pi using ssh with the IP address configured for wlan0.\nI hope you are happy and everything works fine for you so far. If this is the case, I could stop writing here and leave you alone. But wait, there is more!\n\nTwo network connections, does that make sense?\n\nIf you connect to the Raspberry Pi from the same network over both, eth0 and wlan0 and issue an ifconfig to take a look at the transmitted and received packets or bytes, you will recognize, that even you connected to the IP for wlan0 most traffic is going through eth0.\nI cant explain why this is the case, but obviously somehow the packets are routed along the faster path which sounds good so far.\nHowever, I've seen rare situations where this behaviour was undesirable and slowed my connections down. Since I'm using my Raspberry Pi either near my router using a wired connection to eth0 or more distant from the router with no access to a cable using wlan0, I decided to stop wlan0 if a cable with an active connection to the router is attached to eth0.\nTo do this I created the script /home/pi/ifdown-wlan-if-not-needed.sh\n#!/bin/sh\n#### Shutdown wlan0\n# Test eth0 for a cable attached and\n# shutdown wlan0 if this is the case.\n###\nsleep 30\ncable=$(cat /sys/class/net/eth0/carrier)\necho $cable\nif [ \"$cable\" = \"1\" ]; then\n   sudo ifdown wlan0\nfi\nexit 0\n\nThen I've set the script to executable\n$ chmod +x /home/pi/ifdown-wlan-if-not-needed.sh\n\nAnd added it for execution after reboot with crontab -e to the crontab of user pi.\n@reboot /home/pi/ifdown-wlan-if-not-needed.sh\n\n\nName to IP address resolution\n\nSo far I have not yet addressed the name to IP address resolution problem. How this can be done best, depends on your network equipment and use case.\nMy router provides the ability to bind names to MAC addresses, hostnames and IPv4 adresses. However, for some reason none of these options really work. Some times it works by simply using the given name, other times the suffix .home is needed. Sometimes the names disappear from the list or no name resolution takes place even everything looks ok.\nI finally defined the adresses in the C:\\Windows\\System32\\drivers\\etc\\hosts file of my Windows PC and my Notebook. This is certainly not state of the art but works reliable and without hassle.\nHowever, I cant guarantee that what I did works for you too, but I hope it brings you on the right track to get your problem solved. I've been using my configuration since the release of Raspbian Jessie about one year ago. It survived any updates without hassle so far.\nGood luck!\n", "\nTry this:\nsort -n -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4 test.txt \n\nSort first by the first field, and only the first field (-k 1,1), then by the second and only the second (-k 2,2), and so on (-k 3,3 -k 4,4).\nOr just use sort -V.\n", "\nThis both helped me resolve it.\ni.e.\n$ sudo -i sed -i 's/10.0.0.1\\b/10.0.0.200/g' hosts\n\nor\n\n$ sudo -i sed -i 's/<\\10.0.0.1\\>/10.0.0.200/g' hosts\nMore Responses are welcome.\n", "\nThis both helped me resolve it.\ni.e.\n$ sudo -i sed -i 's/10.0.0.1\\b/10.0.0.200/g' hosts\n\nor\n\n$ sudo -i sed -i 's/<\\10.0.0.1\\>/10.0.0.200/g' hosts\nMore Responses are welcome.\n", "\nThis both helped me resolve it.\ni.e.\n$ sudo -i sed -i 's/10.0.0.1\\b/10.0.0.200/g' hosts\n\nor\n\n$ sudo -i sed -i 's/<\\10.0.0.1\\>/10.0.0.200/g' hosts\nMore Responses are welcome.\n"]}