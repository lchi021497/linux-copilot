{"prompt": ["So I have Gentoo box with three PHP versions installed (nevermind the reasons):\n/usr/bin/php -> /usr/lib64/php5.4/bin/php\n/usr/bin/php5.5 -> /usr/lib64/php5.5/bin/php\n/usr/bin/php5.6 -> /usr/lib64/php5.4/bin/php\nI want to install Laravel framework using composer:$ composer create-project laravel/laravel --prefer-dist\nThis however throws an error because Laravel requires PHP > 5.5.9 and the default php interpreter is 5.4.\nSo I issue another command:$ /usr/bin/php5.6 /usr/bin/composer create-project laravel/laravel --prefer-dist\nThis takes me one step further, but then some post-install commands from Laravel's composer.json comes into play, and installation crashes.This is due to the fact, that composer.json commands look like this:\"post-install-cmd\": [\n    \"php artisan clear-compiled\",\n    \"php artisan optimize\"\n],\nAs you can see, the \"default\" interpreter is used again!Now, proper PHP files start with following shebang:#!/usr/bin/env php\nThis is nice feature as PHP interpreter can be found under different locations on different systems.\nUnfortunatelly, in this case env command returns path to the first executable it finds in $PATH environmental variable.How could I possibly alter current session environment or what kind of trick to perform so for the execution of whole Laravel installation process php command would invoke /usr/bin/php5.6 instead of /usr/bin/php?I don't want to change $PATH variable or modify files like composer, composer.json or Laravel's CLI utility artisan.Edit: also assume that I want to do this from regular user account (i.e. with no root permissions).", "So I have Gentoo box with three PHP versions installed (nevermind the reasons):\n/usr/bin/php -> /usr/lib64/php5.4/bin/php\n/usr/bin/php5.5 -> /usr/lib64/php5.5/bin/php\n/usr/bin/php5.6 -> /usr/lib64/php5.4/bin/php\nI want to install Laravel framework using composer:$ composer create-project laravel/laravel --prefer-dist\nThis however throws an error because Laravel requires PHP > 5.5.9 and the default php interpreter is 5.4.\nSo I issue another command:$ /usr/bin/php5.6 /usr/bin/composer create-project laravel/laravel --prefer-dist\nThis takes me one step further, but then some post-install commands from Laravel's composer.json comes into play, and installation crashes.This is due to the fact, that composer.json commands look like this:\"post-install-cmd\": [\n    \"php artisan clear-compiled\",\n    \"php artisan optimize\"\n],\nAs you can see, the \"default\" interpreter is used again!Now, proper PHP files start with following shebang:#!/usr/bin/env php\nThis is nice feature as PHP interpreter can be found under different locations on different systems.\nUnfortunatelly, in this case env command returns path to the first executable it finds in $PATH environmental variable.How could I possibly alter current session environment or what kind of trick to perform so for the execution of whole Laravel installation process php command would invoke /usr/bin/php5.6 instead of /usr/bin/php?I don't want to change $PATH variable or modify files like composer, composer.json or Laravel's CLI utility artisan.Edit: also assume that I want to do this from regular user account (i.e. with no root permissions).", "So I have Gentoo box with three PHP versions installed (nevermind the reasons):\n/usr/bin/php -> /usr/lib64/php5.4/bin/php\n/usr/bin/php5.5 -> /usr/lib64/php5.5/bin/php\n/usr/bin/php5.6 -> /usr/lib64/php5.4/bin/php\nI want to install Laravel framework using composer:$ composer create-project laravel/laravel --prefer-dist\nThis however throws an error because Laravel requires PHP > 5.5.9 and the default php interpreter is 5.4.\nSo I issue another command:$ /usr/bin/php5.6 /usr/bin/composer create-project laravel/laravel --prefer-dist\nThis takes me one step further, but then some post-install commands from Laravel's composer.json comes into play, and installation crashes.This is due to the fact, that composer.json commands look like this:\"post-install-cmd\": [\n    \"php artisan clear-compiled\",\n    \"php artisan optimize\"\n],\nAs you can see, the \"default\" interpreter is used again!Now, proper PHP files start with following shebang:#!/usr/bin/env php\nThis is nice feature as PHP interpreter can be found under different locations on different systems.\nUnfortunatelly, in this case env command returns path to the first executable it finds in $PATH environmental variable.How could I possibly alter current session environment or what kind of trick to perform so for the execution of whole Laravel installation process php command would invoke /usr/bin/php5.6 instead of /usr/bin/php?I don't want to change $PATH variable or modify files like composer, composer.json or Laravel's CLI utility artisan.Edit: also assume that I want to do this from regular user account (i.e. with no root permissions).", "So I have Gentoo box with three PHP versions installed (nevermind the reasons):\n/usr/bin/php -> /usr/lib64/php5.4/bin/php\n/usr/bin/php5.5 -> /usr/lib64/php5.5/bin/php\n/usr/bin/php5.6 -> /usr/lib64/php5.4/bin/php\nI want to install Laravel framework using composer:$ composer create-project laravel/laravel --prefer-dist\nThis however throws an error because Laravel requires PHP > 5.5.9 and the default php interpreter is 5.4.\nSo I issue another command:$ /usr/bin/php5.6 /usr/bin/composer create-project laravel/laravel --prefer-dist\nThis takes me one step further, but then some post-install commands from Laravel's composer.json comes into play, and installation crashes.This is due to the fact, that composer.json commands look like this:\"post-install-cmd\": [\n    \"php artisan clear-compiled\",\n    \"php artisan optimize\"\n],\nAs you can see, the \"default\" interpreter is used again!Now, proper PHP files start with following shebang:#!/usr/bin/env php\nThis is nice feature as PHP interpreter can be found under different locations on different systems.\nUnfortunatelly, in this case env command returns path to the first executable it finds in $PATH environmental variable.How could I possibly alter current session environment or what kind of trick to perform so for the execution of whole Laravel installation process php command would invoke /usr/bin/php5.6 instead of /usr/bin/php?I don't want to change $PATH variable or modify files like composer, composer.json or Laravel's CLI utility artisan.Edit: also assume that I want to do this from regular user account (i.e. with no root permissions).", "So I have Gentoo box with three PHP versions installed (nevermind the reasons):\n/usr/bin/php -> /usr/lib64/php5.4/bin/php\n/usr/bin/php5.5 -> /usr/lib64/php5.5/bin/php\n/usr/bin/php5.6 -> /usr/lib64/php5.4/bin/php\nI want to install Laravel framework using composer:$ composer create-project laravel/laravel --prefer-dist\nThis however throws an error because Laravel requires PHP > 5.5.9 and the default php interpreter is 5.4.\nSo I issue another command:$ /usr/bin/php5.6 /usr/bin/composer create-project laravel/laravel --prefer-dist\nThis takes me one step further, but then some post-install commands from Laravel's composer.json comes into play, and installation crashes.This is due to the fact, that composer.json commands look like this:\"post-install-cmd\": [\n    \"php artisan clear-compiled\",\n    \"php artisan optimize\"\n],\nAs you can see, the \"default\" interpreter is used again!Now, proper PHP files start with following shebang:#!/usr/bin/env php\nThis is nice feature as PHP interpreter can be found under different locations on different systems.\nUnfortunatelly, in this case env command returns path to the first executable it finds in $PATH environmental variable.How could I possibly alter current session environment or what kind of trick to perform so for the execution of whole Laravel installation process php command would invoke /usr/bin/php5.6 instead of /usr/bin/php?I don't want to change $PATH variable or modify files like composer, composer.json or Laravel's CLI utility artisan.Edit: also assume that I want to do this from regular user account (i.e. with no root permissions).", "So I have Gentoo box with three PHP versions installed (nevermind the reasons):\n/usr/bin/php -> /usr/lib64/php5.4/bin/php\n/usr/bin/php5.5 -> /usr/lib64/php5.5/bin/php\n/usr/bin/php5.6 -> /usr/lib64/php5.4/bin/php\nI want to install Laravel framework using composer:$ composer create-project laravel/laravel --prefer-dist\nThis however throws an error because Laravel requires PHP > 5.5.9 and the default php interpreter is 5.4.\nSo I issue another command:$ /usr/bin/php5.6 /usr/bin/composer create-project laravel/laravel --prefer-dist\nThis takes me one step further, but then some post-install commands from Laravel's composer.json comes into play, and installation crashes.This is due to the fact, that composer.json commands look like this:\"post-install-cmd\": [\n    \"php artisan clear-compiled\",\n    \"php artisan optimize\"\n],\nAs you can see, the \"default\" interpreter is used again!Now, proper PHP files start with following shebang:#!/usr/bin/env php\nThis is nice feature as PHP interpreter can be found under different locations on different systems.\nUnfortunatelly, in this case env command returns path to the first executable it finds in $PATH environmental variable.How could I possibly alter current session environment or what kind of trick to perform so for the execution of whole Laravel installation process php command would invoke /usr/bin/php5.6 instead of /usr/bin/php?I don't want to change $PATH variable or modify files like composer, composer.json or Laravel's CLI utility artisan.Edit: also assume that I want to do this from regular user account (i.e. with no root permissions).", "So I have Gentoo box with three PHP versions installed (nevermind the reasons):\n/usr/bin/php -> /usr/lib64/php5.4/bin/php\n/usr/bin/php5.5 -> /usr/lib64/php5.5/bin/php\n/usr/bin/php5.6 -> /usr/lib64/php5.4/bin/php\nI want to install Laravel framework using composer:$ composer create-project laravel/laravel --prefer-dist\nThis however throws an error because Laravel requires PHP > 5.5.9 and the default php interpreter is 5.4.\nSo I issue another command:$ /usr/bin/php5.6 /usr/bin/composer create-project laravel/laravel --prefer-dist\nThis takes me one step further, but then some post-install commands from Laravel's composer.json comes into play, and installation crashes.This is due to the fact, that composer.json commands look like this:\"post-install-cmd\": [\n    \"php artisan clear-compiled\",\n    \"php artisan optimize\"\n],\nAs you can see, the \"default\" interpreter is used again!Now, proper PHP files start with following shebang:#!/usr/bin/env php\nThis is nice feature as PHP interpreter can be found under different locations on different systems.\nUnfortunatelly, in this case env command returns path to the first executable it finds in $PATH environmental variable.How could I possibly alter current session environment or what kind of trick to perform so for the execution of whole Laravel installation process php command would invoke /usr/bin/php5.6 instead of /usr/bin/php?I don't want to change $PATH variable or modify files like composer, composer.json or Laravel's CLI utility artisan.Edit: also assume that I want to do this from regular user account (i.e. with no root permissions).", "So I have Gentoo box with three PHP versions installed (nevermind the reasons):\n/usr/bin/php -> /usr/lib64/php5.4/bin/php\n/usr/bin/php5.5 -> /usr/lib64/php5.5/bin/php\n/usr/bin/php5.6 -> /usr/lib64/php5.4/bin/php\nI want to install Laravel framework using composer:$ composer create-project laravel/laravel --prefer-dist\nThis however throws an error because Laravel requires PHP > 5.5.9 and the default php interpreter is 5.4.\nSo I issue another command:$ /usr/bin/php5.6 /usr/bin/composer create-project laravel/laravel --prefer-dist\nThis takes me one step further, but then some post-install commands from Laravel's composer.json comes into play, and installation crashes.This is due to the fact, that composer.json commands look like this:\"post-install-cmd\": [\n    \"php artisan clear-compiled\",\n    \"php artisan optimize\"\n],\nAs you can see, the \"default\" interpreter is used again!Now, proper PHP files start with following shebang:#!/usr/bin/env php\nThis is nice feature as PHP interpreter can be found under different locations on different systems.\nUnfortunatelly, in this case env command returns path to the first executable it finds in $PATH environmental variable.How could I possibly alter current session environment or what kind of trick to perform so for the execution of whole Laravel installation process php command would invoke /usr/bin/php5.6 instead of /usr/bin/php?I don't want to change $PATH variable or modify files like composer, composer.json or Laravel's CLI utility artisan.Edit: also assume that I want to do this from regular user account (i.e. with no root permissions).", "So I have Gentoo box with three PHP versions installed (nevermind the reasons):\n/usr/bin/php -> /usr/lib64/php5.4/bin/php\n/usr/bin/php5.5 -> /usr/lib64/php5.5/bin/php\n/usr/bin/php5.6 -> /usr/lib64/php5.4/bin/php\nI want to install Laravel framework using composer:$ composer create-project laravel/laravel --prefer-dist\nThis however throws an error because Laravel requires PHP > 5.5.9 and the default php interpreter is 5.4.\nSo I issue another command:$ /usr/bin/php5.6 /usr/bin/composer create-project laravel/laravel --prefer-dist\nThis takes me one step further, but then some post-install commands from Laravel's composer.json comes into play, and installation crashes.This is due to the fact, that composer.json commands look like this:\"post-install-cmd\": [\n    \"php artisan clear-compiled\",\n    \"php artisan optimize\"\n],\nAs you can see, the \"default\" interpreter is used again!Now, proper PHP files start with following shebang:#!/usr/bin/env php\nThis is nice feature as PHP interpreter can be found under different locations on different systems.\nUnfortunatelly, in this case env command returns path to the first executable it finds in $PATH environmental variable.How could I possibly alter current session environment or what kind of trick to perform so for the execution of whole Laravel installation process php command would invoke /usr/bin/php5.6 instead of /usr/bin/php?I don't want to change $PATH variable or modify files like composer, composer.json or Laravel's CLI utility artisan.Edit: also assume that I want to do this from regular user account (i.e. with no root permissions).", "I want to set a path environment variable in bash by C program.\nSo I coded using 'setenv' function, But it was not the answer to solve.Could anybody suggest another way to solve this problem in C programming?I thought the other solution that the program read the profile file, then modify and save, but actually when I opened this file there's no string I wanted about PATH variable.   ", "I am having a strange problem when I run a script, I can not load pymongo, but it is available when I run the hashbang interpreter (/usr/bin/env python).The original call import pymongo was buried quite deep in a class, but even if I call it at line 1, it fails.Why is this?Here is some output from the python console showing pymongo is available:# /usr/bin/env python\nPython 2.7.4 (default, Apr 23 2013, 14:02:51)\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-3)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pymongo\n>>> \nHere are the first three lines of a script# head -n 3 ./app/app.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport pymongo\nHere is the failure:# python ./app/app.py\nTraceback (most recent call last):\n  File \"./app/app.py\", line 3, in <module>\n    import pymongo\nImportError: No module named pymongo\nBut running with /usr/bin/env works okay... why?# /usr/bin/env python ./app/app.py\nTraceback (most recent call last):\n  File \"./app/app.py\", line 37, in <module>\n    db = backend.flowbackend.getBackendObject(config.db_backend, config.db_host, config.db_port, config.db_user, config.db_password, config.db_name)\n      File \"./app/../lib/backend/flowbackend.py\", line 268, in getBackendObject\n    return MongoBackend(host, port, user, password, databaseName)\n  File \"./app/../lib/backend/mongobackend.py\", line 13, in __init__\n    self.connect()\n  File \"./app/../lib/backend/mongobackend.py\", line 62, in connect\n    self.conn = pymongo.Connection(self.host, self.port)\n  File \"/usr/local/lib/python2.7/site-packages/pymongo/connection.py\", line 220, in     __init__\n    max_pool_size, document_class, tz_aware, _connect, **kwargs)\n  File \"/usr/local/lib/python2.7/site-packages/pymongo/mongo_client.py\", line 336, in     __init__\n    raise ConnectionFailure(str(e))\npymongo.errors.ConnectionFailure: could not connect to 127.0.0.1:27017: [Errno 111]     Connection refused\n", "I am having a strange problem when I run a script, I can not load pymongo, but it is available when I run the hashbang interpreter (/usr/bin/env python).The original call import pymongo was buried quite deep in a class, but even if I call it at line 1, it fails.Why is this?Here is some output from the python console showing pymongo is available:# /usr/bin/env python\nPython 2.7.4 (default, Apr 23 2013, 14:02:51)\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-3)] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pymongo\n>>> \nHere are the first three lines of a script# head -n 3 ./app/app.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nimport pymongo\nHere is the failure:# python ./app/app.py\nTraceback (most recent call last):\n  File \"./app/app.py\", line 3, in <module>\n    import pymongo\nImportError: No module named pymongo\nBut running with /usr/bin/env works okay... why?# /usr/bin/env python ./app/app.py\nTraceback (most recent call last):\n  File \"./app/app.py\", line 37, in <module>\n    db = backend.flowbackend.getBackendObject(config.db_backend, config.db_host, config.db_port, config.db_user, config.db_password, config.db_name)\n      File \"./app/../lib/backend/flowbackend.py\", line 268, in getBackendObject\n    return MongoBackend(host, port, user, password, databaseName)\n  File \"./app/../lib/backend/mongobackend.py\", line 13, in __init__\n    self.connect()\n  File \"./app/../lib/backend/mongobackend.py\", line 62, in connect\n    self.conn = pymongo.Connection(self.host, self.port)\n  File \"/usr/local/lib/python2.7/site-packages/pymongo/connection.py\", line 220, in     __init__\n    max_pool_size, document_class, tz_aware, _connect, **kwargs)\n  File \"/usr/local/lib/python2.7/site-packages/pymongo/mongo_client.py\", line 336, in     __init__\n    raise ConnectionFailure(str(e))\npymongo.errors.ConnectionFailure: could not connect to 127.0.0.1:27017: [Errno 111]     Connection refused\n", "The following shell script is working fine while I execute it from a Linux prompt, but when it's called by a Unix service (e.g. inetd, etc.) it doesn't recognize the $ACT_NUM variable inside the Perl script.export ACT_NUM=$1\nperl -pi -e '$v=$ENV{ACT_NUM};s/TRIGGER_VALUE\" value=\"\\d*\"/TRIGGER_VALUE\" value=\"$v\"/>//' soa_triggering.xml\nThe soa_triggering.xml content file is<ins:Parameter name=\"TRIGGER_VALUE\" value=\"1\"/>\n", "which linux environment variable do I have to set for english output, but ISO/metric units for time, date, etc. ?Currently I have in my env:LC_MESSAGES=en_US\nLANG=en_US\nLANGUAGE=\nThanks."], "chosen": ["\nDefault PHP executable can be found using:\n$ which php\n\nIn most cases it is link to particular PHP version:\nlrwxrwxrwx 1 root root      21 aug 15  2016 /usr/bin/php -> /usr/bin/php7.1\n\nTo change it to different version just relink it to another\n$ sudo rm /usr/bin/php\n\n$ sudo ln -s /usr/bin/php5.6 /usr/bin/php\n\nBefore relink you have to make sure target PHP version is installed.\n", "\nIdentify where the current generic php command is and to which binary it points to with which php.\nIt will give you a path to a symlink like you mention in your question\n/usr/bin/php -> /usr/lib64/php5.4/bin/php \nEdit the symlink to point to which ever php version you want for now, see here\nhttps://unix.stackexchange.com/questions/88824/how-can-i-edit-symlinks\nWhen you are done just reverse the process.\nUPDATE:\nyou can also add an alias for the current user by editing ~/.bashrc and adding the following\nalias php='/usr/bin/php5.6'\nsee if this works out\n", "\nMaybe you can try to fix the environnement!\n$ php -v\nPHP 5.4.x (cli) ...\n$ set PATH=\"/usr/lib64/php5.6/bin:$PATH\"\n$ php -v\nPHP 5.6.x (cli) ...\n\nOr, if you don't want to modify the PATH for your shell session, you can scope the change for the current command only:\n$ php -v\nPHP 5.4.x (cli) ...\n$ env PATH=\"/usr/lib64/php5.6/bin:$PATH\" php -v\nPHP 5.6.x (cli) ...\n$ php -v\nPHP 5.4.x (cli) ...\n\n", "\nSince PHP7 came around Debian Linux creates different executables for PHP versions 5 and 7 in /usr/bin by default (if you install both versions that is).\nCalling those different versions from the command line is as simple as ever now:\nkkarski@debian:~ $ php5 -v\nPHP 5.6.26-0+deb8u1 (cli) (built: Sep 21 2016 12:37:50) \nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\n\n\nkkarski@debian:~ $ php -v\nPHP 7.0.9-1~dotdeb+8.1 (cli) ( NTS )\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies\n    with Zend OPcache v7.0.9-1~dotdeb+8.1, Copyright (c) 1999-2016, by Zend Technologies\n\nThis is obviously only good for simple scripts. For anything larger (composer, artisan etc.) you'll have to change the PATH variable.\nTo change the version your Apache server is using all you have to do is:\nroot@debian:~# a2dismod php5 && a2enmod php7.0\nModule php5 disabled.\nTo activate the new configuration, you need to run:\n  service apache2 restart\nConsidering conflict php5 for php7.0:\nEnabling module php7.0.\nTo activate the new configuration, you need to run:\n  service apache2 restart\n\nand vice versa if you want to use the lower PHP version.\nMentioning it in case someone has similar problems on Debian.\n", "\nI find the easiest to achieve the same like just create a softlink like for example\nln -s /opt/php-7.0.32/bin/php /usr/bin/php7\n\nln -s /opt/php-7.1/bin/php /usr/bin/php71\n\nln -s /opt/php-5.6/bin/php /usr/bin/php56\n\nthen as you use your default version say it is php7.2 as just php for alternative version you can you php7 or php71 or php56\nhere ln -s /opt/php-7.1/bin/php /usr/bin/php71 is the source/orginal file and /usr/bin/php7 is the destination / link\n", "\nFor anyone else who found no solution in the above, because they use composer update and somehow the wrong PHP version gets used. By using composer self-update I got some more info and eventually found out that in the composer.json you can specify a platform in the config section, which overrides what php version is used by composer. Simply changing this value or removing this config solved my issue.\ncomposer.json\n\n  \"config\": {\n    \"platform\": {\n      \"php\": \"7.1\"\n    },\n\n", "\nIt's possible to do using alias, but keep in mind that aliases are not expanded by default.\nYou must also enable expanding of those.\n$ shopt -s expand_aliases\n$ alias php=\"/usr/local/bin/php-5.6\"\n$ ./some-script.sh\n$ unalias php # back to previous version\n\n", "\nOn Ubuntu, you don't have to make any changes to the filesystem, you can just execute:\n\n$ php{version} {script}\n\nand substitute the version for what you have installed. For example:\nphp7.4 script.php\nphp8.2 script.php\n\nTo see which PHP versions are installed, just do ls /usr/bin/php*.\n", "\nI worked on a \"script + docker image\" to make multiple php versions available whenever I want during development: https://github.com/jclaveau/docker-php-multiversion\nYou can use it this way:\n$ php 5.6 -v\nPHP 5.6.40-15+ubuntu18.04.1+deb.sury.org+1 (cli) \nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\n    with Xdebug v2.5.5, Copyright (c) 2002-2017, by Derick Rethans\n\n$ php 7.3 -v\nPHP 7.3.13-1+ubuntu18.04.1+deb.sury.org+1 (cli) (built: Dec 18 2019 14:48:49) ( NTS )\nCopyright (c) 1997-2018 The PHP Group\nZend Engine v3.3.13, Copyright (c) 1998-2018 Zend Technologies\n    with Zend OPcache v7.3.13-1+ubuntu18.04.1+deb.sury.org+1, Copyright (c) 1999-2018, by Zend Technologies\n    with Xdebug v2.9.0, Copyright (c) 2002-2019, by Derick Rethans\n\nAs it uses Docker.io, you do not need to alter any part of your system configuration.\nHoping it would help you\n", "\nHere an example to define the Python path.\nIt is created a string path and append it to the python path.\n\n\nchar *append_path = malloc(sizeof(char) * 1000);\r\nappend_path = \"/trunk/software/hmac_sha256/:.\";\r\nprintf(\"Append to path is:\\n%s\\n\", append_path);           \r\nsetenv(\"PYTHONPATH\",append_path,1);//Set PYTHONPATH TO working directory https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.1.0/com.ibm.zos.v2r1.bpxbd00/setenv.htm\r\nchar *path = Py_GetPath();\r\nprintf(\"Python search path is:\\n%s\\n\", path);\n\n\n\nThis should append the string to the PYTHONPATH environment variable. For me it is working as stated before.\nIn case the variable is replaced and not appended, then you just need to read the environment variable before, append the new string and then do the \"setenv\".\nfor example\n\n\n//include string functions\r\n#include <string.h>\r\n\r\n....\r\n\r\nchar *current_path = malloc(sizeof(char) * 1000);\r\ncurrent_path = Py_GetPath();\r\nprintf(\"Current search path is:\\n%s\\n\", current_path);\r\nchar *new_path = malloc(sizeof(char) * 1000);\r\nnew_path = \"/trunk/software/hmac_sha256/:.\";\r\nprintf(\"New to add path is:\\n%s\\n\", new_path);\r\nsnprintf(current_path, sizeof(char) * 1000, \"%s%s\", current_path,new_path);//this concatenate both strings\r\nsetenv(\"PYTHONPATH\",current_path,1);//Set PYTHONPATH TO working directory https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.1.0/com.ibm.zos.v2r1.bpxbd00/setenv.htm\r\nchar *path = Py_GetPath();\r\nprintf(\"Python search path is:\\n%s\\n\", path);\n\n\n\n", "\nCheck .pythonrc in your home directory.  The console executes it (if present), scripts don't.  It's the only thing I can think of right now.  Maybe it sets sys.path such that pymongo is accessible.\nI assume that you're trying to run the script as you, that is, the same user that starts the interactive interpreter.  If not, well, that could also be a cause.\n", "\nI have the same issue with pyserial, but in my case my script file has name serial.py, so when I try to import serial it can't recognize my package. I just rename my file and works fine.\n", "\nRegular expressions are insufficiently expressive to parse XML. For instance, your same value could be written out over three lines with the parameter order reversed, as:\n<ins:Parameter\n value=\"1\"\n name=\"TRIGGER_VALUE\"/>\n\n...or with numerous other variances (unexpected whitespace, &c). Trying to cover the corner cases -- which also include distinguishing content in CDATA and comments from actual tags -- is potentially sanity-impacting.\n\nIf you're editing XML, use an actual XML parser. One good choice is XMLStarlet:\nxmlstarlet ed -i \\\n  -u '//*[@name=\"TRIGGER_VALUE\"]/@value' \\\n  -v \"$ACT_NUM\" \\\n  soa_triggering.xml\n\nIf you know what the ins namespace points to, you can do better:\n# Replace http://example.com/ins-namespace with actual value\n# from xmlns:ins=\"...\" earlier in your document\nxmlstarlet ed -i -N \"ins=http://example.com/ins-namespace\" \\\n  -u '//ins:Parameter[@name=\"TRIGGER_VALUE\"]/@value' \\\n  -v \"$ACT_NUM\" \\\n  soa_triggering.xml\n\n", "\nYou should set LC_TIME, for other LC_* variables look at The Open Group's Locale man page.\n"], "rejected": ["\nI had this requirement for composer which required PHP to be a specific version on a multi-tenant system which would end up affecting other web applications. I could not update the symbolic link to PHP for the whole system, I needed to switch the PHP version for this specific execution only, so I ended up with the following.\nphp80 `which composer` install\n\n\nNote:\nAs long as you have different versions of PHP installed it would just work.\n`which composer` - expands to the path of the composer binary, so you do not have to type the full path.\n\n", "\nI had this requirement for composer which required PHP to be a specific version on a multi-tenant system which would end up affecting other web applications. I could not update the symbolic link to PHP for the whole system, I needed to switch the PHP version for this specific execution only, so I ended up with the following.\nphp80 `which composer` install\n\n\nNote:\nAs long as you have different versions of PHP installed it would just work.\n`which composer` - expands to the path of the composer binary, so you do not have to type the full path.\n\n", "\nI had this requirement for composer which required PHP to be a specific version on a multi-tenant system which would end up affecting other web applications. I could not update the symbolic link to PHP for the whole system, I needed to switch the PHP version for this specific execution only, so I ended up with the following.\nphp80 `which composer` install\n\n\nNote:\nAs long as you have different versions of PHP installed it would just work.\n`which composer` - expands to the path of the composer binary, so you do not have to type the full path.\n\n", "\nI had this requirement for composer which required PHP to be a specific version on a multi-tenant system which would end up affecting other web applications. I could not update the symbolic link to PHP for the whole system, I needed to switch the PHP version for this specific execution only, so I ended up with the following.\nphp80 `which composer` install\n\n\nNote:\nAs long as you have different versions of PHP installed it would just work.\n`which composer` - expands to the path of the composer binary, so you do not have to type the full path.\n\n", "\nI had this requirement for composer which required PHP to be a specific version on a multi-tenant system which would end up affecting other web applications. I could not update the symbolic link to PHP for the whole system, I needed to switch the PHP version for this specific execution only, so I ended up with the following.\nphp80 `which composer` install\n\n\nNote:\nAs long as you have different versions of PHP installed it would just work.\n`which composer` - expands to the path of the composer binary, so you do not have to type the full path.\n\n", "\nI had this requirement for composer which required PHP to be a specific version on a multi-tenant system which would end up affecting other web applications. I could not update the symbolic link to PHP for the whole system, I needed to switch the PHP version for this specific execution only, so I ended up with the following.\nphp80 `which composer` install\n\n\nNote:\nAs long as you have different versions of PHP installed it would just work.\n`which composer` - expands to the path of the composer binary, so you do not have to type the full path.\n\n", "\nI had this requirement for composer which required PHP to be a specific version on a multi-tenant system which would end up affecting other web applications. I could not update the symbolic link to PHP for the whole system, I needed to switch the PHP version for this specific execution only, so I ended up with the following.\nphp80 `which composer` install\n\n\nNote:\nAs long as you have different versions of PHP installed it would just work.\n`which composer` - expands to the path of the composer binary, so you do not have to type the full path.\n\n", "\nI had this requirement for composer which required PHP to be a specific version on a multi-tenant system which would end up affecting other web applications. I could not update the symbolic link to PHP for the whole system, I needed to switch the PHP version for this specific execution only, so I ended up with the following.\nphp80 `which composer` install\n\n\nNote:\nAs long as you have different versions of PHP installed it would just work.\n`which composer` - expands to the path of the composer binary, so you do not have to type the full path.\n\n", "\nI had this requirement for composer which required PHP to be a specific version on a multi-tenant system which would end up affecting other web applications. I could not update the symbolic link to PHP for the whole system, I needed to switch the PHP version for this specific execution only, so I ended up with the following.\nphp80 `which composer` install\n\n\nNote:\nAs long as you have different versions of PHP installed it would just work.\n`which composer` - expands to the path of the composer binary, so you do not have to type the full path.\n\n", "\nYou can use setenv() and putenv() to set environment variables. But these will only be set for the given program.  You cannot set environment variables for the shell or its parent process.\n", "\nRunning /usr/bin/python was 2.6.6 and /usr/local/bin/python was 2.7.4.  pip-python was affecting /usr/bin/python.\n# pip-python -E /usr/local/bin/python freeze\ndistribute==0.6.10\niniparse==0.3.1\npycurl==7.19.0\npygpgme==0.1\nurlgrabber==3.9.1\nwsgiref==0.1.2\nyum-metadata-parser==1.1.2\n\n# pip-python install pymongo\n...\n\n# pip-python -E /usr/local/bin/python freeze\ndistribute==0.6.10\niniparse==0.3.1\npycurl==7.19.0\npygpgme==0.1\npymongo==2.5\nurlgrabber==3.9.1\nwsgiref==0.1.2\nyum-metadata-parser==1.1.2\n\n# pip-python -E /usr/bin/python freeze\ndistribute==0.6.10\niniparse==0.3.1\npycurl==7.19.0\npygpgme==0.1\npymongo==2.5\nurlgrabber==3.9.1\nyum-metadata-parser==1.1.2\n\nBoth instances must refer to the same libs.  Okay fine...\n", "\nRunning /usr/bin/python was 2.6.6 and /usr/local/bin/python was 2.7.4.  pip-python was affecting /usr/bin/python.\n# pip-python -E /usr/local/bin/python freeze\ndistribute==0.6.10\niniparse==0.3.1\npycurl==7.19.0\npygpgme==0.1\nurlgrabber==3.9.1\nwsgiref==0.1.2\nyum-metadata-parser==1.1.2\n\n# pip-python install pymongo\n...\n\n# pip-python -E /usr/local/bin/python freeze\ndistribute==0.6.10\niniparse==0.3.1\npycurl==7.19.0\npygpgme==0.1\npymongo==2.5\nurlgrabber==3.9.1\nwsgiref==0.1.2\nyum-metadata-parser==1.1.2\n\n# pip-python -E /usr/bin/python freeze\ndistribute==0.6.10\niniparse==0.3.1\npycurl==7.19.0\npygpgme==0.1\npymongo==2.5\nurlgrabber==3.9.1\nyum-metadata-parser==1.1.2\n\nBoth instances must refer to the same libs.  Okay fine...\n", "\nI think your problem is more fundamental than expansion of $1 - I'm going to hazard a guess that the regex isn't matching - because:\n$v=$ENV{ACT_NUM};s/TRIGGER_VALUE\" value=\"\\d*\"/TRIGGER_VALUE\" value=\"$v\"/>//\n\nIs actually broken syntax - you're using / as your regex separator, but you're also trying to include it in your pattern. \nSo if you actually run this code you get:\nUseless use of numeric gt (>) in void context \n\nSo perhaps you need to consider escaping some of your meta characters:\nThis works:\n#!/usr/bin/env perl\nuse strict;\nuse warnings;\n\n$ENV{ACT_NUM} = 1;\n\nwhile ( <DATA> ) {\n    my $v=$ENV{ACT_NUM};\n    s/TRIGGER_VALUE\\\" value=\\\"\\d*\\\"/TRIGGER_VALUE\\\" value=\\\"$v\\\"/;\n    print;\n} \n\n__DATA__\n<ins:Parameter name=\"TRIGGER_VALUE\" value=\"1\"/>\n\nBut really - messing around with XML using regular expressions is an inherently bad idea. \nYou also might want to double check that that environment actually is being propagated. If you print $v (or $ENV{ACT_NAME}) does it actually work? \nSo how about instead:\n#!/usr/bin/env perl\nuse strict;\nuse warnings;\n\nuse XML::Twig;\n\nmy $twig = XML::Twig->new(\n   twig_handlers => {\n      'ins:Parameter[@name=\"TRIGGER_VALUE\"]' =>\n        sub { $_->set_att( 'value', $ENV{ACT_NUM} ) }\n   }\n);\n$twig->parse(\n   do { local $/; <> }\n)->print;\n\n", "\nI would generate the UK locale.\nsudo locale-gen en_UK.UTF-8\n\nThe system wide locales are stated in /etc/default/locale in Ubuntu, so give that file the contents:\nLANG=en_UK.UTF-8\n\nThe instructions for this are going to vary widely from distro to distro though.\n"]}