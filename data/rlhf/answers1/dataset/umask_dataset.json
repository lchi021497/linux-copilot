{"prompt": ["How do I calculate the umask absolute value I would need if I wanted Linux/Unix permissions for newly created files to be some arbitrary value xyz?I know how to determine what file permissions a system will end up with if I use a specific absolute value of umask. For example if the system default file permissions value is 666 and I apply a umask absolute value of 022 I know that the resulting permissions value for a newly created file is 644 (calculated by ANDing NOT(022) with 666).But what about the inverse problem?It seems to me that the only way to determine what umask absolute value you must employ to get a specific permissions value for newly created files is to create a table. One column would have all possible umask values (so a big table!) and the second column would contain their corresponding new-file permission values (for any given system default file-permissions value).Am I right?", "I am working in a lab where we are running Linux (Debian and Ubuntu). Usernames and group names are handled by NIS and yp. We have some common users that everybody has access to that run the experiments and then we each have our own users in addition there is a common group that we are all a member of.How can I make such that all files and directories on the shared /home/ drive (NFS) is read/write(/executable) by user/group? Basically what I want ischmod -R 664 /home\nchgrp -R commongroup /home\nor equivalently umask 0002.But running the above commands only fixes the current files in the folders and umask only works for single users and has to be run every time a user logs in ie. in the .bashrc file (and will this work for changes mode via gnome?). Is there a system wide command or setting that I could use to make sure that our commongroup has write access to the common files?", "I am working in a lab where we are running Linux (Debian and Ubuntu). Usernames and group names are handled by NIS and yp. We have some common users that everybody has access to that run the experiments and then we each have our own users in addition there is a common group that we are all a member of.How can I make such that all files and directories on the shared /home/ drive (NFS) is read/write(/executable) by user/group? Basically what I want ischmod -R 664 /home\nchgrp -R commongroup /home\nor equivalently umask 0002.But running the above commands only fixes the current files in the folders and umask only works for single users and has to be run every time a user logs in ie. in the .bashrc file (and will this work for changes mode via gnome?). Is there a system wide command or setting that I could use to make sure that our commongroup has write access to the common files?", "I am working in a lab where we are running Linux (Debian and Ubuntu). Usernames and group names are handled by NIS and yp. We have some common users that everybody has access to that run the experiments and then we each have our own users in addition there is a common group that we are all a member of.How can I make such that all files and directories on the shared /home/ drive (NFS) is read/write(/executable) by user/group? Basically what I want ischmod -R 664 /home\nchgrp -R commongroup /home\nor equivalently umask 0002.But running the above commands only fixes the current files in the folders and umask only works for single users and has to be run every time a user logs in ie. in the .bashrc file (and will this work for changes mode via gnome?). Is there a system wide command or setting that I could use to make sure that our commongroup has write access to the common files?", "Does SCP have a problem setting file permissions or have I misconfiguration my server?Use case:There is a file on a server that I want to edit called \"importantFile.txt\". The file has owner and group of \"master\":ls -l importantFile.txt:\n-rw-rw-r--  1 master master     7 Mar 18 08:11 importantFile.txt\nI am called \"slave\" but luckily, I am in group \"master\" so I can edit the file as I see fit. However, I'm a lazy slave and can't be bothered to edit the file on the server, I'd prefer to edit the file on my local machine and SCP it to the server:echo \"bored slave info\" > importantFile.txt\nscp importantFile.txt slave@theServerAddress:/pathToFile/importantFile.txt\nIf I do this, the contents of the file on the server are uploaded fine and the timestamp of the file is updated but the permissions of the file don't change, the file is still owned by \"master\". This is a problem because if \"slave\" uploaded bad content, no one would know it was \"slave\" who caused the problem, \"master\" would look guilty.Perhaps I have to set a umask? if so where? I tried .bash_profile without success and haven't found anything on Google about umask in /etc/ssh/sshd_config.", "Does SCP have a problem setting file permissions or have I misconfiguration my server?Use case:There is a file on a server that I want to edit called \"importantFile.txt\". The file has owner and group of \"master\":ls -l importantFile.txt:\n-rw-rw-r--  1 master master     7 Mar 18 08:11 importantFile.txt\nI am called \"slave\" but luckily, I am in group \"master\" so I can edit the file as I see fit. However, I'm a lazy slave and can't be bothered to edit the file on the server, I'd prefer to edit the file on my local machine and SCP it to the server:echo \"bored slave info\" > importantFile.txt\nscp importantFile.txt slave@theServerAddress:/pathToFile/importantFile.txt\nIf I do this, the contents of the file on the server are uploaded fine and the timestamp of the file is updated but the permissions of the file don't change, the file is still owned by \"master\". This is a problem because if \"slave\" uploaded bad content, no one would know it was \"slave\" who caused the problem, \"master\" would look guilty.Perhaps I have to set a umask? if so where? I tried .bash_profile without success and haven't found anything on Google about umask in /etc/ssh/sshd_config.", "Does SCP have a problem setting file permissions or have I misconfiguration my server?Use case:There is a file on a server that I want to edit called \"importantFile.txt\". The file has owner and group of \"master\":ls -l importantFile.txt:\n-rw-rw-r--  1 master master     7 Mar 18 08:11 importantFile.txt\nI am called \"slave\" but luckily, I am in group \"master\" so I can edit the file as I see fit. However, I'm a lazy slave and can't be bothered to edit the file on the server, I'd prefer to edit the file on my local machine and SCP it to the server:echo \"bored slave info\" > importantFile.txt\nscp importantFile.txt slave@theServerAddress:/pathToFile/importantFile.txt\nIf I do this, the contents of the file on the server are uploaded fine and the timestamp of the file is updated but the permissions of the file don't change, the file is still owned by \"master\". This is a problem because if \"slave\" uploaded bad content, no one would know it was \"slave\" who caused the problem, \"master\" would look guilty.Perhaps I have to set a umask? if so where? I tried .bash_profile without success and haven't found anything on Google about umask in /etc/ssh/sshd_config.", "ssh2_sftp_mkdir($sftp, '/home/site',0774);\nI am using the above to create a folder remotely but instead of the folder having permissions 774 it is getting set as 754 meaning that it is not writeable by the group.", "In a script, should I create a file first and then, use CHMOD to assign permissions (Example- first using TOUCH command to create a file and then, using CHMOD to edit permissions on that file) \"OR\" should I mask permissions using UMASK as I create a file ? Also, please explain what are the pros and cons of choosing one over another ?Note: This file doesn't need to be executed.", "In a script, should I create a file first and then, use CHMOD to assign permissions (Example- first using TOUCH command to create a file and then, using CHMOD to edit permissions on that file) \"OR\" should I mask permissions using UMASK as I create a file ? Also, please explain what are the pros and cons of choosing one over another ?Note: This file doesn't need to be executed.", "While assigning permissions to a file with the command: $ chmod +rwx file1.txt\nWhy is it that read and execute permissions are assigned to everybody, but write permission is only assigned to the user?"], "chosen": ["\nrequired_umask = ~expected_mode & ~111 (or & 666) should do the trick (for files only, directories don't start with 0666 but with 0777)\n  ~644 & ~111\n=  133 &  666\n=  022\n\n  ~666 & ~111\n=  111 &  666\n=  000\n\n  ~400 & ~111\n=  377 &  666\n=  266\n\nIf you build a table, it's not going to be too large. For files, there are only 4**3 = 64 distinct umask values (000, 002, 004, 006, 020, 022, 024, 026, 040, 042, ...). Even if you consider all 8 possible values per digit, it's \"only\" 512 entries (unhandy for a human, but not really that large).\n", "\nFirst, make sure that the pam-modules package is installed. That makes the pam_umask module available. Then make sure that /etc/pam.d/common-session has a line of the form\nsession optional pam_umask.so\n\nso that pam_umask is enabled.\nNow, according to the pam_umask man page, the default umask is determined at login by checking each of the following places, in order:\n\nA hard system-wide default set in /etc/pam.d/common-session. To set it this way, replace the line from that file mentioned above with this:\nsession optional pam_umask.so umask=002\n\nAn entry in an individual user's GECOS field in /etc/passwd overrides a soft system-wide default for that specific user. Create that entry using a command of the form:\nchfn --other='umask=002' username\n\nAn line of the form UMASK=002 in /etc/default/login (you may need to create that file) sets a soft system-wide default.\nThe UMASK value from /etc/login.defs. That value is also used for something else (computing the permissions on the home directory of a new user that is being created; see the comments in /etc/login.defs for more details). So it is best to avoid relying on this for setting the default umask for regular logins, to keep things separate.\n\nSo in your case, you should configure this either in /etc/default/login if you want it to be possible to override the setting for individual users, or set it in /etc/pam.d/common-session as described above if you want it to be the same for all users.\nNote that even with the hard default setting, users can still override the default umask manually by using the umask command at the shell prompt or in their .profile script.\nAlso note that the traditional Unix way to set this default is by adding a umask command to /etc/profile, and that would also still work. But it's not the recommended way to configure things like this on Ubuntu, because that is hard to manage reliably using scripts and GUIs.\nNote, unfortunately this stopped working for any application which has been converted to launch via systemd --user.\n", "\nBoth Debian and Ubuntu ship with pam_umask.  This allows you to configure umask in /etc/login.defs and have them apply system-wide, regardless of how a user logs in.\nTo enable it, you may need to add a line to /etc/pam.d/common-session reading\nsession optional pam_umask.so\n\nor it may already be enabled.  Then edit /etc/login.defs and change the UMASK line to\nUMASK           002\n\n(the default is 022).\nNote that users may still override umask in their own ~/.profile or ~/.bashrc or similar, but (at least on new Debian and Ubuntu installations) there shouldn't be any overriding of umask in /etc/profile or /etc/bash.bashrc.  (If there are, just remove them.)\n", "\nIn order to match up the group rights, on the server, the set gid bit (one of the \"sticky bits\") can be considered as an additional option.\nIf the shared directory is linked to the group, launching (using root) :\nchmod -R 2775 folder_for_the_group  may be interesting.\nFor any new file created in the folder, the creator will be the owner, but the group will be automatically specified (as long as the creator is part of the group).\nRights' grid now appears as -rwxrwsr-x+\n", "\nYou have to delete the file to overwrite it. Wether you are able to do that depends on the directory's permissions and ownership. Hijacking ownership of an already existing file is not possible. The write permission you have is only applied on the contents of the file.\n", "\nIt seems you can configure how Emacs deals with this through the backup-by-copying-when-mismatch variable (see the Emacs Manual or type C-h-v backup-by-copying-when-mismatch in Emacs).\nI actually filed a bug report about this, because I thought it was a bug in Tramp.\n", "\nI had misunderstood the way files work, modifying file contents do not change ownership or group. \nWhy the confusion? EMACS - Whenever I was editing a file I was using Emacs and Emacs does change the owner and group to the current user. It does this because it makes a backup file at save time by moving the \"filename\" to \"filename~\" and creating a new file called \"filename\" - because it's a new file, it has the current users file permissions. I guess this is 1up to VI fans?\n", "\nThe mode is also modified by the current umask, which you can change using umask().\n", "\nBriefly saying - it doesn't matter. And in most cases approach depends on your needing.\nIf you need the same file permissions over whole your script logic, I would prefer to setup it in the beginning of the script and just create file rather than create and run chmod command. However you can set file permissions at once at the end of script running chmod 0XXX -R /path/to/folder\n", "\nAs with most things, it depends on far more information than you've given :-)\nHowever, it's usually a good idea to do things in a closed manner then open them up, rather than the other way around. This is basic \"Security 101\".\nFor example, let's say you're creating a file for the user and the user has foolishly selected a umask of zero (effectively all files created will have full permissions for everyone).\nIn that case, the file is fully open for anyone to change between the creation and chmod stage and, while you can minimise this time, you cannot really remove it totally.\nFor the truly paranoid among us, it would be better to actually create the file in as closed a manner as possible (probably just rw for owner), do whatever you have to do to create the content of that file, then use chmod to open it up to whatever state it needs to be, something like:\n( umask 177 ; create_file myfile.txt ; chmod 644 myfile.txt )\n\n", "\n\nchmod(1)\n   A combination of the letters ugoa controls which users' access to the file will be  changed:  the  user  who  owns it (u), other users in the file's group (g), other users not in the file's group (o), or all users (a).  If  none  of  these are  given,  the  effect  is as if (a) were given, but bits that are set in the  umask are not affected.\n\nThis is pretty clear. You have to check your umask value: \n$ umask \n0002\n$ touch xyz\n$ ls -l xyz\n-rw-rw-r-- 1 user user 0 Sep  6 22:56 xyz\n$ chmod +rwx xyz\n$ ls -l xyz\n-rwxrwxr-x 1 user user 0 Sep  6 22:56 xyz\n\n\n$ chmod a+rwx xyz\n$ ls -l xyz\n-rwxrwxrwx 1 user user 0 Sep  6 22:56 xyz\n\nHave a look at this page: Default File Permissions: umask\n"], "rejected": ["\nAs a programmer, you don't set the umask.  That's the user's mask of file permissions.\nJust use the permissions you think appropriate in your open() call, and then the users are able to mask out unwanted permissions by setting umask according to their needs.\n", "\nI do not know about other distros, but if you are using Debian or Ubuntu, run\nsudo sh -c \" echo 'umask 027' > /etc/profile.d/umask.sh\"\n\nChange 027 to the value that best suits you.\nNow restart your Machine.\nvoila!!! You are done.\nFor more details, please check Going crazy over umask in Ubuntu!!!!!!. The gist is, as we want to keep the useradd and userdel behavior - and we probably want system defaults for other accounts - the fix is to uncomment the umask line in ~/.profile, then log out and log back in.\nHowever, ~/.profile is for a particular user. For, system wide change, you need to create a file under /etc/profile.d/ or add umask 027 to /etc/profile.\n", "\nI do not know about other distros, but if you are using Debian or Ubuntu, run\nsudo sh -c \" echo 'umask 027' > /etc/profile.d/umask.sh\"\n\nChange 027 to the value that best suits you.\nNow restart your Machine.\nvoila!!! You are done.\nFor more details, please check Going crazy over umask in Ubuntu!!!!!!. The gist is, as we want to keep the useradd and userdel behavior - and we probably want system defaults for other accounts - the fix is to uncomment the umask line in ~/.profile, then log out and log back in.\nHowever, ~/.profile is for a particular user. For, system wide change, you need to create a file under /etc/profile.d/ or add umask 027 to /etc/profile.\n", "\nI do not know about other distros, but if you are using Debian or Ubuntu, run\nsudo sh -c \" echo 'umask 027' > /etc/profile.d/umask.sh\"\n\nChange 027 to the value that best suits you.\nNow restart your Machine.\nvoila!!! You are done.\nFor more details, please check Going crazy over umask in Ubuntu!!!!!!. The gist is, as we want to keep the useradd and userdel behavior - and we probably want system defaults for other accounts - the fix is to uncomment the umask line in ~/.profile, then log out and log back in.\nHowever, ~/.profile is for a particular user. For, system wide change, you need to create a file under /etc/profile.d/ or add umask 027 to /etc/profile.\n", "\nThat's nothing special about scp - try logging on to the server as slave, and editing the file using your favourite text editor... You'll find the same behaviour occurs... Writing to a file does not make you the owner of the file.\n\nExample:\nas root\n#cd /tmp\n#mkdir fubar\n#chgrp vboxusers fubar\n#cd fubar/\n#touch testfile\n#chgrp vboxusers testfile \n#chmod g+w . testfile\n#ls -al\ntotal 16\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     0 2009-03-19 10:30 testfile\n#echo foo > testfile \n#ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     4 2009-03-19 10:30 testfile\n\nas user (in vboxusers group)\n>cd /tmp/fubar\n>ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     4 2009-03-19 10:30 testfile\n>echo bar >> testfile \n>ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     8 2009-03-19 10:31 testfile\n>vim testfile\n>ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:31 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:31 ..\n-rw-rw-r--  1 root vboxusers    12 2009-03-19 10:31 testfile\n>cat testfile \nfoo\nbar\nbaz\n\n", "\nThat's nothing special about scp - try logging on to the server as slave, and editing the file using your favourite text editor... You'll find the same behaviour occurs... Writing to a file does not make you the owner of the file.\n\nExample:\nas root\n#cd /tmp\n#mkdir fubar\n#chgrp vboxusers fubar\n#cd fubar/\n#touch testfile\n#chgrp vboxusers testfile \n#chmod g+w . testfile\n#ls -al\ntotal 16\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     0 2009-03-19 10:30 testfile\n#echo foo > testfile \n#ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     4 2009-03-19 10:30 testfile\n\nas user (in vboxusers group)\n>cd /tmp/fubar\n>ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     4 2009-03-19 10:30 testfile\n>echo bar >> testfile \n>ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     8 2009-03-19 10:31 testfile\n>vim testfile\n>ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:31 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:31 ..\n-rw-rw-r--  1 root vboxusers    12 2009-03-19 10:31 testfile\n>cat testfile \nfoo\nbar\nbaz\n\n", "\nThat's nothing special about scp - try logging on to the server as slave, and editing the file using your favourite text editor... You'll find the same behaviour occurs... Writing to a file does not make you the owner of the file.\n\nExample:\nas root\n#cd /tmp\n#mkdir fubar\n#chgrp vboxusers fubar\n#cd fubar/\n#touch testfile\n#chgrp vboxusers testfile \n#chmod g+w . testfile\n#ls -al\ntotal 16\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     0 2009-03-19 10:30 testfile\n#echo foo > testfile \n#ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     4 2009-03-19 10:30 testfile\n\nas user (in vboxusers group)\n>cd /tmp/fubar\n>ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     4 2009-03-19 10:30 testfile\n>echo bar >> testfile \n>ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:30 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:29 ..\n-rw-rw-r--  1 root vboxusers     8 2009-03-19 10:31 testfile\n>vim testfile\n>ls -al\ntotal 20\ndrwxrwxr-x  2 root vboxusers  4096 2009-03-19 10:31 .\ndrwxrwxrwt 15 root root      12288 2009-03-19 10:31 ..\n-rw-rw-r--  1 root vboxusers    12 2009-03-19 10:31 testfile\n>cat testfile \nfoo\nbar\nbaz\n\n", "\nWhat's happening is that php function ssh2_sftp_mkdir is for some reason affected by system umask settings, and the problem is this isn't documented.\nFor example, if you do \nssh2_sftp_mkdir($sftp, '/home/site',0774);\n\nand umask on your system is set to 022 (as it is default on most Linux distributions), you will end up with created directory site that has permissions 754 (drwxr-xr--)\nIt is possible to alter umask from php by using function umask, but as noted in the documentation, it's not recommended because of posibillity of unexpected behavior in multithreaded webservers.\nFor understanding what is umask and how it works for example in Debian Linux, please refer to Debian Wiki - Permissions - The defaults for new files and directories, or Arch Linux Wiki - Umask.\nMy advice for handling this situation is to make best effort for setting up permissions when creating directory / file, and after creating, make sure to set proper permissions using ssh2_sftp_chmod function.\nIn this case, that would be\n/* Create directory */\nssh2_sftp_mkdir($sftp, '/home/site',0774);\n\n/* Make sure proper permissions are set */\nssh2_sftp_chmod($sftp, '/home/site',0774);\n\n", "\nYou should always have UMASK for specific user as you don't want to be dealing with setting permissions every-time you or an application create a file. You can further protect/release any specific files if you want using CHMOD (these cases will be very rare). Unless the file you are creating needs to be protected/accessed specifically, you should have a UMASK working for it's permissions.\n\nCreate a separate user and specified directory for the application that is running the script.\nset it's appropriate UMASK.\nSpecify extra permissions if you need it \n\n", "\nYou should always have UMASK for specific user as you don't want to be dealing with setting permissions every-time you or an application create a file. You can further protect/release any specific files if you want using CHMOD (these cases will be very rare). Unless the file you are creating needs to be protected/accessed specifically, you should have a UMASK working for it's permissions.\n\nCreate a separate user and specified directory for the application that is running the script.\nset it's appropriate UMASK.\nSpecify extra permissions if you need it \n\n", "\nyes it depends on the umask of your system u might be  having 0022 as your umask\nchmord +rwx file.txt ---- 777\n\nthe resulting permission 777-022=755\n"]}