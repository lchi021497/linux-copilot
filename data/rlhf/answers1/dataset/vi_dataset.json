{"prompt": ["My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "My arrow keys don't work in vi in insert mode at home, they just each insert a newline and a capital letter, like 'A'.  Is there a way to fix that?", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "Need help. I have been editing a text file in vi , and i was able to save the changes before but now i am getting the above error whenever i am typing command to save the file. Please help .", "I have a file that contains a single line with usernames followed by their other information.For instance the file contains:Clara01{25 characters of info}Betty29{25 characters of info}Edith34{25 characters of info}Raji11{25 characters of info}All in a single very long line with many usernames followed by 25 characters of their information.Now, I want to search Betty29 and then delete/remove the substring Betty29{25 characters of info}.\nThat is, how should I delete Betty29 and then next 25 characters.\nHow should I do that in Linux shell scripting?I have read about sed command but I still could not figure out. I am new to shell scripting so please be kind.", "I have a file that contains a single line with usernames followed by their other information.For instance the file contains:Clara01{25 characters of info}Betty29{25 characters of info}Edith34{25 characters of info}Raji11{25 characters of info}All in a single very long line with many usernames followed by 25 characters of their information.Now, I want to search Betty29 and then delete/remove the substring Betty29{25 characters of info}.\nThat is, how should I delete Betty29 and then next 25 characters.\nHow should I do that in Linux shell scripting?I have read about sed command but I still could not figure out. I am new to shell scripting so please be kind.", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I have installed docker on my host virtual machine. And now want to create a file using vi.But it's showing me an error:bash: vi: command not found\n", "I always wanted to ask this question but thought it was somehow my fault. I use Vim at two places: one in Ubuntu and the other in Cygwin. Ubuntu: VIM - Vi IMproved 7.1 (2007 May 12, compiled May  6 2008 16:24:07)\nCygwin: VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Aug 19 2010 13:06:02)\nIn 7.1, when I go into the Insert mode using Esc-i, I can use the arrow keys and use it as a normal text editor like nano. However, in the other version, 7.3, when I enter the insert mode, I can no longer use my arrow keys or space. When I hit any of them, I get characters like C, D etc. for arrow keys. I might be missing something here but am not sure why the discrepancy and if I can revert back to the way it was before. Any suggestions?", "I always wanted to ask this question but thought it was somehow my fault. I use Vim at two places: one in Ubuntu and the other in Cygwin. Ubuntu: VIM - Vi IMproved 7.1 (2007 May 12, compiled May  6 2008 16:24:07)\nCygwin: VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Aug 19 2010 13:06:02)\nIn 7.1, when I go into the Insert mode using Esc-i, I can use the arrow keys and use it as a normal text editor like nano. However, in the other version, 7.3, when I enter the insert mode, I can no longer use my arrow keys or space. When I hit any of them, I get characters like C, D etc. for arrow keys. I might be missing something here but am not sure why the discrepancy and if I can revert back to the way it was before. Any suggestions?", "I always wanted to ask this question but thought it was somehow my fault. I use Vim at two places: one in Ubuntu and the other in Cygwin. Ubuntu: VIM - Vi IMproved 7.1 (2007 May 12, compiled May  6 2008 16:24:07)\nCygwin: VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Aug 19 2010 13:06:02)\nIn 7.1, when I go into the Insert mode using Esc-i, I can use the arrow keys and use it as a normal text editor like nano. However, in the other version, 7.3, when I enter the insert mode, I can no longer use my arrow keys or space. When I hit any of them, I get characters like C, D etc. for arrow keys. I might be missing something here but am not sure why the discrepancy and if I can revert back to the way it was before. Any suggestions?", "I have a Ubuntu 12.04 OS. I installed vi and vim, but the backspace doesn't work properly. It is doing the same thing that delete key do.I am expecting the backspace key to delete a character backwards, but it deletes forwards. I did some search on the Internet, there are too much suggestions for changing the .vimrc file, but non of them worked for me.Is there anybody who has the same issue?", "I have a Ubuntu 12.04 OS. I installed vi and vim, but the backspace doesn't work properly. It is doing the same thing that delete key do.I am expecting the backspace key to delete a character backwards, but it deletes forwards. I did some search on the Internet, there are too much suggestions for changing the .vimrc file, but non of them worked for me.Is there anybody who has the same issue?", "I am trying to edit tomcat-users.xml in Tomcat 8, using the terminal of CentOS 7 Linux.  I typed su -  to use the terminal as the root account.I then typed in vi $CATALINA_HOME/conf/tomcat-users.xml, but the result is that vi opens in the window with the contents of tomcat-users.xml in read-only mode, and there seems to be no way out of vi except to close the window, losing all the terminal history.I also navigated to the physical location of tomcat-users.xml and opened up the file using Gedit, but Gedit will not allow me to save the file. How can I edit tomcat-users.xml?", "I am trying to edit tomcat-users.xml in Tomcat 8, using the terminal of CentOS 7 Linux.  I typed su -  to use the terminal as the root account.I then typed in vi $CATALINA_HOME/conf/tomcat-users.xml, but the result is that vi opens in the window with the contents of tomcat-users.xml in read-only mode, and there seems to be no way out of vi except to close the window, losing all the terminal history.I also navigated to the physical location of tomcat-users.xml and opened up the file using Gedit, but Gedit will not allow me to save the file. How can I edit tomcat-users.xml?", "I have an nginx-controller container running in k8s based on an Ubuntu image:Image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.25.0\nInside the container:$ kubectl exec -it nginx-ingress-controller-xyz bash\n$ uname -a\nLinux nginx-ingress-controller-xyz 4.15.0-1111-azure #123~16.04.1-Ubuntu SMP Sat Mar 20 01:52:07 UTC 2021 x86_64 GNU/Linux\nSeems that neither vi or vim is available:$ vi\nbash: vi: command not found\n$ vim\nbash: vim: command not found\nI thought vi/vim would always be on a linux machine?", "I have an nginx-controller container running in k8s based on an Ubuntu image:Image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.25.0\nInside the container:$ kubectl exec -it nginx-ingress-controller-xyz bash\n$ uname -a\nLinux nginx-ingress-controller-xyz 4.15.0-1111-azure #123~16.04.1-Ubuntu SMP Sat Mar 20 01:52:07 UTC 2021 x86_64 GNU/Linux\nSeems that neither vi or vim is available:$ vi\nbash: vi: command not found\n$ vim\nbash: vim: command not found\nI thought vi/vim would always be on a linux machine?", "I have an nginx-controller container running in k8s based on an Ubuntu image:Image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.25.0\nInside the container:$ kubectl exec -it nginx-ingress-controller-xyz bash\n$ uname -a\nLinux nginx-ingress-controller-xyz 4.15.0-1111-azure #123~16.04.1-Ubuntu SMP Sat Mar 20 01:52:07 UTC 2021 x86_64 GNU/Linux\nSeems that neither vi or vim is available:$ vi\nbash: vi: command not found\n$ vim\nbash: vim: command not found\nI thought vi/vim would always be on a linux machine?", "Often while editing config files, I'll open one with vi and then when I go to save it realize that I didn't typesudo vi filename\nIs there any way to give vi sudo privileges to save the file? I seem to recall seeing something about this while looking up some stuff about vi a while ago, but now I can't find it.", "Often while editing config files, I'll open one with vi and then when I go to save it realize that I didn't typesudo vi filename\nIs there any way to give vi sudo privileges to save the file? I seem to recall seeing something about this while looking up some stuff about vi a while ago, but now I can't find it.", "Often while editing config files, I'll open one with vi and then when I go to save it realize that I didn't typesudo vi filename\nIs there any way to give vi sudo privileges to save the file? I seem to recall seeing something about this while looking up some stuff about vi a while ago, but now I can't find it.", "Often while editing config files, I'll open one with vi and then when I go to save it realize that I didn't typesudo vi filename\nIs there any way to give vi sudo privileges to save the file? I seem to recall seeing something about this while looking up some stuff about vi a while ago, but now I can't find it.", "Often while editing config files, I'll open one with vi and then when I go to save it realize that I didn't typesudo vi filename\nIs there any way to give vi sudo privileges to save the file? I seem to recall seeing something about this while looking up some stuff about vi a while ago, but now I can't find it.", "Often while editing config files, I'll open one with vi and then when I go to save it realize that I didn't typesudo vi filename\nIs there any way to give vi sudo privileges to save the file? I seem to recall seeing something about this while looking up some stuff about vi a while ago, but now I can't find it.", "Often while editing config files, I'll open one with vi and then when I go to save it realize that I didn't typesudo vi filename\nIs there any way to give vi sudo privileges to save the file? I seem to recall seeing something about this while looking up some stuff about vi a while ago, but now I can't find it.", "Often while editing config files, I'll open one with vi and then when I go to save it realize that I didn't typesudo vi filename\nIs there any way to give vi sudo privileges to save the file? I seem to recall seeing something about this while looking up some stuff about vi a while ago, but now I can't find it.", "Often while editing config files, I'll open one with vi and then when I go to save it realize that I didn't typesudo vi filename\nIs there any way to give vi sudo privileges to save the file? I seem to recall seeing something about this while looking up some stuff about vi a while ago, but now I can't find it.", "I have 2 files with me.\nFile1.txt:\nBus\nRailway\nCinema\nMotor\n\n\nFile2.txt:\nStand\nStation\nTheatre\nCycle\n\n\nAbove 2 files I have with me and I need output like below.\nOutput.txt:\nBus Stand\nRailway Station\nCinema Theatre\nMotor Cycle\n\n\nI have thousands of lines like this and I can't do this one by one manually. Someone please help me to automate this.I have Notepad++ and Vim ( i can't Install any other apps, because it's Office System )", "I have created this file concacaf.txt with the following inputDavid Canada 5\nLarin Canada 5\nBorges Costa Rica 2\nBuchanan Canada 2\nDavis Panama 2\nGray Jamaica 2\nHenriquez El Salvador 2Is there a way that I can either use the cut command and treat Costa Rica or El Salvador as a single word or modify the text so that when I use:\ncut -f 1,3 -d ' ' concacaf.txt\nI get 'Borges 2' instead of 'Borges Rica'. Thanks", "script in which I open a file in vi editor , after that user will write any thing in it then save or quite by :wq! When I try this then it give an error message as belowe138 can't write viminfo file $home/.viminfo!\nand ask for, Press Enter or command to continue\nNow when I press enter then file save. But why that error message shows.\nIf I open same file direct with vi editor or vim editor and do changes then it does not give any error.also if I install vim editor then it works fine and no error showsPlease tell me what may be the issue."], "chosen": ["\nUbuntu ships default with vim-tiny, which doesn't have all the bells and whistles that vim has.\nDo a quick sudo apt-get install vim to get all the juicy features that everyone's talking about.\n", "\nI presume you're using vim as this is tagged as Linux. Try:\n:set nocompatible\n\n(You may want to configure your .vimrc with this by adding this command to it. Create a new .vimrc file if not already present in your home directory, run echo $HOME to check home directory path.)\n", "\n:set term=builtin_ansi\nfixed it for me. You can either paste that into vim while in escape mode, (bleep mode) or add it to the end of ~/.vimrc without the leading \":\"\n", "\nvi does not support arrow keys in insert mode. Use vim. Although your vi may just be a link to vim, it may be configured to behave like the \"original\" vi and thus disables the arrow keys. Just invoke vim directly.\n", "\nYet another variation:  this problem appeared for me after some .vimrc changes.  A concerted search eventually revealed that my clever re-mapping of ESC in normal mode was not a good idea.  Removing it solved the problem:\n\" this is NOT something you want in .vimrc:\n\" In normal mode, hitting Esc turns off search highlights:\nnmap <ESC> :nohl<CR>  \" Do NOT add this to .vimrc\n\n", "\nThe only thing that worked for me was \":set term=ansi\"\n", "\nI had same issue with arrow keys, but when I used did that set nocp or nocompatible then my backspace didn't work correctly\nfor some reason when I installed vim with \nsudo apt-get install vim, vi didn't had any issues with arrows or backspace anymore\n", "\nIn WSL integrated terminal on VS Code, update the package and install the full package of vim worked for me.\nsudo apt-get update\nsudo apt-get install vim\n\nHowever, to make the arrow key works when I use conemu I have to add :set term=builtin_ansi on ~/.vimrc\necho ':set term=builtin_ansi' >> ~/.vimrc\n\n", "\nI just had an issue with arrow keys after switching over to use git in .vim.\nI have installed this repo - https://github.com/sunaku/.vim\nand after digging around for an hour, I found that AutoClose plugin\n(which didn't like anyway) broke the arrow keys.\nThe plugin docs suggest that one should set set ttimeoutlen=100, but\nthat didn't work for me! (using urxvt+screen or urxvt, and even xterm)\nSo I removed the plugin at the end.\n", "\nYou might also want to try 'noesckeys'\n", "\nI had the same issue while using vim inside Windows 8.1 with Cygwin.\nSolution worked for me is, just run the following command in your Cygwin terminal:\ncp vimrc_example.vim ~/.vimrc\n\n", "\nTo support vi and vim, I used the following as a minimum in my .vimrc file in my user's home folder (~):\nset nocompatible\nset term=ansi\nset backspace=indent,eol,start\n\n", "\nHad the same problem. Tried all options as above but it did not work. Then when I checked my disk space, it was full. Once I cleared some space then I was able to write back to file again.\nP.S: This was in linux.\n", "\nYou can, as vi (or, more likely, vim) is saying force a write by doing:\n:w!\n\nAlternatively, write the file to an alternative location:\n:w! /path/to/other/location\n\nTo check where your backup files are being written (normally):\n:se backup? backupdir? backupext? \n\nTry to touch a file in that directory and see if your Operating System gives you an error to enlighten you as to why your editor cannot write there.\n", "\nHad the same problem. It was because I installed vimconf as root. You need to change rights of files in ~/.vim directory and change owner to your user.\nsudo chmod 0750 ~/.vim\nsudo chown user ~/.vim\n\n", "\nI had this same problem. Turns out it was due to running out of disk space. try creating a file using Ex) touch test.txt. If you get a message saying touch: cannot touch test.txt: No space left on device you will need to clear up space on your disk\n", "\nI don't know what the cause was, but I moved by backupdir from . to ~/.vim/backups in my .vimrc and it solved it for me:\nset backupdir=~/.vim/backups\n\nI'd imagine some sort of tool was using the folder the file I was editing it in (Visual Studio 2013, in my case), but I'm not sure.\n", "\nI've fixed this with:\nsudo chown {user} ~/.cache/vim/* -R \n\nwhere the \"{user}\" field is your user-name.\n", "\nfrom within vi, try:\n:w!\n\n:help w! gives the following information:\n\n                                                       *:w!*\n:[range]w[rite]! [++opt] {file}\n                        Write the specified lines to {file}.  Overwrite an\n                        existing file.\n\n\n", "\n\nIn my case my disk was full.\n\nHere are some commands to verify this and find where the disk space is being taken. In my case it was the PHP log at over 20GB.\n# see general disk space usage\ndf -h\n\n# see current file and directory disk space usage. You can go to / and work your way in\ndu -sh *\n\n", "\nBackup location can be given in .vimrc, e.g.:\nset backupdir=~/.vim/backup\n\nYou may need to create this directory yourself.\n", "\nAnother possibility is that you put your backups in a centralized location (e.g. /tmp) and you edited a particular file as root.  Then, the backup file will be owned by root and un-writeable by you as a mere mortal later.\nIn this case, the suggestion above to touch /tmp/atestfile won't show the problem!  You'll have write permissions, no problem, but not to the particular backup file vim is trying to write.\nRemove the file as root (sudo rm).\nNote that the reason w! works is because vim writes the file without writing a backup file (you're insisting that it write despite the error).\n", "\nI just started using nvim and I found my issue was that my borrowed premade vimrc file had a preset source in it.\ngrep -rnw ~/.config/nvim/ -e backup\n.config/nvim/lua/custom/vimrc:132:set backupdir=~/.backup/,/tmp/\n\nLike others here, creating that backup directory cleared my error message (~/.backup/)\n", "\nI think it's also worth mentioning that the problem might not be the permissions you have in the backup directory. For me the file I was writing was in a root owned directory, although the file was user owned.\n", "\nThis massage might appear if you are editing a file that is not owned by you, i.e. you are editing a file in a directory owned by root.\nyou can use this command in the directory to see what is owned by you and what is owned by root.\n~/test \u03bb  ls -la .\ntotal 8\ndrwxr-xr-x  2 root      root      4096 Jul 20 01:50 .\ndrwx------ 27 root      root      4096 Jul 20 01:49 ..\n-rw-r--r--  1 user      user         0 Jul 20 01:50 hello\n\nin this case hello file is owned by user but the directory . is owned by root. if you tried to edit the file and save with vim or neovim, it will display error Can't write to backup file (add ! to override).\nso to solve this you can\nsudo chown root:root hello\nsudo vim hello\n\nand it should work as expected.\n", "\n\nUse readarray -d'}' to access the file as an array.\nSearch for an element starting with Betty29 and unset that element.\nThen printf '%s' the whole \"${array[@]}\" as an output.\n\nunset_element() {\n  local -r prefix=\"$1\"\n  local -a array\n  local -i idx\n  readarray -d'}' array\n  unset 'array[-1]'  # empty\n  for idx in \"${!array[@]}\"; do\n    [[ \"${array[idx]}\" = \"${prefix}{\"* ]] && unset 'array[idx]' || :\n  done\n  printf '%s' \"${array[@]}\"\n}\n\nNow let\u2019s test it:\ninput='Clara01{25 characters of info}'\ninput+='Betty29{25 characters of info}'\ninput+='Edith34{25 characters of info}'\ninput+='Raji11{25 characters of info}'\n\nunset_element 'Betty29' <<< \"$input\"\n\nOutput:\nClara01{25 characters of info}Edith34{25 characters of info}Raji11{25 characters of info}\n\nPresumably, this removes all occurrences of Betty29. If you want to remove only the first one and make it \u201cmore efficient\u201d, just add a break into the for-loop once the match is found.\n", "\nAs @Shawn suggested\nsed 's/Betty29.\\{25\\}//' foo.txt \n\nis getting the job done.\nThanks all for the help!\n", "\nThe command to run depends on what base image you are using.\nFor Alpine, vi is installed as part of the base OS. Installing vim would be:\napk -U add vim\n\nFor Debian and Ubuntu:\napt-get update && apt-get install -y vim\n\nFor CentOS, vi is usually installed with the base OS. For vim:\nyum install -y vim\n\nThis should only be done in early development. Once you get a working container, the changes to files should be made to your image or configs stored outside of your container. Update your Dockerfile and other files it uses to build a new image. This certainly shouldn't be done in production since changes inside the container are by design ephemeral and will be lost when the container is replaced.\n", "\nlogin into container with the following command:\ndocker exec -it <container> bash\n\nThen , run the following command .\napt-get update\napt-get install vim\n\n", "\nUSE THIS:\napt-get update && apt-get install -y vim\n\nExplanation of the above command\n\napt-get update => Will update the current package\napt-get install => Will install the package\n-y => Will by pass the permission, default permission will set to Yes.\nvim => Name of the package you want to install.\n\n", "\nYour container probably haven't installed it out of the box.\nRun apt-get install vim in the terminal and you should be ready to go.\n", "\nerror:: bash: vi: command not found\nrun the below command by logging as root user to the container--\ndocker exec --user=\"root\" -it (container ID) /bin/bash\napt-get update\napt-get install vim\n\n", "\nAdd the following line in your Dockerfile then rebuild the docker image.\nRUN apt-get update && apt-get install -y vim\n\n", "\nAlternatively, keep your docker images small by not installing unnecessary editors. You can edit the files over ssh from the docker host to the container:\nvim scp://remoteuser@container-ip//path/to/document\n\n", "\nThe most voted answer has the correct idea, however, it did not work in my case. The comment from @java25 did the trick in my case. I had to log into the docker container as a root user to install vim. I am just posting the comment as an answer so that it is easier for others, having the similar problem, to find it.\ndocker exec -ti --user root <container-id> /bin/bash\n\nOnce you are inside docker, run the following commands now to install vi.\napt-get update\napt-get install vim\n\n", "\nUse below command in Debian based container:\napt-get install vim-tiny\n\nComplete instruction for using in Dockerfile:\nRUN apt-get update && apt-get install --no-install-recommends -y \\   \n vim-tiny \\  \n && apt-get clean && rm -rf /var/lib/apt/lists/*\n\nIt doesn't install unnecessary packages and removes unnecessary downloaded files, so your docker image size won't increase dramatically.\n", "\nTo install within your Docker container you can run command\n\ndocker exec  apt-get update && apt-get install -y vim\n\nBut this will be limited to the container in which vim is installed.\nTo make it available to all the containers, edit the Dockerfile and add\n\nRUN  apt-get update && apt-get install -y vim\n\nor you can also extend the image in the new Dockerfile and add above command. Eg.\n\nFROM < image name >\nRUN apt-get update && apt-get install -y vim\n\n", "\nStart a Docker container:\ndocker run -it <image_name> /bin/bash\n\nInstall Vim:\nsudo apt update\nsudo apt install vim\n\n", "\nInside container (in docker, not in VM), by default these are not installed.\nEven apt-get, wget will not work. My VM is running on Ubuntu 17.10. For me yum package manager worked.\nYum is not part of Debian or ubuntu. It is part of red-hat. But, it works in Ubuntu and it is installed by default like apt-get\nTo install vim, use this command\nyum install -y vim-enhanced \n\nTo uninstall vim :\nyum uninstall -y vim-enhanced \n\nSimilarly,\nyum install -y wget \nyum install -y sudo \n\n-y is for assuming yes if prompted for any question asked after doing yum install package-name\n", "\n\nerror:: bash: vim: command not found\n\nRun the below command by logging as root user to the container:\nmicrodnf install -y vim\n\n", "\nIf you actually want a small editor for simple housekeeping in a docker, use this in your Dockerfile:\nRUN apt-get install -y busybox && ln -s /bin/busybox /bin/vi\n\nI used it on an Ubuntu 18 based docker.\n(Of course you might need an RUN apt-get update before it but if you are making your own Docker file you probably already have that.)\n", "\nUsually doing :set nocompatible works: Linux vi arrow keys broken in insert mode\nIn this case I tried it out in cygwin and you I also needed :set term=ansi to get it to work.\nSo viraptor pretty much had it, except you want to set NOcompatible:\n:set nocompatible\n:set term=ansi\n\n", "\nTry:\n:set compatible\n:set term=ansi\n\n(or other terminal - windows one might need \"win32\")\n", "\nDon't know if you figured this out. Unfortunately I can't yet add this as a comment, so adding it as answer, try:\n:set nocompatible\n\nby itself -- did the trick  for me.\n", "\nAs explained in answer SO/a/10197995/1699311, you have to correct your terminal setting.\nHowever, if you really want to stick with incorrect terminal behaviour (which will affect some other programs) you can instruct Vim to accommodate with that with :fixdel (it internally swap Backspace and Delete keys.)\nAll the previous suppose you don't have some mapping on that key.\n", "\nTry adding the following to your .vimrc file, which would correct the behavior of the backspace key:\nset backspace=2\n\nAlso, you can execute it inside vi/vim command mode:\n:set backspace=2\n\nAdditionally, here is more information and solutions if this doesn't work for you: http://vim.wikia.com/wiki/Backspace_and_delete_problems\n", "\nYou can edit read-only file as root with vi \u2014 just type :wq! when you finish.\nIf you not familiar with vi and have vim installed \u2014 I recommend you to run vimtutor and spent about an hour to learn basics, otherwise read this short tutorial.\n", "\nFirst thing to edit tomcat-user.xml file you need administrative privilege. If you the admin access. you can use vi or vim to edit the file\nwhen the file opens, to edit the hit key a or i, it will let you edit at the bottom you can see Insert text. After editing to save press esc key can type :wq! \n", "\nA vi command that behaves as per the POSIX specification is mandatory for an OS to call itself Unix.\nUbuntu and other Linux-based operating systems are not certified and being certified is not exactly a goal so all they do is follow the specification as closely as they want/need/can. Therefore, it is unreasonable to expect vi to \"always be on a linux machine\" or that vi command to be provided by Vim. There is simply no guarantee.\nMoreover, it is customary to make Docker images meant for production as lightweight (and secure) as possible by removing as much cruft as possible. You don't need vi to run your Ingress Controller so it isn't there.\n", "\nIn this situation, For me, this method always works.\nAt first go to your container and then use these commands:\napt update\napt install vim\n\nor\napt update\napt install nano\n\n", "\nYou won't find many commonly available programs in docker images. Because these images are made to be lightweight.\nYou can install vim on an ubuntu image by\napt-get update && apt-get install vim\n\n", "\nIn general, you can't change the effective user id of the vi process, but you can do this:\n:w !sudo tee myfile\n\n", "\n% is replaced with the current file name, thus you can use:\n:w !sudo tee %\n\n(vim will detect that the file has been changed and ask whether you want to it to be reloaded. Say yes by choosing [L] rather than OK.)\nAs a shortcut, you can define your own command. Put the following in your .vimrc:\ncommand W w !sudo tee % >/dev/null\n\nWith the above you can type :W<Enter> to save the file. Since I wrote this, I have found a nicer way (in my opinion) to do this:\ncmap w!! w !sudo tee >/dev/null %\n\nThis way you can type :w!! and it will be expanded to the full command line, leaving the cursor at the end, so you can replace the % with a file name of your own, if you like.\n", "\nCommon Caveats\nThe most common method of getting around the read-only file problem is to open a pipe to current file as the super-user using an implementation of sudo tee.  However, all of the most popular solutions that I have found around the Internet have a combination of a several potential caveats:\n\nThe entire file gets written to the terminal, as well as the file.  This can be slow for large files, especially over slow network connections.\nThe file loses its modes and similar attributes.\nFile paths with unusual characters or spaces might not be handled correctly.\n\nSolutions\nTo get around all of these issues, you can use the following command:\n\" On POSIX (Linux/Mac/BSD):\n:silent execute 'write !sudo tee ' . shellescape(@%, 1) . ' >/dev/null'\n\n\" Depending on the implementation, you might need this on Windows:\n:silent execute 'write !sudo tee ' . shellescape(@%, 1) . ' >NUL'\n\nThese can be shortened, respectfully:\n:sil exec 'w !sudo tee ' . shellescape(@%, 1) . ' >/dev/null'\n:sil exec 'w !sudo tee ' . shellescape(@%, 1) . ' >NUL'\n\nExplanation\n: begins the command; you will need to type this character in normal mode to start entering a command.  It should be omitted in scripts.\nsil[ent] suppresses output from the command.  In this case, we want to stop the Press any key to continue-like prompt that appears after running the :! command.\nexec[ute] executes a string as a command.  We can't just run :write because it won't process the necessary function call.\n! represents the :! command: the only command that :write accepts.  Normally, :write accepts a file path to which to write.  :! on its own runs a command in a shell (for example, using bash -c).  With :write, it will run the command in the shell, and then write the entire file to stdin.\nsudo should be obvious, since that's why you're here.  Run the command as the super-user.  There's plenty of information around the 'net about how that works.\ntee pipes stdin to the given file.  :write will write to stdin, then the super-user tee will receive the file contents and write the file.  It won't create a new file--just overwrite the contents--so file modes and attributes will be preserved.\nshellescape() escapes special characters in the given file path as appropriate for the current shell.  With just one parameter, it would typically just enclose the path in quotes as necessary.  Since we're sending to a full shell command line, we'll want to pass a non-zero value as the second argument to enable backslash-escaping of other special characters that might otherwise trip up the shell.\n@% reads the contents of the % register, which contains the current buffer's file name.  It's not necessarily an absolute path, so ensure that you haven't changed the current directory.  In some solutions, you will see the commercial-at symbol omitted.  Depending on the location, % is a valid expression, and has the same effect as reading the % register.  Nested inside another expression the shortcut is generally disallowed, however: such as in this case.\n>NUL and >/dev/null redirect stdout to the platform's null device.  Even though we've silenced the command, we don't want all of the overhead associated with piping stdin back to vim--best to dump it as early as possible.  NUL is the null device on DOS, MS-DOS, and Windows, not a valid file.  As of Windows 8 redirections to NUL don't result in a file named NUL being written.  Try creating a file on your desktop named NUL, with or without a file extension: you will be unable to do so.  (There are several other device names in Windows that might be worth getting to know.)\n~/.vimrc\nPlatform-Dependent\nOf course, you still don't want to memorize those and type them out each time.  It's much easier to map the appropriate command to a simpler user command.  To do this on POSIX, you could add the following line to your ~/.vimrc file, creating it if it doesn't already exist:\ncommand W silent execute 'write !sudo tee ' . shellescape(@%, 1) . ' >/dev/null'\n\nThis will allow you to type the :W (case-sensitive) command to write the current file with super-user permissions--much easier.\nPlatform-Independent\nI use a platform-independent ~/.vimrc file that synchronizes across computers, so I added multi-platform functionality to mine.  Here's a ~/.vimrc with only the relevant settings:\n#!vim\n\" Use za (not a command; the keys) in normal mode to toggle a fold.\n\" META_COMMENT Modeline Definition: {{{1\n\" vim: ts=4 sw=4 sr sts=4 fdm=marker ff=unix fenc=utf-8\n\"   ts:     Actual tab character stops.\n\"   sw:     Indentation commands shift by this much.\n\"   sr:     Round existing indentation when using shift commands.\n\"   sts:    Virtual tab stops while using tab key.\n\"   fdm:    Folds are manually defined in file syntax.\n\"   ff:     Line endings should always be <NL> (line feed #09).\n\"   fenc:   Should always be UTF-8; #! must be first bytes, so no BOM.\n\n\n\" General Commands: User Ex commands. {{{1\n    command W call WriteAsSuperUser(@%)         \" Write file as super-user.\n\n\n\" Helper Functions: Used by user Ex commands. {{{1\n    function GetNullDevice() \" Gets the path to the null device. {{{2\n        if filewritable('/dev/null')\n            return '/dev/null'\n        else\n            return 'NUL'\n        endif\n    endfunction\n\n    function WriteAsSuperUser(file) \" Write buffer to a:file as the super user (on POSIX, root). {{{2\n        exec '%write !sudo tee ' . shellescape(a:file, 1) . ' >' . GetNullDevice()\n    endfunction\n\n\n\" }}}1\n\" EOF\n\n", "\nIf you're using Vim, there is a script available named sudo.vim.  If you find that you've opened a file that you need root access to read, type:e sudo:%Vim replaces the % with the name of the current file, and sudo: instructs the sudo.vim script to take over for reading and writing.\n", "\nRyan's advice is generally good, however, if following step 3, don't move the temporary file; it'll have the wrong ownership and permissions. Instead, sudoedit the correct file and read in the contents (using :r or the like) of the temporary file.\nIf following step 2, use :w! to force the file to be written.\n", "\nWhen you go into insert mode on a file you need sudo access to edit, you get a status message saying\n-- INSERT -- W10: Warning: Changing a readonly file\n\nIf I miss that, generally I do\n:w ~/edited_blah.tmp\n:q\n\n..then..\nsudo \"cat edited_blah.tmp > /etc/blah\"\n\n..or..\nsudo mv edited_blah.tmp /etc/blah\n\nThere's probably a less roundabout way to do it, but it works.\n", "\nA quick Google seems to give this advice:\n\nDon't try to edit if it's read-only.\nYou might be able to change the permissions on the file. (Whether or not it will let you save is up to experimentation.)\nIf you still edited anyway, save to a temporary file and then move it.\n\nhttp://ubuntuforums.org/showthread.php?t=782136\n", "\nHere's another one that has appeared since this question was answered, a plugin called SudoEdit which provides SudoRead and SudoWrite functions, which will by default try to use sudo first and su if that fails: http://www.vim.org/scripts/script.php?script_id=2709\n", "\nI have this in my ~/.bashrc:\nalias svim='sudo vim'\n\nNow whenever I need to edit a config file I just open it with svim.\n", "\nOpening the files:\nvim -o file1.txt file2.txt\n\nJump to the second one by pressing Ctrlww, now copy the whole file:\n:%y\n\nJump back to the first one Ctrlww, now we are going to make the yank register 0 blockwise:\n:call setreg('0',getreg('0'), 'b')\n\nStart insert adding five or more spaces then Esc and finally\n\"0p\n:%s/\\s\\+/ /g\n\nAnother vimish solution:\nOpen the files:\n vim -o file1.txt file2.txt\n\ncopy this function to the clipboard\nfunction! Join_files()\n    wincmd j\n    %y\n    wincmd k\n    call setreg('0', getreg('0'), 'b')\n    normal gg\n    .s/$/     /\n    normal $\"0p\n    %s/\\s\\+/ /g\nendfunction\n\nThe next command loads the function to the vim memory\n:@+\n\nNow run the function\n:call Join_files()\n\nExplaining the function:\nwincmd j .............................. jump to the other file\n%y .................................... copy its content\nwincmd k .............................. jump back\ncall setreg('0', getreg('0'), 'b') .... make yank register blockwise\nnormal gg .............................. jump to the line 1\n.s/$/     / ............................ add five spaces\nnormal $\"0p ............................ jump to end of line and paste yank register\n%s/\\s\\+/ /g ............................. remove two or more spaces\n\n", "\nIt is not possible using cut but it is possible using sed:\nsed -E 's/^([^ ]*) .* ([^ ]*)$/\\1 \\2/' concacaf.txt\n\nIt searches for the first word ([^ ]*, a sequence of non-space characters) at the beginning of the line and the word at the end of the line and replaces the entire line with the first word and the last word and a space between them.\nThe option -E tells sed to use modern regular expressions (by default it uses basic regular expressions and the parentheses need to be escaped).\nThe sed command is s (search). It searches in each line using a regular expression and replaces the matching substring with the provided replacement string. In the replacement string, \\1 represents the substring matching the first capturing group, \\2 the second group and so on.\nThe regular expression is explained below:\n^             # matches the beginning of line\n(             # starts a group (it is not a matcher)\n  [^ ]        # matches any character that is not a space (there is a space after `^`)\n  *           # the previous sub-expression, zero or more times\n)             # close the group; the matched substring is captured\n              # there is a space here in the expression; it matches a space\n.*            # match any character, any number of times\n              # match a space\n([^ ]*)       # another group that matches a sequence of non-space characters\n$             # match the end of the line\n\n\n", "\nI came here with mostly the same error, but this answer did not work for me. I had to create more space within my $HOME directory by deleting a few files, and then vim worked normally again.\n"], "rejected": ["\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nIn the command line write this:\nEXINIT=\"set nocompatible\"; export EXINIT\n\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nSimple first free some space and try again..if still same issue then try to save with :w!\n", "\nI wouldn't create a child process (sed or whatever), if I can do it easily within bash as well.\nSay we have\nline=abcBetty29abcdefghijklmnopqrstuvwxyz\n\nThen we can do\nnew_line=${line/Betty29?????????????????????????//}\n\nSince counting the 25 question marks is error-prone, an alternative would be to use a regex:\nif [[ $line =~ ^(.*)Betty29.{25}(.*) ]]\nthen\n  new_line=${BASH_REMATCH[1]}${BASH_REMATCH[2]}\nelse\n  echo pattern not found 1>&2\nfi\n\n", "\nI wouldn't create a child process (sed or whatever), if I can do it easily within bash as well.\nSay we have\nline=abcBetty29abcdefghijklmnopqrstuvwxyz\n\nThen we can do\nnew_line=${line/Betty29?????????????????????????//}\n\nSince counting the 25 question marks is error-prone, an alternative would be to use a regex:\nif [[ $line =~ ^(.*)Betty29.{25}(.*) ]]\nthen\n  new_line=${BASH_REMATCH[1]}${BASH_REMATCH[2]}\nelse\n  echo pattern not found 1>&2\nfi\n\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nUsually changing a file in a docker container is not a good idea. Everyone will forget about the change after a while. A good way is to make another docker image from the original one.\nSay in a docker image, you need to change a file named myFile.xml under /path/to/docker/image/. So, you need to do.\n\nCopy myFile.xml in your local filesystem and make necessary changes.\nCreate a file named 'Dockerfile' with the following content-\n\nFROM docker-repo:tag\nADD myFile.xml /path/to/docker/image/\n\nThen build your own docker image with docker build -t docker-repo:v-x.x.x .\nThen use your newly build docker image.\n", "\nYou should write:\nset nocompatible\n\nin file:\n~/.exrc\n", "\nYou should write:\nset nocompatible\n\nin file:\n~/.exrc\n", "\nYou should write:\nset nocompatible\n\nin file:\n~/.exrc\n", "\nIf your backspaces deletes forward you can use the command in vimrc file as shown below\nset backspace=2\n\nnow on the vi command mode do the follwoing to re-excecute the .vimrc file\n:so %\n\nTo know which .vimrc file is being read do the following\n:echo $MYVIMRC\n\n", "\nIf your backspaces deletes forward you can use the command in vimrc file as shown below\nset backspace=2\n\nnow on the vi command mode do the follwoing to re-excecute the .vimrc file\n:so %\n\nTo know which .vimrc file is being read do the following\n:echo $MYVIMRC\n\n", "\nWhen you open vi, you are in command mode. Type i to place yourself in insert mode. make your edits then when you are finished use the escape key to toggle back to command mode. Then type :q! to exit without saving or ZZ to save and close. I believe barjomet is correct that as root, :wq! will allow you to write to a read only file. \nyou might want to investigate why the file permissions are read only. See who owns the file and what the permissions are by using the ls command with the -l option\nExample:\nls -l /some/folder/somefile.xml\nchange the permissions (if you know what you're doing) by using chmod command and change owner by using the chown command (be careful, don't mess up the permissions and create a security flaw, I can't help with that as I don't know tomcat)\n", "\nWhen you open vi, you are in command mode. Type i to place yourself in insert mode. make your edits then when you are finished use the escape key to toggle back to command mode. Then type :q! to exit without saving or ZZ to save and close. I believe barjomet is correct that as root, :wq! will allow you to write to a read only file. \nyou might want to investigate why the file permissions are read only. See who owns the file and what the permissions are by using the ls command with the -l option\nExample:\nls -l /some/folder/somefile.xml\nchange the permissions (if you know what you're doing) by using chmod command and change owner by using the chown command (be careful, don't mess up the permissions and create a security flaw, I can't help with that as I don't know tomcat)\n", "\nIf there is apt or apt-get command in your container, just run apt update && apt install vim, otherwise you can try:\nnsenter -t <Pid> -n -m vi <your-file> to reuse the tools on your host but change the namespace.\n", "\nIf there is apt or apt-get command in your container, just run apt update && apt install vim, otherwise you can try:\nnsenter -t <Pid> -n -m vi <your-file> to reuse the tools on your host but change the namespace.\n", "\nIf there is apt or apt-get command in your container, just run apt update && apt install vim, otherwise you can try:\nnsenter -t <Pid> -n -m vi <your-file> to reuse the tools on your host but change the namespace.\n", "\nA quick hack you can consider is doing a chmod on the file you're editing, save with vim, and then chmod back to what the file was originally.\nls -l test.file (to see the permissions of the file)\nchmod 777 test.file\n[This is where you save in vim]\nchmod xxx test.file (restore the permissions you found in the first step)\n\nOf course I don't recommend this approach in a system where you're worried about security, as for a few seconds anyone can read/change the file without you realizing.\n", "\nA quick hack you can consider is doing a chmod on the file you're editing, save with vim, and then chmod back to what the file was originally.\nls -l test.file (to see the permissions of the file)\nchmod 777 test.file\n[This is where you save in vim]\nchmod xxx test.file (restore the permissions you found in the first step)\n\nOf course I don't recommend this approach in a system where you're worried about security, as for a few seconds anyone can read/change the file without you realizing.\n", "\nA quick hack you can consider is doing a chmod on the file you're editing, save with vim, and then chmod back to what the file was originally.\nls -l test.file (to see the permissions of the file)\nchmod 777 test.file\n[This is where you save in vim]\nchmod xxx test.file (restore the permissions you found in the first step)\n\nOf course I don't recommend this approach in a system where you're worried about security, as for a few seconds anyone can read/change the file without you realizing.\n", "\nA quick hack you can consider is doing a chmod on the file you're editing, save with vim, and then chmod back to what the file was originally.\nls -l test.file (to see the permissions of the file)\nchmod 777 test.file\n[This is where you save in vim]\nchmod xxx test.file (restore the permissions you found in the first step)\n\nOf course I don't recommend this approach in a system where you're worried about security, as for a few seconds anyone can read/change the file without you realizing.\n", "\nA quick hack you can consider is doing a chmod on the file you're editing, save with vim, and then chmod back to what the file was originally.\nls -l test.file (to see the permissions of the file)\nchmod 777 test.file\n[This is where you save in vim]\nchmod xxx test.file (restore the permissions you found in the first step)\n\nOf course I don't recommend this approach in a system where you're worried about security, as for a few seconds anyone can read/change the file without you realizing.\n", "\nA quick hack you can consider is doing a chmod on the file you're editing, save with vim, and then chmod back to what the file was originally.\nls -l test.file (to see the permissions of the file)\nchmod 777 test.file\n[This is where you save in vim]\nchmod xxx test.file (restore the permissions you found in the first step)\n\nOf course I don't recommend this approach in a system where you're worried about security, as for a few seconds anyone can read/change the file without you realizing.\n", "\nA quick hack you can consider is doing a chmod on the file you're editing, save with vim, and then chmod back to what the file was originally.\nls -l test.file (to see the permissions of the file)\nchmod 777 test.file\n[This is where you save in vim]\nchmod xxx test.file (restore the permissions you found in the first step)\n\nOf course I don't recommend this approach in a system where you're worried about security, as for a few seconds anyone can read/change the file without you realizing.\n", "\nA quick hack you can consider is doing a chmod on the file you're editing, save with vim, and then chmod back to what the file was originally.\nls -l test.file (to see the permissions of the file)\nchmod 777 test.file\n[This is where you save in vim]\nchmod xxx test.file (restore the permissions you found in the first step)\n\nOf course I don't recommend this approach in a system where you're worried about security, as for a few seconds anyone can read/change the file without you realizing.\n", "\nA quick hack you can consider is doing a chmod on the file you're editing, save with vim, and then chmod back to what the file was originally.\nls -l test.file (to see the permissions of the file)\nchmod 777 test.file\n[This is where you save in vim]\nchmod xxx test.file (restore the permissions you found in the first step)\n\nOf course I don't recommend this approach in a system where you're worried about security, as for a few seconds anyone can read/change the file without you realizing.\n", "\nYou can do it using vim macros. First, get your file into the following state:\nBus Railway Cinema Motor\nStand Station Theatre Cycle\n\nThen, with your cursor on the first line (in normal mode) do the following key combo\nqq0f<Space>r<Enter>jf<Space>r<Enter>2kddp@qq\n\nWhere <Space> is an actual space, and <Enter> is an actual enter key.\nYou have now recorded a recursive vim macro. Your file should look like this\nBus\nStand\nRailway Cinema Motor\nStation Theatre Cycle\n\nWith your cursor on the third line, after which, you hit @q, giving you\nBus\nStand\nRailway\nStation\nCinema\nTheatre\nMotor\nCycle\n\nThen do vipJ to join all lines in the paragraph.\nEdit 1\nUpon seeing the revised question, I propose the following:\nUse the command line. Others have pointed out the use of a few unix utilities that can make the job easy.\nIf that is beyond the constraints of your machine, you can do the following in vim:\nFirst, get your output.txt into this format:\nBus\nRailway\nCinema\nMotor\n\nStand\nStation\nTheatre\nCycle\n\nThen record the following macro to use on subsequent output files.\nqqgg}j<Ctrl>vGI<Space><Esc>gg<Ctrl>v}k$xdiph\"0P:%s/\\s\\+/<Space>/g\n\nWhich should solve your first instance.\nThen for your next instance, simply get the file into the format as previously shown and do @q to call the macro.\nNOTE: The above only works when the entire file only contains two paragraphs to be merged.\nA full explanation might be cumbersome and may ultimately be inaccurate, please use vim's inbuilt help texts to get it straight from the horse's mouth.\nWith regards to the files and how to do it a thousand times, I believe it is best to raise another question with your constraints as well as the file formats present, and the output required.\n", "\nYou can use rev to cut out that last field containing the integer:\n$ cat concacaf.txt | rev | cut -d' ' -f2- | rev\nDavid Canada\nLarin Canada\nBorges Costa Rica\nBuchanan Canada\nDavis Panama\nGray Jamaica\nHenriquez El Salvador\n\n", "\nmy best guess is that $home is not defined properly. try running: !echo $home on both editors. If it's not defined during the script run, define it before running vim.\n"]}