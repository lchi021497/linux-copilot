{"prompt": ["I want to return just some of the data of my lovely printer. (The name always contains STMicroelectronics printerI can print out all plugged USB devices with the lsusb command. This will give me (first line obviously being the printer):Bus 001 Device 004: ID 0483:5743 STMicroelectronics printer-80\nBus 001 Device 003: ID 0424:ec00 Microchip Technology, Inc. (formerly SMSC) SMSC9512/9514 Fast Ethernet Adapter\nBus 001 Device 002: ID 0424:9514 Microchip Technology, Inc. (formerly SMSC) SMC9514 Hub\nBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub`\nI can now find the device's details via lsusb -vvv -d 0483:5743, which returns:Bus 001 Device 004: ID 0483:5743 STMicroelectronics printer-80\nDevice Descriptor:\n  bLength                18\n  bDescriptorType         1\n  bcdUSB               2.00\n  bDeviceClass            0 \n  bDeviceSubClass         0 \n  bDeviceProtocol         0 \n  bMaxPacketSize0        64\n  idVendor           0x0483 STMicroelectronics\n  idProduct          0x5743 \n  bcdDevice            1.00\n  iManufacturer           1 Printer  \n  iProduct                2 printer-80\n  iSerial                 3 012345678AB\n  bNumConfigurations      1\n  Configuration Descriptor:\n    bLength                 9\n    bDescriptorType         2\n    wTotalLength       0x0020\n    bNumInterfaces          1\n    bConfigurationValue     1\n    iConfiguration          0 \n    bmAttributes         0xc0\n      Self Powered\n    MaxPower                2mA\n    Interface Descriptor:\n      bLength                 9\n      bDescriptorType         4\n      bInterfaceNumber        0\n      bAlternateSetting       0\n      bNumEndpoints           2\n      bInterfaceClass         7 Printer\n      bInterfaceSubClass      1 Printer\n      bInterfaceProtocol      2 Bidirectional\n      iInterface              0 \n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x01  EP 1 OUT\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0040  1x 64 bytes\n        bInterval               0\n      Endpoint Descriptor:\n        bLength                 7\n        bDescriptorType         5\n        bEndpointAddress     0x81  EP 1 IN\n        bmAttributes            2\n          Transfer Type            Bulk\n          Synch Type               None\n          Usage Type               Data\n        wMaxPacketSize     0x0040  1x 64 bytes\n        bInterval               0\ncan't get device qualifier: Resource temporarily unavailable\ncan't get debug descriptor: Resource temporarily unavailable\nDevice Status:     0x0001\n  Self Powered\nNow... How can I just return these data via bash:idVendor (0x0483)\nidProduct (0x5743)\nendpointOUT (0x01)\nendpointIN (0x81)\nThere must be some grep/regex magic that I just couldn't manage to master.Thanks for any help in advance!Searing for solutions to extract the line containing the printer description with regex.", "I have an embedded Linux system (running Ubuntu 10) on a microprocessor that has an onboard USB hub (specifically a BeagleBone Black).I made a simple bash script that's supposed to run a command, watch lsusb; and as that runs, my program needs to dump the output my command generates into a text or JSON file (ideally on a USB stick, called usb0 for the sake of the example).So far, this is what I have:#!/bin/bash\n#DATE=$(date +'%F %H:%M:%S')\nDIR=/home/ubuntu/lsusb_logs\nCMD='watch lsusb'\n$CMD > $DIR\nThis runs until I stop it, which is fine. But when I go to look at my now created lsusb_logs file, all the data appears to be either encoded or needs to be formatted because its not at all like the original format a single lsusb or even watch lsusb outputs.The purpose of this script is to gather historical data of the peripherals on the USB hub state over a 24 hour period in an environment chamber (climate stress testing).Any advice or insight is helpful, thanks."], "chosen": ["\nUsing GNU sed\n$ sed -En 's/[ \\t]*b?(id[vp][^ \\t]*|endpoint)(address)?[ \\t]+([^ \\t]*).* (out|in)?.*/\\l\\1\\4 (\\3)/Ip' <(lsusb | awk '$0 ~ /STMicroelectronics printer-80/{print $6}' | xargs -I % sh -c \"lsusb -vvv -d %\")\nidVendor (0x0483)\nidProduct (0x5743)\nendpointOUT (0x01)\nendpointIN (0x81)\n\n", "\nInstead of looping through the same repetitive command indefinitely, you can take another approach.\nYou can utilize udev to monitor for plugged or unplugged USB devices, and execute a script at that time.\nExample, create 2 scripts:\nvi /bin/device_added.sh\nvi /bin/device_removed.sh\n\nwhich will log to a log file the ACTION (added or removed),\nand make those executable:\nchmod +x /bin/device_added.sh\nchmod +x /bin/device_removed.sh\n\nthen create a udev rule that will contain the triggers on when a device change is detected:\nvi /etc/udev/rules.d/80-test.rules\n\nwhich will contain for example:\nSUBSYSTEM==\"usb\", ACTION==\"add\", ENV{DEVTYPE}==\"usb_device\",  RUN+=\"/bin/device_added.sh\"\nSUBSYSTEM==\"usb\", ACTION==\"remove\", ENV{DEVTYPE}==\"usb_device\", RUN+=\"/bin/device_removed.sh\"\n\nThis way with your 2 scripts log only upon change, and not all the time..\n"], "rejected": ["\nSuggesting the following awk script:\nawk '/idVendor/||/idProduct/{printf(\"%s (%s)\\n\", $1,$2)}/bEndpointAddress/{printf(\"endpoint%s (%s)\\n\", $NF, $2)}' <<<$(lsusb -vvv -d 0483:5743)\n\n", "\nwatch is going to print some non-readable characters because it needs to clear the screen every time it runs the command. You could however just run the command in an infinite while loop with some delay:\nwhile true; do\n    lsusb >> lsusb_logs\n    sleep 1 # 1 second delay\ndone\n\n"]}