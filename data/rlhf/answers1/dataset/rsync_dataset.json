{"prompt": ["I am trying to use rsync to complete an unfinished transfer from a remote server to a local machine usingrsync -a [email\u00a0protected]:~/source/ /dest/\nwhere /dest/ is the location of the partially completed transfer. However, due to bandwidth concerns I need to run rsync to a /tmp_dest/ on a different machine that does not have a copy of /dest/, from where I can then later move /tmp_dest/ to /dest/The solution I have come up with thus far is to use rync's --exclude-from option, using a file containing a complete list of files from /dest/.The command would look something like thisrsync -a --exclude-from 'list.txt' [email\u00a0protected]:~/source/ /tmp_dest/\nAt this point I feel as though I have scoured everywhere for a solution and tried every variant I came across.This included relative and absolute paths for the 'list.txt'relative:path 1/file 1\npath 2/file 2\n--or--absolute:/absolute/source/path 1/file 1\n/absolute/source/path 2/file 2\nI have tried the above with combinations of including - to explicitly exclude that line (where I have seen examples of people wanting to also + other files)- /absolute/source/path 1/file 1\n- /absolute/source/path 2/file 2\nI have tried putting leading **/ in front of the file paths to rectify the relative path problem**/path 1/file 1\n**/path 2/file 2\nI have also tried navigating to the directory containing 'list' and executing rsync from there, to avoid the issue where rsync looks for/path/to/the/list/something1/to.exclude\n/path/to/the/list/something2/to.exclude\n/path/to/the/list/something3/to.exclude\nand undoubtedly finding nothingI have also ensued that the correct line breaks are being used in the 'list' file. i.e. LF (Unix) line breaks.I have tried to create the 'list' with the following commandfind . -type f | tee list.txt\nthis initially created a file looking something like this./yyyy-mm-dd folder 1/sub folder [foo]/file.a\n./(yyyy) folder 2 {foo2}/file.b\n./folder, 3/sub-folder 3/file.c\nas you can see, there are spaces and other characters in the file paths, but from my current understanding, this shouldn't affect. But perhaps I am mistaken and will need to escape any characters with special meaning, which I may then need help withwhich I then perform a replace on ./ in notepad++ or some other text editor that preserves the LF (Unix) line breaks to get the desired result.\n(e.g. as above, I've tried replacing ./ with nothing, with /absolute/path/for/source/ noting the leading slash, or even double wildcards to match any parent tree structure containing the files.The only thing I feel that I haven't tried is escaping the spaces in the file names and paths, but I have read that this shouldn't be an issue.Perhaps I am overlooking something and any help would be appreciated.", "I am trying to use rsync to complete an unfinished transfer from a remote server to a local machine usingrsync -a [email\u00a0protected]:~/source/ /dest/\nwhere /dest/ is the location of the partially completed transfer. However, due to bandwidth concerns I need to run rsync to a /tmp_dest/ on a different machine that does not have a copy of /dest/, from where I can then later move /tmp_dest/ to /dest/The solution I have come up with thus far is to use rync's --exclude-from option, using a file containing a complete list of files from /dest/.The command would look something like thisrsync -a --exclude-from 'list.txt' [email\u00a0protected]:~/source/ /tmp_dest/\nAt this point I feel as though I have scoured everywhere for a solution and tried every variant I came across.This included relative and absolute paths for the 'list.txt'relative:path 1/file 1\npath 2/file 2\n--or--absolute:/absolute/source/path 1/file 1\n/absolute/source/path 2/file 2\nI have tried the above with combinations of including - to explicitly exclude that line (where I have seen examples of people wanting to also + other files)- /absolute/source/path 1/file 1\n- /absolute/source/path 2/file 2\nI have tried putting leading **/ in front of the file paths to rectify the relative path problem**/path 1/file 1\n**/path 2/file 2\nI have also tried navigating to the directory containing 'list' and executing rsync from there, to avoid the issue where rsync looks for/path/to/the/list/something1/to.exclude\n/path/to/the/list/something2/to.exclude\n/path/to/the/list/something3/to.exclude\nand undoubtedly finding nothingI have also ensued that the correct line breaks are being used in the 'list' file. i.e. LF (Unix) line breaks.I have tried to create the 'list' with the following commandfind . -type f | tee list.txt\nthis initially created a file looking something like this./yyyy-mm-dd folder 1/sub folder [foo]/file.a\n./(yyyy) folder 2 {foo2}/file.b\n./folder, 3/sub-folder 3/file.c\nas you can see, there are spaces and other characters in the file paths, but from my current understanding, this shouldn't affect. But perhaps I am mistaken and will need to escape any characters with special meaning, which I may then need help withwhich I then perform a replace on ./ in notepad++ or some other text editor that preserves the LF (Unix) line breaks to get the desired result.\n(e.g. as above, I've tried replacing ./ with nothing, with /absolute/path/for/source/ noting the leading slash, or even double wildcards to match any parent tree structure containing the files.The only thing I feel that I haven't tried is escaping the spaces in the file names and paths, but I have read that this shouldn't be an issue.Perhaps I am overlooking something and any help would be appreciated.", "I'm having this very awkward problem while using rsync between two linux machines. I have a workstation at home that does most of my computations and another machine at work that I transfer files between. For quite a while I've had no problems transferring files between the two machines. I run the transfer command, given below, and the files copied over with no problems. rsync -avz --delete-after --rsh='ssh -p 22' -u --progress $homecomp:$HOME/folder $HOME/.\nRecently, I've started having problems where after a few days the files that get deleted with the above command, and those that get transferred, seem to get lost in the work machine. In other words, files that are deleted reappear on the work machine and files that were transferred must be transferred again. After a rsync run I usually check to make sure things work correctly and the files always get deleted or transferred. So I have no idea how in the heck the files can just disappear or magically return. These files are always what was last transferred by the command. This really only started happening after I added some symbolic links from the above folder and another rsynced folder to my Documents folder, which I sync between the two systems. The problem definitely does not happen every time, but it happens a lot. I use the same above command for the Document syncing as well. The files that disappear or reappear are not only those that are sym linked.So basically, I rsync files, they get transferred or deleted. A day or so later, the transferred files disappear and the deleted files reappear. Repeat.I'm not sure what other information I can provide without going overboard, so hopefully this is enough to provide some ideas of the problem. This isn't a horrible problem, as I can just rsync content again when the files disappear. However, it does eat up my data limits with my cable provider, which is kind of annoying because they throttle when you exceed 400GB a month. Any help would be greatly appreciated. ", "When I try to use rsync (Linux Mint) in Python I get the following error\nrsync: [sender] change_dir \"home/user/my_source_folder\" failed: No such file or directory (2)\nHere is the code I used#!/bin/bash -l\nimport os, subprocess\nfrom lib.eml import Eml\n        \n\ndef sync_from_external_hd():\n    src = \"home/user/my_source_folder/\"\n    dst = \"/home/user/backup folder\"\n\n    if os.path.exists(dst) and os.path.exists(src):\n        subprocess.Popen([\"rsync\", \"-a\", f\"remote_user@[ip address]:{src}\", dst], stdout=subprocess.PIPE)\n\n\nsync_from_external_hd()\nI know the directory exists because I copy & paste the directory from the error & it opens.  I've also tried the rsync command in a terminal & it works.  Also, I already have a SSH connection between the two systems", "There is a remote system where i have read/write permissions only in one directoty. I use it to store the results of the nightly builds. For uploading the results for a specific day, i do an rsync of <date_dir> on the remote directory using following command:rsync -zavR <date_dir> <server_name>:/path/of/the/directory/where/i/have/permission/Now, sometimes i need to delete the <date_dir> directory at destination. For this, I tried following command:rsync -avh <date_dir> <server_name>:/path/of/the/directory/where/i/have/permission/ --deleteThis command deletes the contents of <date_dir> at destination but the directory <date_dir> itself is not deleted.I also tried to give --force-delete in rsync command, but it gives following error on my system:rsync: --force-delete: unknown optionWhat can be the command to delete the <date_dir> directory on the remote server using rsync.PS: I tried setting up password-less authentication using SSH but i don't have permissions to do that.", "There is a remote system where i have read/write permissions only in one directoty. I use it to store the results of the nightly builds. For uploading the results for a specific day, i do an rsync of <date_dir> on the remote directory using following command:rsync -zavR <date_dir> <server_name>:/path/of/the/directory/where/i/have/permission/Now, sometimes i need to delete the <date_dir> directory at destination. For this, I tried following command:rsync -avh <date_dir> <server_name>:/path/of/the/directory/where/i/have/permission/ --deleteThis command deletes the contents of <date_dir> at destination but the directory <date_dir> itself is not deleted.I also tried to give --force-delete in rsync command, but it gives following error on my system:rsync: --force-delete: unknown optionWhat can be the command to delete the <date_dir> directory on the remote server using rsync.PS: I tried setting up password-less authentication using SSH but i don't have permissions to do that.", "I back up my files using rsync. Right after a sync, I ran it expecting to see nothing, but instead it looked like it was skipping directories. I've (obviously) changed names, but I believe I've still captured all the information I could. What's happening here?$ ls -l /source/backup/myfiles\ndrwxr-xr-x 2 me me  4096 2010-10-03 14:00 foo\ndrwxr-xr-x 2 me me  4096 2011-08-03 23:49 bar\ndrwxr-xr-x 2 me me  4096 2011-08-18 18:58 baz\n\n$ ls -l /destination/backup/myfiles\ndrwxr-xr-x 2 me me  4096 2010-10-03 14:00 foo\ndrwxr-xr-x 2 me me  4096 2011-08-03 23:49 bar\ndrwxr-xr-x 2 me me  4096 2011-08-18 18:58 baz\n\n$ file /source/backup/myfiles/foo\n/source/backup/myfiles/foo/: directory\nThen I sync (expecting no changes):$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nAnd here's the weird part:$ echo 'hi' > /source/backup/myfiles/foo/test\n$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nbackup/myfiles/foo\nbackup/myfiles/foo/test\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nSo it worked:$ ls -l /source/backup/myfiles/foo\n-rw-r--r-- 1 me me  3126091 2010-06-15 22:22 IMGP1856.JPG\n-rw-r--r-- 1 me me  3473038 2010-06-15 22:30 P1010615.JPG\n-rw-r--r-- 1 me me        3 2011-08-24 13:53 test\n\n$ ls -l /destination/backup/myfiles/foo\n-rw-r--r-- 1 me me  3126091 2010-06-15 22:22 IMGP1856.JPG\n-rw-r--r-- 1 me me  3473038 2010-06-15 22:30 P1010615.JPG\n-rw-r--r-- 1 me me        3 2011-08-24 13:53 test\nbut still:$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nOther notes:My actual directories \"foo\" and \"bar\" do have spaces, but no other strange characters. Other directories have spaces and have no problem. I 'stat'-ed and saw no differences between the directories that don't rsync and the ones that do.If you need more information, just ask.", "I back up my files using rsync. Right after a sync, I ran it expecting to see nothing, but instead it looked like it was skipping directories. I've (obviously) changed names, but I believe I've still captured all the information I could. What's happening here?$ ls -l /source/backup/myfiles\ndrwxr-xr-x 2 me me  4096 2010-10-03 14:00 foo\ndrwxr-xr-x 2 me me  4096 2011-08-03 23:49 bar\ndrwxr-xr-x 2 me me  4096 2011-08-18 18:58 baz\n\n$ ls -l /destination/backup/myfiles\ndrwxr-xr-x 2 me me  4096 2010-10-03 14:00 foo\ndrwxr-xr-x 2 me me  4096 2011-08-03 23:49 bar\ndrwxr-xr-x 2 me me  4096 2011-08-18 18:58 baz\n\n$ file /source/backup/myfiles/foo\n/source/backup/myfiles/foo/: directory\nThen I sync (expecting no changes):$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nAnd here's the weird part:$ echo 'hi' > /source/backup/myfiles/foo/test\n$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nbackup/myfiles/foo\nbackup/myfiles/foo/test\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nSo it worked:$ ls -l /source/backup/myfiles/foo\n-rw-r--r-- 1 me me  3126091 2010-06-15 22:22 IMGP1856.JPG\n-rw-r--r-- 1 me me  3473038 2010-06-15 22:30 P1010615.JPG\n-rw-r--r-- 1 me me        3 2011-08-24 13:53 test\n\n$ ls -l /destination/backup/myfiles/foo\n-rw-r--r-- 1 me me  3126091 2010-06-15 22:22 IMGP1856.JPG\n-rw-r--r-- 1 me me  3473038 2010-06-15 22:30 P1010615.JPG\n-rw-r--r-- 1 me me        3 2011-08-24 13:53 test\nbut still:$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nOther notes:My actual directories \"foo\" and \"bar\" do have spaces, but no other strange characters. Other directories have spaces and have no problem. I 'stat'-ed and saw no differences between the directories that don't rsync and the ones that do.If you need more information, just ask.", "I back up my files using rsync. Right after a sync, I ran it expecting to see nothing, but instead it looked like it was skipping directories. I've (obviously) changed names, but I believe I've still captured all the information I could. What's happening here?$ ls -l /source/backup/myfiles\ndrwxr-xr-x 2 me me  4096 2010-10-03 14:00 foo\ndrwxr-xr-x 2 me me  4096 2011-08-03 23:49 bar\ndrwxr-xr-x 2 me me  4096 2011-08-18 18:58 baz\n\n$ ls -l /destination/backup/myfiles\ndrwxr-xr-x 2 me me  4096 2010-10-03 14:00 foo\ndrwxr-xr-x 2 me me  4096 2011-08-03 23:49 bar\ndrwxr-xr-x 2 me me  4096 2011-08-18 18:58 baz\n\n$ file /source/backup/myfiles/foo\n/source/backup/myfiles/foo/: directory\nThen I sync (expecting no changes):$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nAnd here's the weird part:$ echo 'hi' > /source/backup/myfiles/foo/test\n$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nbackup/myfiles/foo\nbackup/myfiles/foo/test\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nSo it worked:$ ls -l /source/backup/myfiles/foo\n-rw-r--r-- 1 me me  3126091 2010-06-15 22:22 IMGP1856.JPG\n-rw-r--r-- 1 me me  3473038 2010-06-15 22:30 P1010615.JPG\n-rw-r--r-- 1 me me        3 2011-08-24 13:53 test\n\n$ ls -l /destination/backup/myfiles/foo\n-rw-r--r-- 1 me me  3126091 2010-06-15 22:22 IMGP1856.JPG\n-rw-r--r-- 1 me me  3473038 2010-06-15 22:30 P1010615.JPG\n-rw-r--r-- 1 me me        3 2011-08-24 13:53 test\nbut still:$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nOther notes:My actual directories \"foo\" and \"bar\" do have spaces, but no other strange characters. Other directories have spaces and have no problem. I 'stat'-ed and saw no differences between the directories that don't rsync and the ones that do.If you need more information, just ask.", "I back up my files using rsync. Right after a sync, I ran it expecting to see nothing, but instead it looked like it was skipping directories. I've (obviously) changed names, but I believe I've still captured all the information I could. What's happening here?$ ls -l /source/backup/myfiles\ndrwxr-xr-x 2 me me  4096 2010-10-03 14:00 foo\ndrwxr-xr-x 2 me me  4096 2011-08-03 23:49 bar\ndrwxr-xr-x 2 me me  4096 2011-08-18 18:58 baz\n\n$ ls -l /destination/backup/myfiles\ndrwxr-xr-x 2 me me  4096 2010-10-03 14:00 foo\ndrwxr-xr-x 2 me me  4096 2011-08-03 23:49 bar\ndrwxr-xr-x 2 me me  4096 2011-08-18 18:58 baz\n\n$ file /source/backup/myfiles/foo\n/source/backup/myfiles/foo/: directory\nThen I sync (expecting no changes):$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nAnd here's the weird part:$ echo 'hi' > /source/backup/myfiles/foo/test\n$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nbackup/myfiles/foo\nbackup/myfiles/foo/test\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nSo it worked:$ ls -l /source/backup/myfiles/foo\n-rw-r--r-- 1 me me  3126091 2010-06-15 22:22 IMGP1856.JPG\n-rw-r--r-- 1 me me  3473038 2010-06-15 22:30 P1010615.JPG\n-rw-r--r-- 1 me me        3 2011-08-24 13:53 test\n\n$ ls -l /destination/backup/myfiles/foo\n-rw-r--r-- 1 me me  3126091 2010-06-15 22:22 IMGP1856.JPG\n-rw-r--r-- 1 me me  3473038 2010-06-15 22:30 P1010615.JPG\n-rw-r--r-- 1 me me        3 2011-08-24 13:53 test\nbut still:$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nOther notes:My actual directories \"foo\" and \"bar\" do have spaces, but no other strange characters. Other directories have spaces and have no problem. I 'stat'-ed and saw no differences between the directories that don't rsync and the ones that do.If you need more information, just ask.", "I back up my files using rsync. Right after a sync, I ran it expecting to see nothing, but instead it looked like it was skipping directories. I've (obviously) changed names, but I believe I've still captured all the information I could. What's happening here?$ ls -l /source/backup/myfiles\ndrwxr-xr-x 2 me me  4096 2010-10-03 14:00 foo\ndrwxr-xr-x 2 me me  4096 2011-08-03 23:49 bar\ndrwxr-xr-x 2 me me  4096 2011-08-18 18:58 baz\n\n$ ls -l /destination/backup/myfiles\ndrwxr-xr-x 2 me me  4096 2010-10-03 14:00 foo\ndrwxr-xr-x 2 me me  4096 2011-08-03 23:49 bar\ndrwxr-xr-x 2 me me  4096 2011-08-18 18:58 baz\n\n$ file /source/backup/myfiles/foo\n/source/backup/myfiles/foo/: directory\nThen I sync (expecting no changes):$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nAnd here's the weird part:$ echo 'hi' > /source/backup/myfiles/foo/test\n$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nbackup/myfiles/foo\nbackup/myfiles/foo/test\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nSo it worked:$ ls -l /source/backup/myfiles/foo\n-rw-r--r-- 1 me me  3126091 2010-06-15 22:22 IMGP1856.JPG\n-rw-r--r-- 1 me me  3473038 2010-06-15 22:30 P1010615.JPG\n-rw-r--r-- 1 me me        3 2011-08-24 13:53 test\n\n$ ls -l /destination/backup/myfiles/foo\n-rw-r--r-- 1 me me  3126091 2010-06-15 22:22 IMGP1856.JPG\n-rw-r--r-- 1 me me  3473038 2010-06-15 22:30 P1010615.JPG\n-rw-r--r-- 1 me me        3 2011-08-24 13:53 test\nbut still:$ rsync -rtvp /source/backup /destination\nsending incremental file list\nbackup/myfiles\nskipping non-regular file \"backup/myfiles/foo\"\nskipping non-regular file \"backup/myfiles/bar\"\nOther notes:My actual directories \"foo\" and \"bar\" do have spaces, but no other strange characters. Other directories have spaces and have no problem. I 'stat'-ed and saw no differences between the directories that don't rsync and the ones that do.If you need more information, just ask.", "I have this code below which loops rsync several times in different directories:for (( i=0; i<6; i++ )); do\n\n    rsync /source-${i} /remote-destination\n    \ndone\nHowever there is a problem: when it executes the first rsync, it asks me the password of the remove server and then it starts transfering the files. Only after it finishes transfering all the files it executes the loop a second time, asks me the password of the remote server again (no problem, I can afford typing the password every single time) and then I need to wait the transfer to happen so it can continue.I would like the loop to continue, without waiting... I tried using the & char at the end of the command line to send it to background however if I do that, I cant type the password of the remote server!Any idea how I can solve this? I really want to type myself the password every single time, this is not a problem. The problem is that or the loop waits every single rsync to be completed or it sends the password prompt to the background if I use &.", "It is possible to rsync file even if it wasn't changed.Let say I have file on src, and the same file on destwhen I do \"rsync src dest\" I want to force to download some specific file even if it is the same( have the same size, timestamp etc.)Is this possible? --include doesn't work is there some other option for this?", "It is possible to rsync file even if it wasn't changed.Let say I have file on src, and the same file on destwhen I do \"rsync src dest\" I want to force to download some specific file even if it is the same( have the same size, timestamp etc.)Is this possible? --include doesn't work is there some other option for this?", "I am trying to transfer a large dataset (768 Gigs) from one remote machine to another using bash on ubuntu 16.04. The problem I appear to be having is that I use rsync and the machine will transfer for a few hours and then quit when the connection inevitably gets interrupted. So suppose Im on machine A and the remote servers are machines B and C (all machines using ubuntu 16.04). I ssh to machine B and use this command:nohup rsync -P -r -e ssh /path/to/files/on/machine_B user@machine_C:directory &\nnote that I have the authorized key setup so no password is required between machines B and CA few hours later I get the following in the nohup file:sending incremental filelist\nfile_1.bam\n90,310,583,648 100%   36.44MB/s    0:39:23 (xfr#4, to-chk=5/10)\nfile_2.bam\n79,976,321,885 100%   93.25MB/s    0:13:37 (xfr#3, to-chk=6/10)\nfile_3.bam\n88,958,959,616  88%   12.50MB/s    0:15:28  rsync error: unexplained error (code 129) at rsync.c(632) [sender=3.1.1]\nrsync: [sender] write error: Broken pipe (32)\nI used nohup because I though it would keep running even if there was a hangup. I have not tried sh -c and I have not tried running the command from machine A because at this point whatever I try would be guesswork, ideas would be appreciated."], "chosen": ["\nPath relative to the source directory should work.\nSo for example:\nrsync -ar test1/ test2/ --exclude-from=list.txt\n\nGiven the following directory structure\ntest1\n\u251c\u2500\u2500 subdir\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 subdir2\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 testF3.txt\n\u251c\u2500\u2500 testF1.txt\n\u2514\u2500\u2500 testF2.txt\n\nThe exclude file:\ntestF2.*\nsubdir/subdir2/*\n\nYou can also use ** to match any subdirectory.\nMake sure that you don't have any extra spaces in your paths (including trailing whitespace) because that's included in the pattern.\n", "\nIf you use slashes at the end of the source directory name, your exclusion patterns are relative to the source directory, and cannot be absolute paths:\nrsync -av --exclude-from=exclude-file.list /source/dir/ /backups/dir\n#                                                     ^ slash here\n\n# exclude-file.list\n# Exclude everything under /source/dir/excluded\n/excluded\n\nWhereas without the slash:\nrsync -av --exclude-from=exclude-file.list /source/dir /backups\n#                                                     ^ no slash here\n\n# exclude-file.list\n# Exclude everything under /source/dir/excluded\n/source/dir/excluded\n\nCaveat: Exclude patterns NOT beginning with a slash are considered not anchored to the source directory, and can match any part of the path:\n# exclude-file.list\n# Exclude everything under /source/dir/.git, /source/dir/project/.git,\n# as well as any files named .git\n.git\n\nFrom rsync(1):\n\nA trailing slash on the source changes this behavior to avoid creating an additional directory level at the destination. You can think of a trailing / on a source as meaning \"copy the contents of this directory\" as opposed to \"copy the directory by name\", but in both cases the attributes of the containing directory are transferred to the containing directory on the destination. In other words, each of the following commands copies the files in the same way, including their setting of the attributes of /dest/foo:\nrsync \u2010av /src/foo /dest\nrsync \u2010av /src/foo/ /dest/foo\n\n\n", "\nDon't know if this helps, but I had issues with --delete-after before.\nMost of the times I'm simply using --delete, like this:\nrsync -az --delete -e ssh /home/foo/bar/ [email\u00a0protected]:/home/bar/\n", "\nyou can try using an absolute path for the source directory instead of a relative path. You can use the os.path.abspath() function to convert the relative path to an absolute path. Here's an updated version of your code with the absolute path:\n#!/bin/bash -l\nimport os, subprocess\nfrom lib.eml import Eml\n\ndef sync_from_external_hd():\nsrc = os.path.abspath(\"/home/user/my_source_folder/\")\ndst = \"/home/user/backup folder\"\n\nif os.path.exists(dst) and os.path.exists(src):\n    subprocess.Popen([\"rsync\", \"-a\", f\"remote_user@[ip address]:{src}\", \ndst], stdout=subprocess.PIPE)\nsync_from_external_hd()\n\nThis code should work correctly as long as the source directory path is correct and the SSH connection is properly established.\n", "\nIf you can execute a remote rm command that is almost certainly safest. But there may be situations where you don't have direct shell access to the remote side, for example when the ssh key you are using is only allowed to run a restricted set of commands in authorized_keys and rm is not one of them.\nYou can accomplish the task with rsync alone as shown below, but you should test carefully and be extra sure of your inputs:\nrsync -avh -n --delete \\\n  --filter=\"+ <date_dir>/**\" \\\n  --filter=\"+ <date_dir>\" \\\n  --filter=\"- *\" \\\n  /path/to/empty/ <server_name>:/path/of/the/directory/where/i/have/permission/\n\nThe idea is to synchronize an EMPTY directory at /path/to/empty with the remote directory that you have permission to modify. Without filters, of course, that would just delete EVERYTHING in the remote directory.\nSo we use the fact that rsync applies filters in order, using the first matching rule. The first filter deletes the contents of <date_dir>, the second filter deletes <date_dir> itself, and the last filter saves us from deleting the rest of the directory's contents.\nI've added a -n dry run flag just in case someone isn't paying close attention and pastes this command. Remove it to run the command for real.\n", "\nSOLUTION:\nIn the given context following command works for me:\nrsh <server_name> \"rm -rf /path/of/the/directory/where/i/have/permission/<date_dir>\"\n", "\nAre you absolutely sure that it's not a symbolic link directory?\ntry a:\nfile /source/backup/myfiles/foo\n\nto make sure it's a directory\nAlso, it could very well be a loopback mount\ntry\nmount\n\nand make sure that /source/backup/myfiles/foo is not listed.\n", "\nAre you absolutely sure those individual files are not symbolic links?\nRsync has a few useful flags such as -l which will \"copy symlinks as symlinks\". Adding -l to your command:\nrsync -rtvpl /source/backup /destination\n\n\nI believe symlinks are skipped by default because they can be a security risk. Check the man page or --help for more info on this:\nrsync --help | grep link\n\n\nTo verify these are symbolic links or pro-actively to find symbolic links you can use file or find:\n$ file /path/to/file\n/path/to/file: symbolic link to `/path/file`\n$ find /path -type l\n/path/to/file\n\n", "\nYou should try the below command, most probably it will work for you:\nrsync -ravz /source/backup /destination\n\n", "\nYou can try the following, it will work\nrsync -rtvp /source/backup /destination\n\n", "\nI personally always use this syntax in my script and works a treat to backup the entire system (skipping sys/* & proc/* nfs4/*)\nsudo rsync --delete --stats  --exclude-from $EXCLUDE -rlptgoDv / $TARGET/ | tee -a $LOG\n\nHere is my script run by root's cron daily:\n#!/bin/bash\n#\nNFS=\"/nfs4\"\nHOSTNAME=`hostname`\nTIMESTAMP=`date \"+%Y%m%d_%H%M%S\"`\nEXCLUDE=\"/home/gcclinux/Backups/root-rsync.excludes\"\nTARGET=\"${NFS}/${HOSTNAME}/SYS\"\nLOGDIR=\"${NFS}/${HOSTNAME}/SYS-LOG\"\nCMD=`/usr/bin/stat -f -L -c %T ${NFS}`\n\n## CHECK IF NFS IS MOUNTED...\n\nif [[ ! $CMD == \"nfs\" ]];then\n    echo \"NFS NOT MOUNTED\"\n    exit 1\nfi\n\n## CHECK IF LOG DIRECTORY EXIST\n\nif [ ! -d \"$LOGDIR\" ]; then\n    /bin/mkdir -p $LOGDIR\nfi\n\n## CREATE LOG HEADER\nLOG=$LOGDIR/\"rsync_result.\"$TIMESTAMP\".txt\"\n\necho \"-------------------------------------------------------\" | tee -a $LOG\necho `date` | tee -a $LOG\necho \"\" | tee -a $LOG\n\n## START RUNNING BACKUP\n/usr/bin/rsync --delete --stats  --exclude-from $EXCLUDE -rlptgoDv / $TARGET/ | tee -a $LOG\n\n", "\nLook into the rsync online man page, and it has an opinion called --password-file.\nHere are some original texts:\n\nYou can avoid the password prompt by setting the environment variable RSYNC_PASSWORD to the password you want to use or using the --password-file option. This may be useful when scripting rsync.\n\n", "\nTry this:\n$ rsync --whole-file --modify-window=-1 src dest\n\n--modify-window=-1 tricks rsync into believing the timestamps of the files differ even when they don't.\n--whole-file makes sure entire files are copied.\nAssuming src and dest are directories, a complete command to test it might look like:\n$ rsync -a -v --progress --whole-file --modify-window=-1 src dest\n\nRun it twice to verify it copies everything every time.\n", "\ntry the cp -R command, this copies really everything. \nrsync is designed to save bytes to be transferred by transferring the different files only. \n", "\nfor those that are interested I also tried running the following script with the nohup command on machine B.\nscript:\nchomp( my @files = `ls /path/to/files/on/machineB/*` );\nforeach ( @files ) { system(\"scp $_ user@machineC:destination/\"); }\n\nI still got truncated files.\nat the moment the following command appears to be working:\nnohup rsync -P --append -r -e ssh /path/to/files/on/machine_B user@machine_C:directory &\n\nyou just have to check the nohup file for a broken pipe error and re-enter the command if necessary.\n"], "rejected": ["\nHere is from rsync man page how to use \"--exclude-from\":\n--exclude-from=FILE     read exclude patterns from FILE\nUse the following command:\nrsync -a --exclude-from=list.txt [email\u00a0protected]:~/source/ /tmp_dest/\nAnd also it is better to use full path name of list.txt file\n", "\nHere is from rsync man page how to use \"--exclude-from\":\n--exclude-from=FILE     read exclude patterns from FILE\nUse the following command:\nrsync -a --exclude-from=list.txt [email\u00a0protected]:~/source/ /tmp_dest/\nAnd also it is better to use full path name of list.txt file\n", "\nHave encountered a similar issue and found this question while looking for answers.\nMy problem was rsyncing files from server A to server B, where files on server B reverted back to their old versions 15 minutes past every hour.\nIt was so regular that I thought it had to be a script, but I could not find anything on these servers. Created a workaround: a cron job to rsync the files from server A just after they revert back to their old versions on server B. Further investigation showed that there was a script running on a completely different server that I did not take into account at all (assumed it could not be the case) that was the cause of that change.\nIt is not possible for the rsynced files just to change back to their previous version or disappear or appear again after deletion. If this is what's happening, there must be an agent somewhere that is causing that action.\nFor anyone in that situation I would recommend first to identify when exactly this change occurs, then start looking for a cause in all possible places (do NOT assume anything, check even the most obvious and unexpected things).\n", "\nThis was a mistake on my part.  The problem was the source I was referencing existed on the client, not the remote server.  I didn't realize that I was logging into the remote server using the ip address.  I'm still kind of new to Linux.  Here is the code I used\n#!/bin/bash -l\nimport os, subprocess\nfrom lib.eml import Eml\n    \n\ndef sync_from_external_hd():\n    src = \"home/user/my_source_folder/\"\n    dst = \"/home/user/backup folder\"\n\n    if os.path.exists(dst) and os.path.exists(src):\n        subprocess.Popen([\"rsync\", \"-a\", src, dst], stdout=subprocess.PIPE)\n\n\nsync_from_external_hd()\n\n", "\nSince this is the very directory you are going to copy, rsync won't delete it. --delete means to remove a directory or file which does not exist on the senders side.  Obviously, date_dir exists on your local machine (otherwise rsync would complain about copying a non-existent directory). If you want to keep your local directory and only delete the remove copy, rsync is not the right tool, but you could use rsh ..... rm -r to remove the directory on the remote side.\n", "\nSince this is the very directory you are going to copy, rsync won't delete it. --delete means to remove a directory or file which does not exist on the senders side.  Obviously, date_dir exists on your local machine (otherwise rsync would complain about copying a non-existent directory). If you want to keep your local directory and only delete the remove copy, rsync is not the right tool, but you could use rsh ..... rm -r to remove the directory on the remote side.\n", "\nIn some cases just copy file to another location (like home) then try again\n", "\nIn some cases just copy file to another location (like home) then try again\n", "\nIn some cases just copy file to another location (like home) then try again\n", "\nIn some cases just copy file to another location (like home) then try again\n", "\nIn some cases just copy file to another location (like home) then try again\n", "\nThis is really an ssh question.  You have to create ssh keys and copy them to the remote host - see here for some good directions.\nUntil you can do:\n$ ssh remotehost hostname\nremotehost\n\nwithout entering a password rsync will require a password.\n", "\nIf the requirement is only to recopy same file then you can use\nscp src dest \n", "\nIf the requirement is only to recopy same file then you can use\nscp src dest \n", "\nI had the same problem and solved it in multiple steps:\n\nFirst I made sure that I ran all commands on tmux terminals. This adds a layer of safety on top of nohup, as it keeps connections alive: https://en.wikipedia.org/wiki/Tmux\n\nI combined the rsync command with the while command to enforce that the copy is attempted an infinite number of times even if the pipe breaks:\n\n\nwhile ! rsync <your_source> <your_destination>; do echo \"Rsync failed. Retrying ...\"; done\n\nThis approach is brute force and it will work if for each attempt, rsync manages to copy at least a few files. Eventually, even with wasteful repeats and multiple failures, all the files will be copied and my command above will exit gratefully.\n"]}