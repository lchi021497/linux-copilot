{"prompt": ["I would like to concatenate aliases. So for example, if I have the following:alias aliasone=\"cat\"\nalias aliastwo=\"/etc/passwd\"\nI would like to be able to type in the shell something like \"aliasone+aliastwo\" and then the following command will be executed:cat /etc/passwd\nCan this be done?Thanks!", "I would like to concatenate aliases. So for example, if I have the following:alias aliasone=\"cat\"\nalias aliastwo=\"/etc/passwd\"\nI would like to be able to type in the shell something like \"aliasone+aliastwo\" and then the following command will be executed:cat /etc/passwd\nCan this be done?Thanks!", "I would like to concatenate aliases. So for example, if I have the following:alias aliasone=\"cat\"\nalias aliastwo=\"/etc/passwd\"\nI would like to be able to type in the shell something like \"aliasone+aliastwo\" and then the following command will be executed:cat /etc/passwd\nCan this be done?Thanks!", "I would like to concatenate aliases. So for example, if I have the following:alias aliasone=\"cat\"\nalias aliastwo=\"/etc/passwd\"\nI would like to be able to type in the shell something like \"aliasone+aliastwo\" and then the following command will be executed:cat /etc/passwd\nCan this be done?Thanks!", "I would like to concatenate aliases. So for example, if I have the following:alias aliasone=\"cat\"\nalias aliastwo=\"/etc/passwd\"\nI would like to be able to type in the shell something like \"aliasone+aliastwo\" and then the following command will be executed:cat /etc/passwd\nCan this be done?Thanks!", "I do not understand what happens here.What I try to achieve:When I call an alias I would like to have\noutput who and where called this, like the CLI does\noutput the actually commands behind the alias\nexecute the commands behind the alias.\nExample:# The prefix to be re-used.\n__PREFIX='$(whoami)@$(hostname):$(pwd)\\$'\n\n# The commands to execute in a var to be able to print them too.\nFOO=\"echo 'foo' && echo 1\"\nBAR=\"echo 'bar' && echo 2\"\nBAZ=\"echo 'baz' && echo 3\"\n\n# Define aliases\n# echo the prefix and the command that will be executed, \n# and the execute the commands.\nalias FOO='echo ${__PREFIX}'\" '${FOO}' && ${FOO}\"\nalias BAR='echo ${__PREFIX}'\" '${BAR}' && ${BAR}\"\nalias BAZ='echo ${__PREFIX}'\" '${BAZ}' && ${BAZ}\"\nI found out that I have to use $(pwd) in single quotes ' to call it and not \"print\" it into the alias.The FOO example above prints:username@notebook:~$ \n$(whoami)@$(hostname):$(pwd)\\$ echo foo && echo 1\nfoo\n1\nWhen I change the FOO example toalias FOO='echo $(whoami)@$(hostname):$(pwd)\\$'\" '${FOO}' && ${FOO}\"\nthen it works:username@notebook:~$ \nusername@notebook:/home/username$ echo foo && echo 1\nfoo\n1\nQuestion: how can I have the whoami, hostname and pwd in a var, and then use it in an alias?", "Is there way to set up an alias in such a way so that I could enter the command, followed by the argument in a single line?For example, instead ofjavac Program.java && java Program\nI would be able to gonewcommand Program.java //or \"newcommand Program\", whichever is easier\nwhich would do the same commands as the line above.", "Is there way to set up an alias in such a way so that I could enter the command, followed by the argument in a single line?For example, instead ofjavac Program.java && java Program\nI would be able to gonewcommand Program.java //or \"newcommand Program\", whichever is easier\nwhich would do the same commands as the line above.", "Is there way to set up an alias in such a way so that I could enter the command, followed by the argument in a single line?For example, instead ofjavac Program.java && java Program\nI would be able to gonewcommand Program.java //or \"newcommand Program\", whichever is easier\nwhich would do the same commands as the line above.", "Is there way to set up an alias in such a way so that I could enter the command, followed by the argument in a single line?For example, instead ofjavac Program.java && java Program\nI would be able to gonewcommand Program.java //or \"newcommand Program\", whichever is easier\nwhich would do the same commands as the line above.", "Is there way to set up an alias in such a way so that I could enter the command, followed by the argument in a single line?For example, instead ofjavac Program.java && java Program\nI would be able to gonewcommand Program.java //or \"newcommand Program\", whichever is easier\nwhich would do the same commands as the line above.", "Is there way to set up an alias in such a way so that I could enter the command, followed by the argument in a single line?For example, instead ofjavac Program.java && java Program\nI would be able to gonewcommand Program.java //or \"newcommand Program\", whichever is easier\nwhich would do the same commands as the line above.", "Is there way to set up an alias in such a way so that I could enter the command, followed by the argument in a single line?For example, instead ofjavac Program.java && java Program\nI would be able to gonewcommand Program.java //or \"newcommand Program\", whichever is easier\nwhich would do the same commands as the line above.", "Help me setting an alias that represents this command:ps -u -p $(fuser 5432/tcp 2>/dev/null)\n\n#output:\nUSER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\npostgres  423310  0.0  0.1 506528 14544 ?        S    Jun25   1:48 /usr/pgsql-11/bin/postgres\nI have tried:\nalias p2p='ps -u -p $(fuser $1 2>/dev/null)', but it doesn't work", "I used to have an alias for cd in csh, which can show the current time and directory at the beginning of the cmdline and trigger the ls command.\nThe effect is like this:[10:24] /home/cambridgelv/Desktop/cd ..\nDesktop  Documents  Downloads  Music\n[10:24] /home/cambridgelv/cd Desktop\nabc.doc  def.jpg\n[10:25] /home/cambridgelv/Desktop/\nDoes anybody have any idea?", "I have a screen session that is always running in a separate user (for a minecraft server). Each time I want to attach to this screen, I use su -c 'screen -r mc-1.18.2' minecraft to attach back to this screen.I wanted to make an alias for this command just so I didn't have to type it out or go up in the command history each time. I added alias mcconsole=\"su -c 'screen -r mc-1.18.2' minecraft\" to my ~/.bash_aliases folder. My other aliases work just fine but when I run mcconsole I am left with a brand new screen session. I am not sure where the hiccup is when attaching to the screen session (which is running as I can attach to it normally)."], "chosen": ["\nSimply remove the \"alias\" from the second line. That is:\nalias aliasone=\"cat\"\nfolder=\"/etc/passwd\"\n\nAnd then you can write:\naliasone $folder\n\nThe problem is that alias evaluate commands; but in the second alias there is no command. In the case of a parameter is better to use a variable. If you have a more particular situation (e.g. you are are inside a script) tell us so we can give a better solution.\n", "\nAliases are only for command substitution. If you want to have shorthand for arguments, use shell variables.\nfile=/etc/passwd\ncat \"$file\"\n\n", "\nI think you are trying to run several aliases at the same time, one after another.\nI might be wrong, but if this is the case, the easy solution will be to use && in a new alias.\nFor example you have two existing ones:\nalias cdtomydir='cd /home/mydir'\nalias listfilesindir = 'll'\nthen you are able to combine the two above into a third alias by using &&:\nalias cdtomydirandlistfiles = 'cdtomydir && listfilesindir'\n", "\nyou can do this: alias aliasone='cat /etc/passwd' then just type aliasone and that's it then if you're going to use cat looking elsewhere then type alias aliastwo='cat /etc/shadow' for example. Anyway just change path and that's it and make sure that aliases are different and keep on mind that words used for commands aren't reserved.\n", "\nIt is not the most effective solution, but it still works,\ninstead of concatenating 2 aliases, an alias is replaced by the command\n alias alias_name 'command 1 ; command 2' \n\nthen execute in Terminal\nalias_name\n\nand it does the trick\n", "\nYou need to evaluate the expansion to get another expansion:\nalias FOO='eval \"echo ${__PREFIX}\"; echo \"${FOO}\"; eval \"${FOO}\"'\n\n", "\nSince Java 11 you can use a single command\njava example.java\n\nhttps://openjdk.java.net/jeps/330\nLinked: How to compile and run in single command in java\n", "\nAn alias is not made to accept parameters, define a function like this:\njcar() { javac $1.java && java $1 ; }\n\nThen use it:\njcar Program\n\n(jcar was intended as an acronym for java-compile-and-run)\n", "\nAdding on to enrico.bacis' answer, i personally don't like to have Program.class files cluttering up my workspace if i'm just testing a program, so i'd do\njcar() { javac $1.java && java $1 && rm $1.class}\nin addition, i found it helpful to trap ctrl-c so that even if i end the program halfway, it still removes the .class\njcar() {\ntrap \"rm $1.class\" SIGINT SIGTERM\njavac $1.java\njava $1\nrm $1.class\n}\n\n", "\nI like to pass the full Program.java filename as the input parameter, allowing easy autocompletion.\nHere's an edited version of notcompletelyrational's script, which expects commands like jcar Program.java rather than jcar Program:\njcar() {\n  f=$1\n  f2=${f%.*}\n  trap \"rm $f2.class\" SIGINT SIGTERM\n  javac $1\n  java $f2\n  rm $f2.class\n}\n\n", "\nMy favorite solution looks like this:\nfunction jcar { javac ${1%.*}.java && java ${1%.*}; }\n\nIt can handle various inputs, such as\njcar myfile\njcar myfile.\njcar myfile.java\njcar myfile.class\n\nIt lets you use Tab more quickly :)\n", "\nI was going to answer you giving a piece of Makefile, but it would not be generic enough. Whenever you want to compile a more complex program (let's say 2 files), you need to compile the second as well. It might be in a package, in which case what you're asking does not work any longer. Same thing if you have to handle libraries.\nFor all these reasons, I strongly advise you to choose a building utility of your choice, make, scons, ant, and let's mention it maven. I find the later way to complex for small projects. But ant is my best candidate for java programs. In the end, you can just ant run which will run your program and recompile it if needed. Have a look on the hello world tutorial with ant.\n", "\nAdding on to enrico.bacis' and notcompletelyrational's answer, how to run it under a package and clean up the package compiled files:\njcar() {\n        javac -d . $1.java && java ${PWD##*/}.$1 && rm -rf ${PWD##*/}/\n}\nBy the way, this function should be added to ~/.bash_profile for Mac OS and ~/.bashrc for Linux, respectively.\nTo run it:\njcar ProgramName\n\n", "\nWell, looks like I've found something that works.\nLike @Barmar commented, a function works, but fuser insists in writing to error ouput.\nSo I did a function and a alias that mutes stderr of fuser output:\nfunction p2pfunc() { PID=$(fuser $@); echo \"PID =$PID\"; ps -u -p $PID; }\nalias p2p='p2pfunc $@ 2>/dev/null'\n\np2p 5432/tcp 5433/tcp\n\nPID =  3055 423310\nUSER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\npostgres    3055  0.0  0.1 506664 12120 ?        S    May16   4:03 /usr/pgsql-11/bin/postgres\npostgres  423310  0.0  0.1 506528 14544 ?        S    Jun25   1:48 /usr/pgsql-11/bin/postgres\n\n", "\nThe easiest would be to hook in to the special cwdcmd alias; this gets run every time the current directory changes.\nalias cwdcmd 'printf \"[%s] \" `date +%H:%m`'\n\nFor example, where > is the prompt:\n> sleep 1\n\n> cd /\n[14:06] > sleep 1\n> cd ~\n[14:06] >\n\n\nYou can also alias cd with something like:\nalias cd 'cd $* && printf \"[%s] \" `date +%H:%m`'\n\nWhere $* expand to the command arguments /dir in cd /dir. However, this also prints the directory in square brackets for some reason that I don't quite understand. The cwdcmd alias is better anyway.\n", "\nSounds like something screwy is happening with quoting when using the alias. Try using a shell function instead.\nmcconsole() {\n    su -c 'screen -r mc-1.18.2' minecraft\n}\n\n"], "rejected": ["\nStep 1: \nalias ccat='cat $1'\n\nStep 2: \nccat /etc/passwd\n\nOutput>> \nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin.............\n\n", "\nStep 1: \nalias ccat='cat $1'\n\nStep 2: \nccat /etc/passwd\n\nOutput>> \nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin.............\n\n", "\nStep 1: \nalias ccat='cat $1'\n\nStep 2: \nccat /etc/passwd\n\nOutput>> \nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin.............\n\n", "\nStep 1: \nalias ccat='cat $1'\n\nStep 2: \nccat /etc/passwd\n\nOutput>> \nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin.............\n\n", "\nStep 1: \nalias ccat='cat $1'\n\nStep 2: \nccat /etc/passwd\n\nOutput>> \nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\nman:x:6:12:man:/var/cache/man:/usr/sbin/\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin.............\n\n", "\nDon't. It's strictly possible to run strings from variables as commands, but unless done very cautiously it's very bad practice for security reasons. Instead, store commands as functions (which you can conditionally redefine and update just as you might update a variable).\n# note that running hostname and whoami over and over is very inefficient; don't do this.\nlog_prefix() { printf '%s@%s:%s$ ' \"$(whoami)\" \"$(hostname)\" \"$PWD\"; }\nlog_cmd() { printf '%q ' \"$@\"; printf '\\n'; }\nlog_and_run() { log_prefix; log_cmd \"$@\"; \"$@\"; }\n\nIf you would otherwise want to programatically define aliases, you can do the same thing for functions (though it takes some care not to invoke the previously-referenced security problems):\n# note that getting this wrong could cause serious security problems\n# consequently, it's very carefully written; don't make changes without understanding them\nwrap_cmd() {\n  local wrapper_name cmd_content def_cmd\n  wrapper_name=$1; shift\n  printf -v cmd_content '%q ' \"$@\"\n  printf -v def_cmd '%q() { log_and_run %s \"$@\"; }' \"$wrapper_name\" \"$cmd_content\"\n  eval \"$def_cmd\"\n}\n\nWith the above defined, you can use it as:\n$ wrap_cmd sayhi echo hello # create 'sayhi' to run 'hello world'\n$ sayhi world               # and test it! (below is output)\nuser@host:/home/user$ echo hello world\nhello world\n\n...and you can also redefine the log_prefix function even after commands have been wrapped, in the same way you intend to update __PREFIX:\n$ log_prefix() { printf %s \"NEW PREFIX HERE: \"; }\n$ sayhi world\nNEW PREFIX HERE: echo hello\nhello\n\n", "\nIf you want to compile and run your Java program in 1 command, try this:\njavac Driver.java ; java Driver\n\nWhere your file is called Driver.java.\nThis will compile the program, and then sequentially execute it.\n", "\nIf you want to compile and run your Java program in 1 command, try this:\njavac Driver.java ; java Driver\n\nWhere your file is called Driver.java.\nThis will compile the program, and then sequentially execute it.\n", "\nIf you want to compile and run your Java program in 1 command, try this:\njavac Driver.java ; java Driver\n\nWhere your file is called Driver.java.\nThis will compile the program, and then sequentially execute it.\n", "\nIf you want to compile and run your Java program in 1 command, try this:\njavac Driver.java ; java Driver\n\nWhere your file is called Driver.java.\nThis will compile the program, and then sequentially execute it.\n", "\nIf you want to compile and run your Java program in 1 command, try this:\njavac Driver.java ; java Driver\n\nWhere your file is called Driver.java.\nThis will compile the program, and then sequentially execute it.\n", "\nIf you want to compile and run your Java program in 1 command, try this:\njavac Driver.java ; java Driver\n\nWhere your file is called Driver.java.\nThis will compile the program, and then sequentially execute it.\n", "\nIf you want to compile and run your Java program in 1 command, try this:\njavac Driver.java ; java Driver\n\nWhere your file is called Driver.java.\nThis will compile the program, and then sequentially execute it.\n", "\nTry to write your command in a bash script like this:\n#!/bin/bash\npid=$1\nps -u -p $(fuser $pid 2>/dev/null)\n\nThen create your alias like:\nalias pr='yourscript.sh'\n\nA the end just call your alias like:\npr 5432/tcp\n\nThis is not such a good practice but it should work in your case.\nHope this help \nRegards\n", "\nLet me answer it by myself.\nI thought maybe I aliased the set prompt command into cd before, so we can do this separately.\nRefer to this answer: https://stackoverflow.com/a/33037878/11768989\nYou can customize the prompt in any way.\nMine is look like this:\nset prompt = '%{\\e[35;40;1m%}[%T @%m]%{\\e[0m%} %~/'\nalias cd \"cd \\!:1; ls\"\n\n", "\nmaybe try to invert simple and double quotes, something like:\nalias mcconsole='su -c \"screen -r mc-1.18.2\" minecraft'\nor escape double quotes inside:\nalias mcconsole=\"su -c \\\"screen -r mc-1.18.2\\\" minecraft\"\n"]}