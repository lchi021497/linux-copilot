{"prompt": ["Suppose in a Linux shell script, I have WHATIF_POLLING_SCHEDULER=\"0 * * ? * *\".\nNow I do: ESCAPED_WHATIF_POLLING_SCHEDULER=\\\"${WHATIF_POLLING_SCHEDULER}\\\"CRON1=\"-Dwhatif.polling.scheduler=$ESCAPED_WHATIF_POLLING_SCHEDULER\"\nFinally, I have to do java -jar $MY_JAR and pass this cron paramater in it.\nSo, when I do java \"$CRON1\" -jar $MY_JAR I am getting error like 'invalid value in cron parser'While if I simply substitute the value java -Dwhatif.polling.scheduler=\"0 * * ? * *\" -jar $MY_JAR it works fine.\nI need to pass the CRON1 variable correctly in Java command.", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "I need to show a notification from a cron job. My crontab is something like:$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    Display=:0.0 /usr/bin/notify-send Hey \"How are you\"\nI checked /var/log/syslog and the command is actually executed every minute but it doesn't pop up the notification.\nCan anybody help me understand why?", "There is a linux mongo instance wherein the mongo logrotation has been set:\n/etc/logrotate.d/mongodb\n/var/log/mongodb/mongod.log {\n   rotate 7\n   daily\n   size 500M\n   copytruncate\n   missingok\n   create 0600 mongodb mongodb\n   dateext\n   delaycompress\n   compress\n}\nBut the /etc/logrotate.conf file has the following configuration:weekly\n\nsu root syslog\n\nrotate 4\n\ncreate\n\ninclude /etc/logrotate.d\n\n/var/log/wtmp {\n    missingok\n    monthly\n    create 0664 root utmp\n    rotate 1\n}\n\n/var/log/btmp {\n    missingok\n    monthly\n    create 0660 root utmp\n    rotate 1\n}\nThe question here is, will the mongo logrotation happen daily as specified in /etc/logrotate.d/mongodb or will it happen weekly as it has been specified in /etc/logrotate.conf ?Also how do I know/ensure if the logrotation is actually happening, through cron ?", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I have set up a cronjob for root user in ubuntu environment as follows by typing crontab -e  34 11 * * * sh /srv/www/live/CronJobs/daily.sh\n  0 08 * * 2 sh /srv/www/live/CronJobs/weekly.sh\n  0 08 1 * * sh /srv/www/live/CronJobs/monthly.sh\nBut the cronjob does not run. I have tried checking if the cronjob is running using pgrep cron and that gives process id 3033. The shell script calls a python file and is used to send an email. Running the python file is ok. There's no error in it but the cron doesn't run. The daily.sh file has the following code in it.python /srv/www/live/CronJobs/daily.py\npython /srv/www/live/CronJobs/notification_email.py\npython /srv/www/live/CronJobs/log_kpi.py\n", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I need to add a cron job thru a script I run to set up a server. I am currently using Ubuntu. I can use crontab -e but that will open an editor to edit the current crontab. I want to do this programmatically.Is it possible to do so?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "I have a crontab running every hour. The user running it has environment variabless in the .bash_profile that work when the user runs the job from the terminal, however, obviously these don't get picked up by crontab when it runs.I've tried setting them in .profile and .bashrc but they still don't seem to get picked up. Does anyone know where I can put environment vars that crontab can pick up?", "We have a remote device that is controlled by a C program. This program often fails so we want to introduce some monitoring. Either the program crashes and exits or some bug happens and the program is not responding.We want to set up a cron task or some other scripts for monitoring. What is the best modern practice for communication between C program and bash script or cron? We have access to the source code of this C program, so we can introduce some sort of error messages / events. Should they be written to a file that is later parsed by cron or some other monitoring script - or is this approach obsolete and there is some API or Linux messaging system for communication is such cases?", "We have a remote device that is controlled by a C program. This program often fails so we want to introduce some monitoring. Either the program crashes and exits or some bug happens and the program is not responding.We want to set up a cron task or some other scripts for monitoring. What is the best modern practice for communication between C program and bash script or cron? We have access to the source code of this C program, so we can introduce some sort of error messages / events. Should they be written to a file that is later parsed by cron or some other monitoring script - or is this approach obsolete and there is some API or Linux messaging system for communication is such cases?", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I would like to run a job through cron that will be executed every second Tuesday at given time of day. For every Tuesday is easy:0 6 * * Tue\nBut how to make it on \"every second Tuesday\" (or if you prefer - every second week)?\nI would not like to implement any logic in the script it self, but keep the definition only in cron.", "I have three jobs running on my system with following names\n\"Test1\" that runs from Saturday to Thurday\n\n\"Test2\" that runs on even week on every friday\n\n\"Test3\" that runs on odd week on every friday\nI have figured out on how to schedule from my \"Test1\" job from Saturday to Thursday like this\n05 11 * * 5-4  This is command to run my test1 job from Saturday to Thursday\n\nBut I am not able to figure out on how to schedule  my two jobs Test2 and Test3 in such way that Test2 runs on every Friday only when its even week and Test3 to run on every odd week on every Friday  only. I will be obliged if someone can provide possible solution to my query", "I want to analysis some data in one linux server,then send the it as Email text to my Email account , But when i execute this shell scripts in shell command, It works well, Weird is that when i put all the procedure into crontab job, The Email text will turns to an attached file, Can someone help?#* * * * * sh -x /opt/bin/exec.sh >> /opt/bin/mailerror 2>&1\n\n/* exec.sh */\n#/bin/sh\ncd /opt/bin\n./analysis.sh > test\nmail -s \"Today's Weather\" [email\u00a0protected] < test\nBut when i execute exec.sh in shell command line directly, The Email will get text, Can someone explain it for me, grate thanks.", "I want to analysis some data in one linux server,then send the it as Email text to my Email account , But when i execute this shell scripts in shell command, It works well, Weird is that when i put all the procedure into crontab job, The Email text will turns to an attached file, Can someone help?#* * * * * sh -x /opt/bin/exec.sh >> /opt/bin/mailerror 2>&1\n\n/* exec.sh */\n#/bin/sh\ncd /opt/bin\n./analysis.sh > test\nmail -s \"Today's Weather\" [email\u00a0protected] < test\nBut when i execute exec.sh in shell command line directly, The Email will get text, Can someone explain it for me, grate thanks.", "I want to analysis some data in one linux server,then send the it as Email text to my Email account , But when i execute this shell scripts in shell command, It works well, Weird is that when i put all the procedure into crontab job, The Email text will turns to an attached file, Can someone help?#* * * * * sh -x /opt/bin/exec.sh >> /opt/bin/mailerror 2>&1\n\n/* exec.sh */\n#/bin/sh\ncd /opt/bin\n./analysis.sh > test\nmail -s \"Today's Weather\" [email\u00a0protected] < test\nBut when i execute exec.sh in shell command line directly, The Email will get text, Can someone explain it for me, grate thanks.", "I want to analysis some data in one linux server,then send the it as Email text to my Email account , But when i execute this shell scripts in shell command, It works well, Weird is that when i put all the procedure into crontab job, The Email text will turns to an attached file, Can someone help?#* * * * * sh -x /opt/bin/exec.sh >> /opt/bin/mailerror 2>&1\n\n/* exec.sh */\n#/bin/sh\ncd /opt/bin\n./analysis.sh > test\nmail -s \"Today's Weather\" [email\u00a0protected] < test\nBut when i execute exec.sh in shell command line directly, The Email will get text, Can someone explain it for me, grate thanks.", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I want to be able to programatically add a new cron job, what is the best way to do this?From my research, it seems I could dump the current crontab and then append a new one, piping that back into crontab:(crontab -l ; echo \"0 * * * * wget -O - -q http://www.example.com/cron.php\") | crontab -\nIs there a better way?", "I have cronjobs that execute PHP files at pre-determined times. These scrips can take over an hour to complete. I want to be able to physically monitor the scripts. I have logs, of course, and lots of ways to handle errors, but sometimes I just like to see what's happening.Previously I did this on Windows where I would schedule a task which would launch in a shell that would remain open while the task ran.Can I do this on Linux? Using SSH? Something perhaps like using screen with the cron? I'm using the AWS version of Linux.Thank you.", "I have cronjobs that execute PHP files at pre-determined times. These scrips can take over an hour to complete. I want to be able to physically monitor the scripts. I have logs, of course, and lots of ways to handle errors, but sometimes I just like to see what's happening.Previously I did this on Windows where I would schedule a task which would launch in a shell that would remain open while the task ran.Can I do this on Linux? Using SSH? Something perhaps like using screen with the cron? I'm using the AWS version of Linux.Thank you.", "I have cronjobs that execute PHP files at pre-determined times. These scrips can take over an hour to complete. I want to be able to physically monitor the scripts. I have logs, of course, and lots of ways to handle errors, but sometimes I just like to see what's happening.Previously I did this on Windows where I would schedule a task which would launch in a shell that would remain open while the task ran.Can I do this on Linux? Using SSH? Something perhaps like using screen with the cron? I'm using the AWS version of Linux.Thank you.", "I have a cron job set up for daily execution (on my own ubuntu, just for trial) like so:0 0 * * * /path/exec.sh\nIt is been set for daily execution. I usually open my machine around 8a.m. I would like to find out\n - what time my cron job ran, if it has already run ?\n - I would also like to see if any of my cron job is running at the moment?Is there a way to find out IF a cron job is actually running at the moment?", "I have a cron job set up for daily execution (on my own ubuntu, just for trial) like so:0 0 * * * /path/exec.sh\nIt is been set for daily execution. I usually open my machine around 8a.m. I would like to find out\n - what time my cron job ran, if it has already run ?\n - I would also like to see if any of my cron job is running at the moment?Is there a way to find out IF a cron job is actually running at the moment?", "I have a cron job set up for daily execution (on my own ubuntu, just for trial) like so:0 0 * * * /path/exec.sh\nIt is been set for daily execution. I usually open my machine around 8a.m. I would like to find out\n - what time my cron job ran, if it has already run ?\n - I would also like to see if any of my cron job is running at the moment?Is there a way to find out IF a cron job is actually running at the moment?", "I have a cron job set up for daily execution (on my own ubuntu, just for trial) like so:0 0 * * * /path/exec.sh\nIt is been set for daily execution. I usually open my machine around 8a.m. I would like to find out\n - what time my cron job ran, if it has already run ?\n - I would also like to see if any of my cron job is running at the moment?Is there a way to find out IF a cron job is actually running at the moment?", "I have a cron job set up for daily execution (on my own ubuntu, just for trial) like so:0 0 * * * /path/exec.sh\nIt is been set for daily execution. I usually open my machine around 8a.m. I would like to find out\n - what time my cron job ran, if it has already run ?\n - I would also like to see if any of my cron job is running at the moment?Is there a way to find out IF a cron job is actually running at the moment?"], "chosen": ["\nThe variable CRON1 contains the string -Dwhatif.polling.scheduler=\"0 * * ? * *\" and this is what Java gets as first parameter, while when you type the version of your code which works fine, Java sees as first parameter the string -Dwhatif.polling.scheduler=0 * * ? * *.\nI guess that Java is simply upset by the double quotes in your parameter. You are adding them when calculating ESCAPED_WHATIF_POLLING_SCHEDULER, so you should have done instead\n CRON1=\"-Dwhatif.polling.scheduler=$WHATIF_POLLING_SCHEDULER\"\n\nor alternatively remove the double quotes from the content of your CRON1 variable (i.e. pass\n\"${CRON1//'\"'//}\" \n\nto java)\n", "\nI found the answer:\n$ crontab -l\n# m h  dom mon dow   command\n  * *   *   *   *    export DISPLAY=:0.0 && export XAUTHORITY=/home/ravi/.Xauthority && sudo -u ravi /usr/bin/notify-send Hey \"How are you\"\n\n", "\nI use i3 on Ubuntu 18.04. My way to solve this is:\n* * * * *  XDG_RUNTIME_DIR=/run/user/$(id -u) notify-send Hey \"this is dog!\"\nEdit 2020: I still use it on Ubuntu 20.04.\n", "\nIn Ubuntu 14.04 exporting the display did not work for me.  Below is a cron script I'm using to shutdown a virtual machine when a laptop's battery state becomes too low.  The line setting DBUS_SESSION_BUS_ADDRESS is the modification that finally got the warnings working correctly.\n#!/bin/bash\n\n# if virtual machine is running, monitor power consumption\nif pgrep -x vmware-vmx; then\n\n  bat_path=\"/sys/class/power_supply/BAT0/\"\n\n  if [ -e \"$bat_path\" ]; then\n\n    bat_status=$(cat $bat_path/status)\n\n    if [ \"$bat_status\" == \"Discharging\" ]; then\n\n      bat_current=$(cat $bat_path/capacity)\n\n      # halt vm if critical; notify if low\n      if [ \"$bat_current\" -lt 10 ]; then\n\n        /path/to/vm/shutdown/script\n        echo \"$( date +%Y.%m.%d_%T )\" >> \"/home/user/Desktop/VM Halt Low Battery\"\n\n        elif [ \"$bat_current\" -lt 15 ]; then\n        eval \"export $(egrep -z DBUS_SESSION_BUS_ADDRESS /proc/$(pgrep -u $LOGNAME gnome-session)/environ)\";\n        notify-send -i \"/usr/share/icons/ubuntu-mono-light/status/24/battery-caution.svg\"  \"Virtual machine will halt when battery falls below 10% charge.\"\n\n      fi\n\n    fi\n\n  fi\n\nfi\n\nexit 0\n\nThe relevant line is here:\neval \"export $(egrep -z DBUS_SESSION_BUS_ADDRESS /proc/$(pgrep -u $LOGNAME gnome-session)/environ)\";\n\nI found the solution here: https://askubuntu.com/a/346580/255814\n", "\nOnly this works for me (Xubuntu)\neval \"export $(egrep -z DBUS_SESSION_BUS_ADDRESS /proc/$(pgrep -u $LOGNAME xfce4-session)/environ)\"; notify-send  \"hello world\" \n\nIf you are in gnome enviroment, you need change xfce4-session to gnome-session\nrefer: https://askubuntu.com/questions/298608/notify-send-doesnt-work-from-crontab\n", "\nadd DBUS_SESSION_BUS_ADDRESS \uff1a\n* * * * * DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus /usr/bin/notify-send 'helloworld..' 'msg...'\n", "\nWork for me on fedora 22:\nPut this line in the .sh script before notify-send get called:\neval \"export $(egrep -z DBUS_SESSION_BUS_ADDRESS /proc/$(pgrep -u $LOGNAME gnome-session)/environ)\"\n\n", "\nOn recent Ubuntu versions, the following should work.\n#notify_me.sh, can be placed e.g. in your home directory\n\n#!/bin/bash\neval \"export $(egrep -z DBUS_SESSION_BUS_ADDRESS /proc/$(pgrep -u $LOGNAME gnome-session)/environ)\";\n# the actual notification\nDISPLAY=:0 notify-send \"Notify me!\"\n\nThen you add a line to your user's cronjobs via crontab as usual.\n", "\nSimple and reduced answer:\n01 * * * * export DISPLAY=:0.0 && notify-send Hey \"How are you\"\n\nIf you need Xauthority permission, here's a generalizable form using the $LOGNAME variable\n01 * * * * export DISPLAY=:0.0 && && export XAUTHORITY=/home/$LOGNAME/.Xauthority notify-send Hey \"How are you\"\n\nAs pointed out by @tripleee, there's no real need for sudo here\n", "\nSimilar to nmax above, I also solved the issue by setting DBUS_SESSION_BUS_ADDRESS environment variable.\nHowever, I am using a combination of Linux Mint 19 (xfce4) and XMonad and for some reason, I don't have the process xfce4-session running. Instead, I found that xfce4-terminal is (usually) running, which resulted in the following line in the beginning of my script:\neval \"export $(egrep -z DBUS_SESSION_BUS_ADDRESS /proc/$(pgrep -u $LOGNAME xfce4-terminal)/environ)\"\n\nThis resolved the issue for me.\n", "\nI created a /usr/bin script that uses the DISPLAY-:0.0 technique http://pastebin.com/h11p2HtN\nIt doesn't take XAUTHORITY into account.  I'll have to investigate that further.\n", "\nIf you are having issue that your notify-send script is working fine locally but it is not working with cron jobs then use this command. and replace \"saurav\" with your username.\nsudo -u saurav DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus notify-send \"Your message goes here\"\n\n", "\nIn my case, the issue was with using root user with notify-send. I realized this when I saw that sudo notify-send didn't work on the terminal but just notify-send (i.e. with current user) did.\nSo instead of editing the usual /etc/crontab which is used by root, I had a custom cron script created for  myusername. Please check my whole answer here.\n", "\nUnder Manjaro (Arch), I had to do this:\nFigure out the value of DBUS_SESSION_BUS_ADDRESS:\n$ echo $DBUS_SESSION_BUS_ADDRESS\nunix:path=/run/user/1000/bus\n\nEdit the crontab file (crontab -e):\nDBUS_SESSION_BUS_ADDRESS=\"unix:path=/run/user/1000/bus\"\n\n* * * * * /path/to/script_that_calls_notify-send.sh\n\n", "\nMay be you can try:\n\n * *   *   *   *    env DISPLAY=:0.0 sudo -u ravi /usr/bin/notify-send Hey \"How are you\"\n\n", "\nlogrotate.conf is the default configuration file, where the setup is applied to the logs which are not additionally configured in /etc/logrotate.d/ folder.\nThe best option is to set /etc/crond.daily to execute the logrotate on every hour. The logs will be rotated only if they are configured hourly or they matching size criteria otherwise the rotation will be skipped.\nYou can verify the logrotation process in /var/log/cron log file.\nAlso you have an option check /var/lib/logrotate/logrotate.status file and you can find the rotation history.\n", "\nAnother reason crontab will fail: Special handling of the % character.\nFrom the manual file:\nThe entire command portion of the line, up to a newline or a\n\"%\" character, will be executed by /bin/sh or by the shell specified\nin the SHELL variable of the cronfile.  A \"%\" character in the\ncommand, unless escaped with a backslash (\\), will be changed into\nnewline characters, and all data after the first % will be sent to\nthe command as standard input.\n\nIn my particular case, I was using date --date=\"7 days ago\" \"+%Y-%m-%d\" to produce parameters to my script, and it was failing silently.  I finally found out what was going on when I checked syslog and saw my command was truncated at the % symbol.  You need to escape it like this:\ndate --date=\"7 days ago\" \"+\\%Y-\\%m-\\%d\"\n\nSee here for more details:\nhttp://www.ducea.com/2008/11/12/using-the-character-in-crontab-entries/\n", "\nWTF?! My cronjob doesn't run?!\nHere's a checklist guide to debug not running cronjobs:\n\nIs the Cron daemon running?\n\n\nRun ps ax | grep cron and look for cron.\nDebian: service cron start or service cron restart\n\n\nIs cron working?\n\n\n* * * * * /bin/echo \"cron works\" >> /tmp/file\nSyntax correct? See below.\nYou obviously need to have write access to the file you are redirecting the output to. A unique file name in /tmp which does not currently exist should always be writable.\nProbably also add 2>&1 to include standard error as well as standard output, or separately output standard error to another file with 2>>/tmp/errors\n\n\nIs the command working standalone?\n\n\nCheck if the script has an error, by doing a dry run on the CLI\nWhen testing your command, test as the user whose crontab you are editing, which might not be your login or root\n\n\nCan cron run your job?\n\n\nCheck /var/log/cron.log or /var/log/messages for errors.\nUbuntu: grep CRON /var/log/syslog\nRedhat: /var/log/cron\n\n\nCheck permissions\n\n\nSet executable flag on the command: chmod +x /var/www/app/cron/do-stuff.php\nIf you redirect the output of your command to a file, verify you have permission to write to that file/directory\n\n\nCheck paths\n\n\nCheck she-bangs / hashbangs line\nDo not rely on environment variables like PATH, as their value will likely not be the same under cron as under an interactive session. See How to get CRON to call in the correct PATHs\n\n\nDon't suppress output while debugging\n\n\nCommonly used is this suppression: 30 1 * * * command > /dev/null 2>&1\nRe-enable the standard output or standard error message output by removing >/dev/null 2>&1 altogether; or perhaps redirect to a file in a location where you have write access: >>cron.out 2>&1 will append standard output and standard error to cron.out in the invoking user's home directory.\nIf you don't redirect output from a cron job, the daemon will try to send you any output or error messages by email. Check your inbox (maybe simply more $MAIL if you don't have a mail client). If mail is not available, maybe check for a file named dead.letter in your home directory, or system log entries saying that the output was discarded. Especially in the latter case, probably edit the job to add redirection to a file, then wait for the job to run, and examine the log file for error messages or other useful feedback.\nIf you are trying to figure out why something failed, the error messages will be visible in this file. Read it and understand it.\n\nStill not working? Yikes!\n\nRaise the cron debug level\n\n\nDebian\n\nin /etc/default/cron\nset EXTRA_OPTS=\"-L 2\"\nservice cron restart\ntail -f /var/log/syslog to see the scripts executed\n\n\nUbuntu\n\nin /etc/rsyslog.d/50-default.conf\nadd or comment out line cron.* /var/log/cron.log\nreload logger sudo /etc/init.d/rsyslog restart\nre-run cron\nopen /var/log/cron.log  and look for detailed error output\n\n\nReminder: deactivate log level, when you are done with debugging\n\n\nRun cron and check log files again\n\nCronjob Syntax\n# Minute  Hour  Day of Month      Month         Day of Week    User Command    \n# (0-59) (0-23)   (1-31)    (1-12 or Jan-Dec) (0-6 or Sun-Sat)  \n         \n    0       2       *             *                *          root /usr/bin/find\n\nThis syntax is only correct for the root user. Regular user crontab syntax doesn't have the User field (regular users aren't allowed to run code as any other user);\n# Minute  Hour  Day of Month      Month         Day of Week    Command    \n# (0-59) (0-23)   (1-31)    (1-12 or Jan-Dec) (0-6 or Sun-Sat)  \n         \n    0       2       *             *                *          /usr/bin/find\n\nCrontab Commands\n\ncrontab -l\n\nLists all the user's cron tasks.\n\n\ncrontab -e, for a specific user: crontab -e -u agentsmith\n\nStarts edit session of your crontab file.\nWhen you exit the editor, the modified crontab is installed automatically.\n\n\ncrontab -r\n\nRemoves your crontab entry from the cron spooler, but not from crontab file.\n\n\n\n", "\nFinally I found the solution. Following is the solution:-\n\nNever use relative path in python scripts to be executed via crontab.\nI did something like this instead:-\nimport os\nimport sys\nimport time, datetime\n\nCLASS_PATH = '/srv/www/live/mainapp/classes'\nSETTINGS_PATH = '/srv/www/live/foodtrade'\nsys.path.insert(0, CLASS_PATH)\nsys.path.insert(1,SETTINGS_PATH)\n\nimport other_py_files\n\nNever supress the crontab code instead use mailserver and check the mail for the user. That gives clearer insights of what is going.\n\n", "\nI want to add 2 points that I learned:\n\nCron config files put in /etc/cron.d/ should not contain a dot (.). Otherwise, it won't be read by cron.\nIf the user running your command is not in /etc/shadow. It won't be allowed to schedule cron.\n\nRefs:\n\nhttp://manpages.ubuntu.com/manpages/xenial/en/man8/cron.8.html\nhttps://help.ubuntu.com/community/CronHowto\n\n", "\nIt might also be a timezone problem.\nCron uses the local time.\nRun the command timedatectl to see the machine time and make sure that your crontab is in this same timezone.\n\nhttps://askubuntu.com/a/536489/1043751\n\n", "\nTo add another point, a file in /etc/cron.d must contain an empty new line at the end. This is likely related to the response by Luciano which specifies that:\nThe entire command portion of the line, up to a newline or a \"%\"\ncharacter, will be executed\n\n", "\nI found useful debugging information on an Ubuntu 16.04 server by running:\nsystemctl status cron.service\nIn my case I was kindly informed I had left a comment '#' off of a remark line:\nAug 18 19:12:01 is-feb19 cron[14307]: Error: bad minute; while reading /etc/crontab\nAug 18 19:12:01 is-feb19 cron[14307]: (*system*) ERROR (Syntax error, this crontab file will be ignored)\n\n", "\nI had a similar problem to the link below.\nsimilar to my problem\nmy original post\nMy Issue\nMy issue was that cron / crontab wouldn't execute my bash script.  that bash script executed a python script.\noriginal bash file\n#!/bin/bash\n\npython /home/frosty/code/test_scripts/test.py\n\npython file (test.py)\nfrom datetime import datetime\n\ndef main():\n    dt_now = datetime.now()\n    string_now = dt_now.strftime('%Y-%m-%d %H:%M:%S.%f')\n    with open('./text_file.txt', 'a') as f:\n        f.write(f'wrote at {string_now}\\n')\n\n    return None\n\nif __name__ == '__main__':\n    main()\n\nthe error I was getting\n  File \"/home/frosty/code/test_scripts/test.py\", line 7\n    string_to_write = f'wrote at {string_now}\\n'\n                                               ^\nSyntaxError: invalid syntax\n\nthis error didn't make sense because the code executed without error from the bash file and the python file.\n** Note -> ensure in the crontab -e file you don't suppress the output.  I sent the output to a file by adding >>/path/to/cron/output/file.log 2>&1 after the command.  below is my crontab -e entry\n*/5 * * * * /home/frosty/code/test_scripts/echo_message_sh >>/home/frosty/code/test_scripts/cron_out.log 2>&1\n\nthe issue\ncron was using the wrong python interpreter, probably python 2 from the syntax error.\nhow I solved the problem\nI changed my bash file to the following\n#!/bin/bash\n\nconda_shell=/home/frosty/anaconda3/etc/profile.d/conda.sh\nconda_env=base\n\nsource ${conda_shell}\nconda activate ${conda_env}\n\npython /home/frosty/code/test_scripts/test.py\n\nAnd I changed my python file to the following\nfrom datetime import datetime\n\ndef main():\n    dt_now = datetime.now()\n    string_now = dt_now.strftime('%Y-%m-%d %H:%M:%S.%f')\n    string_file = '/home/frosty/code/test_scripts/text_file.txt'\n    string_to_write = 'wrote at {}\\n'.format(string_now)\n    with open(string_file, 'a') as f:\n        f.write(string_to_write)\n\n    return None\n\nif __name__ == '__main__':\n    main()\n\n", "\nNo MTA installed, discarding output\nI had a similar problem with a PHP file executed as a CRON job.\nWhen I manually execute the file it works, but not with CRON tab.\nI got the output message: \"No MTA installed, discarding output\"\nPostfix is the default Mail Transfer Agent (MTA) in Ubuntu and can be installed it using\nsudo apt-get install postfix\n\nBut this same message can be also output when you add a log file as below and it does not have proper write permission to /path/to/logfile.log\n/path/to/php -f /path/to/script.php >> /path/to/logfile.log\n\nThe permission issue can occur if you create the cron-log file manually using a command like touch while you are logged in as a different user and you add CRONs in the tab of another user(group) like www-data using: sudo crontab -u www-data -e. Then CRON daemon tries to write to the log file and fail, then tries to send the output as an email using Ubuntu's MTA and when it's not found, outputs \"No MTA installed, discarding output\".\nTo prevent this:\n\nCreate the file with proper permission.\nAvoid creating the relevant CRON log file manually, add the log in CRON tab and let the log file get created automatically when the cron is run.\n\n", "\nAs this is becoming a canonical for troubleshooting cron issues, allow me to add one specific but rather complex issue: If you are attempting to run a GUI (or otherwise interactive) program from cron, you are probably Doing It Wrong.\nA common symptom is receiving error messages about DISPLAY being unset, or the cron job's process being unable to access the display.\nIn brief, this means that the program you are trying to run is attempting to render something on an X11 (or Wayland etc) display, and failing, because cron is not attached to a graphical environment, or in fact any kind of input/output facility at all, beyond being able to read and write files, and send email if the system is configured to allow that.\nFor the purposes of \"I'm unable to run my interactive cron job\", let's just point out in broad strokes three common scenarios for this problem.\nProbably identify the case you are trying to implement, and search for related questions about that particular scenario to learn more, and find actual solutions with actual code.\n\nIf you are trying to develop an interactive program which communicates with a user, you want to rethink your approach. A common, but nontrivial, arrangement is to split the program in two: A back-end service which can run from cron, but which does not have any user-visible interactive facilities, and a front-end client which the user runs from their GUI when they want to communicate with the back-end service.\nProbably your user client should simply be added to the user(s)' GUI startup script if it needs to be, or they want to, run automatically when they log in.\nI suppose the back-end service could be started from cron, but if it requires a GUI to be useful, maybe start it from the X11 server's startup scripts instead; and if not, probably run it from a regular startup script (systemd these days, or /etc/rc.local or a similar system startup directory more traditionally).1\n\nIf you are trying to run a GUI program without interacting with a real user 2, you may be able to set up a \"headless\" X11 server 3 and run a cron job which starts up that server, runs your job, and quits.\nProbably your job should simply run a suitable X11 server from cron (separate from any interactive X11 server which manages the actual physical display(s)  and attached graphics card(s) and keyboard(s) available to the system), and pass it a configuration which runs the client(s) you want to run once it's up and running. (See also the next point for some practical considerations.)\n\nYou are running a computer for the sole purpose of displaying a specific application in a GUI, and you want to start that application when the computer is booted.\nProbably your startup scripts should simply run the GUI (X11 or whatever) and hook into its startup script to also run the client program once the GUI is up and running.  In other words, you don't need cron here; just configure the startup scripts to run the desktop GUI, and configure the desktop GUI to run your application as part of the (presumably automatic, guest?) login sequence.4\n\n\nThere are ways to run X11 programs on the system's primary display (DISPLAY=:0.0) but doing that from a cron job is often problematic, as that display is usually reserved for actual interactive use by the first user who logs in and starts a graphical desktop. On a single-user system, you might be able to live with the side effects if that user is also you, but this tends to have inconvenient consequences and scale very poorly.\nAn additional complication is deciding which user to run the cron job as.  A shared system resource like a back-end service can and probably should be run by root (though ideally have a dedicated system account which it switches into once it has acquired access to any privileged resources it needs) but anything involving a GUI should definitely not be run as root at any point.\nA related, but distinct problem is to interact in any meaningful way with the user. If you can identify the user's active session (to the extent that this is even well-defined in the first place), how do you grab their attention without interfering with whatever else they are in the middle of? But more fundamentally, how do you even find them? If they are not logged in at all, what do you do then? If they are, how do you determine that they are active and available? If they are logged in more than once, which terminal are they using, and is it safe to interrupt that session? Similarly, if they are logged in to the GUI, they might miss a window you spring up on the local console, if they are actually logged in remotely via VNC or a remote X11 server.\nAs a further aside: On dedicated servers (web hosting services, supercomputing clusters, etc) you might even be breaking the terms of service of the hosting company or institution if you install an interactive graphical desktop you can connect to from the outside world, or even at all.\n\n1\nThe @reboot hook in cron is a convenience for regular users who don't have any other facility for running something when the system comes up, but it's just inconvenient and obscure to hide something there if you are root anyway and have complete control over the system. Use the system facilities to launch system services.\n2\nA common use case is running a web browser which needs to run a full GUI client, but which is being controlled programmatically and which doesn't really need to display anything anywhere, for example to scrape sites which use Javascript and thus require a full graphical browser to render the information you want to extract.\nAnother is poorly designed scientific or office software which was not written for batch use, and thus requires a GUI even when you just want to run a batch job and then immediately quit without any actual need to display anything anywhere.\n(In the latter case, probably review the documentation to check if there isn't a --batch or --noninteractive or --headless or --script or --eval option or similar to run the tool without the GUI, or perhaps a separate utility for noninteractive use.)\n3\nXvfb is the de facto standard solution; it runs a \"virtual framebuffer\" where the computer can spit out pixels as if to a display, but which isn't actually connected to any display hardware.\n4\nThere are several options here.\nThe absolutely simplest is to set up the system to automatically log in a specific user at startup without a password prompt, and configure that user's desktop environment (Gnome or KDE or XFCE or what have you) to run your script from its \"Startup Items\" or \"Login Actions\" or \"Autostart\" or whatever the facility might be called. If you need more control over the environment, maybe run bare X11 without a desktop environment or window manager at all, and just run your script instead. Or in some cases, maybe replace the X11 login manager (\"greeter\") with something custom built.\nThe X11 stack is quite modular, and there are several hooks in various layers where you could run a script either as part of a standard startup process, or one which completely replaces a standard layer. These things tend to differ somewhat between distros and implementations, and over time, so this answer is necessarily vague and incomplete around these matters. Again, probably try to find an existing question about how to do things for your specific platform (Ubuntu, Raspbian, Gnome, KDE, what?) and scenario. For simple scenarios, perhaps see Ubuntu - run bash script on startup with visible terminal\n", "\nI've found another reason for user's crontab not running: the hostname is not present on the hosts file:\nuser@ubuntu:~$ cat /etc/hostname\nubuntu\n\nNow the hosts file:\nuser@ubuntu:~$ cat /etc/hosts\n127.0.0.1 localhost\n\n# The following lines are desirable for IPv6 capable hosts\n::1 ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\nff02::3 ip6-allhosts\n\nThis is on a Ubuntu 14.04.3 LTS, the way to fix it is adding the hostname to the hosts file so it resembles something like this:\nuser@ubuntu:~$ cat /etc/hosts\n127.0.0.1 ubuntu localhost\n\n# The following lines are desirable for IPv6 capable hosts\n::1 ip6-localhost ip6-loopback\nfe00::0 ip6-localnet\nff00::0 ip6-mcastprefix\nff02::1 ip6-allnodes\nff02::2 ip6-allrouters\nff02::3 ip6-allhosts\n\n", "\nFor me, the solution was that the file cron was trying to run was in an encrypted directory, more specifcically a user diretory on /home/. Although the crontab was configured as root, because the script being run exisited in an encrypted user directory in /home/ cron could only read this directory when the user was actually logged in. To see if the directory is encrypted check if this directory exists:\n/home/.ecryptfs/<yourusername>\n\nif so then you have an encrypted home directory. \nThe fix for me was to move the script in to a non=encrypted directory and everythig worked fine.\n", "\nCopying my answer for a duplicated question here.\ncron may not know where to find the Python interpreter because it doesn't share your user account's environment variables.\nThere are 3 solutions to this:\n\nIf Python is at /usr/bin/python, you can change the cron job to use an absolute path: /usr/bin/python /srv/www/live/CronJobs/daily.py\n\nAlternatively you can also add a PATH value to the crontab with PATH=/usr/bin.\n\nAnother solution would be to specify an interpreter in the script file, make it executable, and call the script itself in your crontab:\na. Put shebang at the top of your python file: #!/usr/bin/python.\nb. Set it to executable: $ chmod +x /srv/www/live/CronJobs/daily.py\nc. Put it in crontab: /srv/www/live/CronJobs/daily.py\n\n\nAdjust the path to the Python interpreter if it's different on your system.\nReference\n", "\nCRON uses a different TIMEZONE\nA very  common issue is: cron time settings may is different than your. In particular, the timezone could be not be the same:\n# Notice that tasks will be started based on the cron's system\n# daemon's notion of time and timezones.\n\nYou can run:\n* * * * * echo $(date) >> /tmp/test.txt\n\nThis should generate a file like:\n# cat test.txt \nSun 03 Apr 2022 09:02:01 AM UTC\nSun 03 Apr 2022 09:03:01 AM UTC\nSun 03 Apr 2022 09:04:01 AM UTC\nSun 03 Apr 2022 09:05:01 AM UTC\nSun 03 Apr 2022 09:06:01 AM UTC\n\nIf you are using a TZ other than UTC, you can try:\ntimedatectl set-timezone America/Sao_Paulo\n\nreplace America/Sao_Paulo according to you settings.\nI'm not sure if it is actually necessary, but you can run:\nsudo systemctl restart cron.service\n\nAfter that, cron works as I expected:\n# cat test.txt \nSun 03 Apr 2022 09:02:01 AM UTC\nSun 03 Apr 2022 09:03:01 AM UTC\nSun 03 Apr 2022 09:04:01 AM UTC\nSun 03 Apr 2022 09:05:01 AM UTC\nSun 03 Apr 2022 09:06:01 AM UTC\nSun 03 Apr 2022 09:07:01 AM UTC\nSun 03 Apr 2022 09:08:01 AM UTC\nSun 03 Apr 2022 09:09:01 AM UTC\nSun 03 Apr 2022 09:10:01 AM UTC\nSun 03 Apr 2022 06:11:01 AM -03\nSun 03 Apr 2022 06:12:01 AM -03\nSun 03 Apr 2022 06:13:01 AM -03\nSun 03 Apr 2022 06:14:01 AM -03\n\n", "\nTry\nservice cron start\n\nor\nsystemctl start cron\n\nIn my case I was trying to run cron locally.\nI checked status:\nservice cron status\n\nIt showed me:\n* cron is not running\n\nThen I simply started the service:\nservice cron start\n\n", "\nIn my situation, my cronjobs were working fine until there was a power shortage that cut the power to my Raspberry Pi and Cron got corrupted. I think it was running a long Python script exactly when the shortage happened.\nThe solution was to force re-installation of cron with:\nsudo apt-get --reinstall install cron \n\n", "\nSometimes the command that cron needs to run is in a directory where cron has no access, typically on systems where users' home directories' permissions are 700 and the command is in that directory.\n", "\nI experienced same problem where crons are not running. \nWe fixed by changing permissions and owner by\nCrons made root owner as we had mentioned in crontab AND\nCronjobs 644 permission given\n", "\nFor user crontabs (including root), you can do something like:\ncrontab -l -u user | cat - filename | crontab -u user -\n\nwhere the file named \"filename\" contains items to append. You could also do text manipulation using sed or another tool in place of cat. You should use the crontab command instead of directly modifying the file.\nA similar operation would be:\n{ crontab -l -u user; echo 'crontab spec'; } | crontab -u user -\n\nIf you are modifying or creating system crontabs, those may be manipulated as you would ordinary text files. They are stored in the /etc/cron.d, /etc/cron.hourly, /etc/cron.daily, /etc/cron.weekly, /etc/cron.monthly directories and in the files /etc/crontab and /etc/anacrontab.\n", "\nHere's a one-liner that doesn't use/require the new job to be in a file:\n(crontab -l 2>/dev/null; echo \"*/5 * * * * /path/to/job -with args\") | crontab -\n\nThe 2>/dev/null is important so that you don't get the no crontab for username message that some *nixes produce if there are currently no crontab entries.\n", "\nIn Ubuntu and many other distros, you can just put a file into the /etc/cron.d directory containing a single line with a valid crontab entry. No need to add a line to an existing file.\nIf you just need something to run daily, just put a file into /etc/cron.daily. Likewise, you can also drop files into /etc/cron.hourly, /etc/cron.monthly, and /etc/cron.weekly.\n", "\nJoe Casadonte's one-liner is perfect, except if you run with set -e, i.e. if your script is set to fail on error, and if there are no cronjobs yet. In that case, the one-liner will NOT create the cronjob, but will NOT stop the script. The silent failure can be very misleading.\nThe reason is that crontab -l returns with a 1 return code, causing the subsequent command (the echo) not to be executed... thus the cronjob is not created. But since they are executed as a subprocess (because of the parenthesis) they don't stop the script.\n(Interestingly, if you run the same command again, it will work: once you have executed crontab - once, crontab -l still outputs nothing, but it doesn't return an error anymore (you don't get the no crontab for <user> message anymore). So the subsequent echo is executed and the crontab is created)\nIn any case, if you run with set -e, the line must be:\n(crontab -l 2>/dev/null || true; echo \"*/5 * * * * /path/to/job -with args\") | crontab -\n\n", "\nCrontab files are simply text files and as such can be treated like any other text file.  The purpose of the crontab command is to make editing crontab files safer.  When edited through this command, the file is checked for errors and only saved if there are none.\ncrontab [path to file] can be used to specify a crontab stored in a file.  Like crontab -e, this will only install the file if it is error free.\nTherefore, a script can either directly write cron tab files, or write them to a temporary file and load them with the crontab [path to temp file] command.  Writing directly saves having to write a temporary file, but it also avoids the safety check.\n", "\nEven more simple answer to you question would be:\necho \"0 1 * * * /root/test.sh\" | tee -a /var/spool/cron/root\n\nYou can setup cronjobs on remote servers as below:\n#!/bin/bash\nservers=\"srv1 srv2 srv3 srv4 srv5\"\nfor i in $servers\n  do\n  echo \"0 1 * * * /root/test.sh\" | ssh $i \" tee -a /var/spool/cron/root\"\ndone\n\nIn Linux, the default location of the crontab file is /var/spool/cron/. Here you can find the crontab files of all users. You just need to append your cronjob entry to the respective user's file. In the above example, the root user's crontab file is getting appended with a cronjob to run /root/test.sh every day at 1 AM.\n", "\nCron jobs usually are stored in a per-user file under /var/spool/cron\nThe simplest thing for you to do is probably just create a text file with the job configured, then copy it to the cron spool folder and make sure it has the right permissions (600).\n", "\nAs a correction to those suggesting crontab -l | crontab -: This does not work on every system. For example, I had to add a job to the root crontab on dozens of servers running an old version SUSE (don't ask why). Old SUSEs prepend comment lines to the output of crontab -l, making crontab -l | crontab - non-idempotent (Debian recognizes this problem in the crontab manpage and patched its version of Vixie Cron to change the default behaviour of crontab -l).\nTo edit crontabs programmatically on systems where crontab -l adds comments, you can try the following:\nEDITOR=cat crontab -e > old_crontab; cat old_crontab new_job | crontab -\nEDITOR=cat tells crontab to use cat as an editor (not the usual default vi), which doesn't change the file, but instead copies it to stdout. This might still fail if crontab - expects input in a format different from what crontab -e outputs. Do not try to replace the final crontab - with crontab -e - it will not work.\n", "\nWell /etc/crontab just an ascii file so the simplest is to just\n echo \"*/15 * * * *   root     date\" >> /etc/crontab\n\nwhich will add a job which will email you every 15 mins.  Adjust to taste, and test via grep or other means whether the line was already added to make your script idempotent.\nOn Ubuntu et al, you can also drop files in /etc/cron.* which is easier to do and test for---plus you don't mess with (system) config files such as /etc/crontab.\n", "\nHere is how to modify cron a entry without directly editing the cron file (which is frowned upon).\ncrontab -l -u <user> | sed 's/find/replace/g' | crontab -u <user> -\n\nIf you want to remove a cron entry, use this:\ncrontab -l -u <user> | sed '/find/d' | crontab -u <user> -\n\nI realize this is not what gaurav was asking for, but why not have all the solutions in one place?\n", "\nIt is an approach to incrementally add the cron job:\n  ssh USER_NAME@$PRODUCT_IP nohup \"echo '*/2 * * * * ping -c2 PRODUCT_NAME.com >> /var/www/html/test.html' | crontab -u USER_NAME -\"\n\n", "\nAnother solution to add multiple scripts to crontab at once:\ncat <<EOF | crontab -\n* * * * * /bin/foo.sh\n* * * * * /bin/gaga.sh\nEOF\n\n", "\nI have written a crontab deploy tool in python: https://github.com/monklof/deploycron\npip install deploycron\n\nInstall your crontab is very easy, this will merge the crontab into the system's existing crontab.\nfrom deploycron import deploycron\ndeploycron(content=\"* * * * * echo hello > /tmp/hello\")\n\n", "\nthe easiest solution is to use echo with >> and then run crontab filename\nex:\n ssh $HOST \"echo \\\"* * * * * echo hello >> /var/spool/cron/crontabs/root\\\"; sleep 2; crontab /var/spool/cron/crontabs/root\" \n\n", "\nThis would insert the cron jobs listed in my-cron-jobs.txt into the crontab, while avoiding creating duplicate entries:\n( (crontab -l 2>/dev/null || true; cat my-cron-jobs.txt) | sort -u) | crontab -\n\nMore specifically, sort -u sorts all entries in the crontab and removes any duplicate lines (including duplicate empty lines).\nSo this has the (possibly unwanted/wanted) side effect of removing any already existing duplicate lines in the crontab, and sorting the entries.\nIt builds upon previous answers by Faria, Joe Casadonte and this answer from the Unix & Linux Stack exchange.\n", "\nYou can define environment variables in the crontab itself when running crontab -e from the command line.\nLANG=nb_NO.UTF-8\nLC_ALL=nb_NO.UTF-8\n\n# m h dom mon dow   command\n* * * * *           sleep 5s && echo \"yo\"\n\nThis feature is only available to certain implementations of cron.  Ubuntu and Debian currently use vixie-cron which allows these to be declared in the crontab file (also GNU mcron).\nArchlinux and RedHat use cronie which does not allow environment variables to be declared and will throw syntax errors in the cron.log.  Workaround can be done per-entry:\n# m h dom mon dow   command\n* * * * *           export LC_ALL=nb_NO.UTF-8; sleep 5s && echo \"yo\"\n\n", "\nI got one more solution for this problem: \n0 5 * * * . $HOME/.profile; /path/to/command/to/run\n\nIn this case it will pick all the environment variable defined in your $HOME/.profile file.\nOf course $HOME is also not set, you have to replace it with the full path of your $HOME.\n", "\nSetting vars in /etc/environment also worked for me in Ubuntu. As of 12.04, variables in /etc/environment are loaded for cron.\n", "\nIf you start the scripts you are executing through cron with:\n#!/bin/bash -l\n\nThey should pick up your ~/.bash_profile environment variables\n", "\nHave 'cron' run a shell script that sets the environment before running the command.\nAlways.\n#   @(#)$Id: crontab,v 4.2 2007/09/17 02:41:00 jleffler Exp $\n#   Crontab file for Home Directory for Jonathan Leffler (JL)\n#-----------------------------------------------------------------------------\n#Min     Hour    Day     Month   Weekday Command\n#-----------------------------------------------------------------------------\n0        *       *       *       *       /usr/bin/ksh /work1/jleffler/bin/Cron/hourly\n1        1       *       *       *       /usr/bin/ksh /work1/jleffler/bin/Cron/daily\n23       1       *       *       1-5     /usr/bin/ksh /work1/jleffler/bin/Cron/weekday\n2        3       *       *       0       /usr/bin/ksh /work1/jleffler/bin/Cron/weekly\n21       3       1       *       *       /usr/bin/ksh /work1/jleffler/bin/Cron/monthly\n\nThe scripts in ~/bin/Cron are all links to a single script, 'runcron', which looks like:\n:       \"$Id: runcron.sh,v 2.1 2001/02/27 00:53:22 jleffler Exp $\"\n#\n#       Commands to be performed by Cron (no debugging options)\n\n#       Set environment -- not done by cron (usually switches HOME)\n. $HOME/.cronfile\n\nbase=`basename $0`\ncmd=${REAL_HOME:-/real/home}/bin/$base\n\nif [ ! -x $cmd ]\nthen cmd=${HOME}/bin/$base\nfi\n\nexec $cmd ${@:+\"$@\"}\n\n(Written using an older coding standard - nowadays, I'd use a shebang '#!' at the start.)\nThe '~/.cronfile' is a variation on my profile for use by cron - rigorously non-interactive and no echoing for the sake of being noisy.  You could arrange to execute the .profile and so on instead.  (The REAL_HOME stuff is an artefact of my environment - you can pretend it is the same as $HOME.)\nSo, this code reads the appropriate environment and then executes the non-Cron version of the command from my home directory.  So, for example, my 'weekday' command looks like:\n:       \"@(#)$Id: weekday.sh,v 1.10 2007/09/17 02:42:03 jleffler Exp $\"\n#\n#       Commands to be done each weekday\n\n# Update ICSCOPE\nn.updics\n\nThe 'daily' command is simpler:\n:       \"@(#)$Id: daily.sh,v 1.5 1997/06/02 22:04:21 johnl Exp $\"\n#\n#       Commands to be done daily\n\n# Nothing -- most things are done on weekdays only\n\nexit 0\n\n", "\nExpanding on @carestad example, which I find easier, is to run the script with cron and have the environment in the script.\nIn crontab -e file:\nSHELL=/bin/bash\n\n*/1 * * * * $HOME/cron_job.sh\n\nIn cron_job.sh file:\n#!/bin/bash\nsource $HOME/.bash_profile\nsome_other_cmd\n\nAny command after the source of .bash_profile will have your environment as if you logged in.\n", "\nWhatever you set in crontab will be available in the cronjobs, both directly and using the variables in the scripts.\nUse them in the definition of the cronjob\nYou can configure crontab so that it sets variables that then the can cronjob use:\n$ crontab -l\nmyvar=\"hi man\"\n* * * * * echo \"$myvar. date is $(date)\" >> /tmp/hello\n\nNow the file /tmp/hello shows things like:\n$ cat /tmp/hello \nhi man. date is Thu May 12 12:10:01 CEST 2016\nhi man. date is Thu May 12 12:11:01 CEST 2016\n\nUse them in the script run by cronjob\nYou can configure crontab so that it sets variables that then the scripts can use:\n$ crontab -l\nmyvar=\"hi man\"\n* * * * * /bin/bash /tmp/myscript.sh\n\nAnd say script /tmp/myscript.sh is like this:\necho \"Now is $(date). myvar=$myvar\" >> /tmp/myoutput.res\n\nIt generates a file /tmp/myoutput.res showing:\n$ cat /tmp/myoutput.res\nNow is Thu May 12 12:07:01 CEST 2016. myvar=hi man\nNow is Thu May 12 12:08:01 CEST 2016. myvar=hi man\n...\n\n", "\nFor me I had to set the environment variable for a php application. I resolved it by adding the following code to my crontab.\n$ sudo  crontab -e\n\ncrontab:\nENVIRONMENT_VAR=production\n\n* * * * * /home/deploy/my_app/cron/cron.doSomethingWonderful.php\n\nand inside doSomethingWonderful.php I could get the environment value with:\n<?php     \necho $_SERVER['ENVIRONMENT_VAR']; # => \"production\"\n\nI hope this helps!\n", "\nInstead of \n0  *  *  *  *  sh /my/script.sh\n\nUse bash -l -c\n0  *  *  *  *  bash -l -c 'sh /my/script.sh'\n\n", "\nYou can also prepend your command with env to inject Environment variables like so:\n0 * * * *   env VARIABLE=VALUE /usr/bin/mycommand\n\n", "\nExpanding on @Robert Brisita has just expand , also if you don't want to set up all the variables of the profile in the script,  you can select the variables to export on the top of the script\nIn crontab -e file:\nSHELL=/bin/bash\n\n*/1 * * * * /Path/to/script/script.sh\n\nIn script.sh\n#!/bin/bash\nexport JAVA_HOME=/path/to/jdk\n\nsome-other-command\n\n", "\nI'm using Oh-my-zsh in my macbook so I've tried many things to get the crontab task runs but finally, my solution was prepending the .zshrc before the command to run.\n*/30 * * * * . $HOME/.zshrc; node /path/for/my_script.js\n\nThis task runs every 30 minutes and uses .zshrc profile to execute my node command.\nDon't forget to use the dot before the $HOME var.\n", "\nI tried most of the provided solutions, but nothing worked at first. It turns out, though, that it wasn't the solutions that failed to work. Apparently, my ~/.bashrc file starts with the following block of code:\ncase $- in\n    *i*) ;;\n    *) return;;\nesac\n\nThis basically is a case statement that checks the current set of options in the current shell to determine that the shell is running interactively.\nIf the shell happens to be running interactively, then it moves on to sourcing the ~/.bashrc file.\nHowever, in a shell invoked by cron, the $- variable doesn't contain the i value which indicates interactivity.\nTherefore, the ~/.bashrc file never gets sourced fully. As a result, the environment variables never got set.\nIf this happens to be your issue, feel free to comment out the block of code as follows and try again:\n# case $- in\n#     *i*) ;;\n#     *) return;;\n# esac\n\nI hope this turns out useful\n", "\nUnfortunately, crontabs have a very limited environment variables scope, thus you need to export them every time the corntab runs.\nAn easy approach would be the following example, suppose you've your env vars in a file called env, then:\n* * * * * . ./env && /path/to_your/command\nthis part . ./env will export them and then they're used within the same scope of your command\n", "\nAnother way - inspired by this this answer - to \"inject\" variables is the following (fcron example):\n%daily 00 12 \\\n    set -a; \\\n    . /path/to/file/containing/vars; \\\n    set +a; \\\n    /path/to/script/using/vars\n\nFrom help set:\n\n-a  Mark variables which are modified or created for export.\nUsing + rather than - causes these flags to be turned off.\n\nSo everything in between set - and set + gets exported to env and is then available for other scripts, etc. Without using set the variables get sourced but live in set only.\nAside from that it's also useful to pass variables when a program requires a non-root account to run but you'd need some variables inside that other user's environment. Below is an example passing in nullmailer vars to format the e-mail header:\nsu -s /bin/bash -c \"set -a; \\\n                    . /path/to/nullmailer-vars; \\\n                    set +a; \\\n                    /usr/sbin/logcheck\" logcheck\n\n", "\nAll the above solutions work fine.\nIt will create issues when there are any special characters in your environment variable.\nI have found the solution:\neval $(printenv | awk -F= '{print \"export \" \"\\\"\"$1\"\\\"\"\"=\"\"\\\"\"$2\"\\\"\" }' >> /etc/profile)\n", "\nFor me I had to specify path in my NodeJS file.\n// did not work!!!!!\nrequire('dotenv').config()\n\ninstead\n// DID WORK!!\nrequire('dotenv').config({ path: '/full/custom/path/to/your/.env' })\n\n", "\nI found this issue while looking at a similar problem that matched the title, but I am stuck with the environment file syntax that systemd or docker use:\nFOO=bar\nBAZ=qux\n\nThis won't work for Vishal's excellent answer because they aren't bash scripts (note the lack of export).\nThe solution I've used is to read each line into xargs and export them before running the command:\n0 5 * * * export $(xargs < $HOME/.env); /path/to/command/to/run\n\n", "\n\nSet Globally env\n\nsudo sh -c \"echo MY_GLOBAL_ENV_TO_MY_CURRENT_DIR=$(pwd)\" >> /etc/environment\"\n\n\nAdd scheduled job to start a script\n\ncrontab -e\n\n  */5 * * * * sh -c \"$MY_GLOBAL_ENV_TO_MY_CURRENT_DIR/start.sh\"\n\n=)\n", "\nI ran into this problem today where I had to get following scenario working:\n\ndebian-slim image with required tools\nExpose set of ENV variables as part of k8s deployment (deplopyments.yaml)\nMake the variables available to my cron job.\n\nHow did I do it?\nContainer Spec (k8s pod):\n    spec:\n      containers:\n        - name: my-container\n          image: my-registry-host/my-image:1.1.0_DV9qfuY37AWw\n          imagePullPolicy: IfNotPresent\n          command: [\"/bin/bash\", \"-c\", \"/apps/my-awesome-app/scripts/startup.sh\"]\n          ...\n          env: \n            - name: ENV_VAR1\n              value: \"env-var1-value\"\n            - name: ENV_VAR2\n              value: \"env-var2-value\"\n            - name: ENV_VAR3\n              value: \"env-var3-value\"\n\nDockerfile\n...\nRUN crontab -l | { cat; echo \"*/15 14-19 23 * * /apps/my-awesome-app/scripts/cronsjob.sh >> cronjob-journal.log\"; } | crontab -\n...\n\n/apps/my-awesome-app/scripts/startup.sh listing\nENV_VAR1, ENV_VAR2, ENV_VAR3 are exposed to the pod (as shown above):\n...\n#Make all the environment variables available to crontab shell(s)\ncrontab -l | { echo \"ENV_VAR1=${ENV_VAR1}\";cat; } | crontab -\ncrontab -l | { echo \"ENV_VAR2=${ENV_VAR2}\";cat; } | crontab -\ncrontab -l | { echo \"ENV_VAR3=${ENV_VAR3}\";cat; } | crontab -\n...\n# Other startup commands/scripts\n...\n\nValidation/Verification\n1) kubectl exec -i -t <podname> -n <namespace> -- bash\n\n2) execute `crontab -l`\n\n3) Verify the following listing\n\nENV_VAR1=env-var1-value\nENV_VAR2=env-var2-value\nENV_VAR3=env-var3-value\n*/15 14-19 23 * * /apps/my-awesome-app/scripts/cronsjob.sh >> cronjob-journal.log\n\nNow all 3 of your environment variables are available to /apps/my-awesome-app/scripts/cronsjob.sh when cron scheduler invokes it.\n", "\nThe simplest thing is to have your program (written in any language) touch a specific file (i.e. create it without writing anything to it) every time it succeeds at doing its task.  Then you can have a monitoring program check the existence of the file and how recent its timestamp is.  Monit can do this easily, or you can write a shell script that does it in a cron job.\n", "\nIf you are on linux / unix variants then you can use 'ps' command in a loop in a script to monitor whether your program is still running or not. You can use the -C option of ps.\nAnother method would be to write a new C program and then this C program should fork a child process which will run your original C program and then in the parent you can call wait(). wait() will return when the child process has exited. So, you will know when the child process has exited and then you can take appropriate action(s).\n", "\nAnswer\nModify your Tuesday cron logic to execute every other week since the epoch.\nKnowing that there are 604800 seconds in a week (ignoring DST changes and leap seconds, thank you), and using GNU date:\n0 6 * * Tue expr `date +\\%s` / 604800 \\% 2 >/dev/null || /scripts/fortnightly.sh\n\nAside\nCalendar arithmetic is frustrating.\n@xahtep's answer is terrific but, as @Doppelganger noted in comments, it will fail on certain year boundaries.  None of the date utility's \"week of year\" specifiers can help here.  Some Tuesday in early January will inevitably repeat the week parity of the final Tuesday in the preceding year:  2016-01-05 (%V), 2018-01-02 (%U), and 2019-01-01 (%W).\n", "\nHow about this, it does keep it in the crontab even if it isn't exactly defined in the first five fields:\n0 6 * * Tue expr `date +\\%W` \\% 2 > /dev/null || /scripts/fortnightly.sh\n\n", "\nMaybe a little dumb, but one could also create two cronjobs, one for every first tuesday and one for every third.\nFirst cronjob:\n0 0 8 ? 1/1 TUE#1 *\n\nSecond cronjob:\n0 0 8 ? 1/1 TUE#3 *\n\nNot sure about the syntax here, I used http://www.cronmaker.com/ to make these.\n", "\nSomething like\n0 0 1-7,15-21 * 2\n\nWould hit the first and third Tuesday of the month.\nNote: Don't use this with vixie cron (included in RedHat and SLES distros), as it makes an or between the day-of-month and day-of-week fields instead of an and.\n", "\npilcrow's answer is great.  However, it results in the fortnightly.sh script running every even week (since the epoch).  If you need the script to run on odd weeks, you can tweak his answer a little:\n0 6 * * Tue expr \\( `date +\\%s` / 604800 + 1 \\) \\% 2 > /dev/null || /scripts/fortnightly.sh\n\nChanging the 1 to a 0 will move it back to even weeks.\n", "\nIf you want to do it based on a given start date:\n0 6 * * 1 expr \\( `date +\\%s` / 86400 - `date --date='2018-03-19' +\\%s` / 86400 \\) \\% 14 == 0 > /dev/null && /scripts/fortnightly.sh\n\nShould fire every other Monday beginning with 2018-03-19\nExpression reads: Run at 6am on Mondays if ...\n1 - Get today's date, in seconds, divided by the number of seconds in a day to convert to days sice epoch\n2 - Do the same for the starting date, converting it to the number of days since epoch\n3 - Get the difference between the two\n4 - divide by 14 and check the remainder\n5- If the remainder is zero you are on the two-week cycle\n", "\nI discovered some additional limitations of above approaches that can fail in some edge cases. For instance, consider:\n\n@xahtep and @Doppelganger discussed issues using %W on certain year boundaries above.\n@pilcrow's answer gets around this to some degree, however it too will fail on certain boundaries. Answers in this and or other related topics use the number of seconds in a day (vs. week), which also fail on certain boundaries for the same reasons.\n\nThis is because these approaches rely on UTC time (date +%s). Consider a case where we're running a job at 1am and 10pm every 2nd Tuesday.\nSuppose GMT-2:\n\n1am local time = 11pm UTC yesterday\n10pm local time = 8pm UTC today\n\nIf we are only checking a single time each day, this will not be an issue, but if we are checking multiple times -- or if we are close to UTC time and daylight savings occurs, the script wouldn't consider these to be the same day.\nTo get around this, we need to calculate an offset from UTC based on our local timezone not UTC. I couldn't find a simple way to do this in BASH, so I developed a solution that uses a quick one liner in Perl to compute the offset from UTC in seconds.\nThis script takes advantage of date +%z, which outputs the local timezone.\nBash script:\nTZ_OFFSET=$( date +%z | perl -ne '$_ =~ /([+-])(\\d{2})(\\d{2})/; print eval($1.\"60**2\") * ($2 + $3/60);' )\nDAY_PARITY=$(( ( `date +%s` + ${TZ_OFFSET} ) / 86400 % 2 ))\n\nthen, to determine whether the day is even or odd:\nif [ ${DAY_PARITY} -eq 1 ]; then\n...\nelse\n...\nfi\n\n", "\nThere are many good answers here. Based upon the comments, I see quite a bit of confusion and frustration. My intention with this answer is to not only answer the OPs question How to instruct cron to execute a job every second week?, but also clear up some confusion for folks who may read this in the future.\nTL;DR:\nThe crontab entry look like this:\n\\<minute\\> \\<hour\\> * * \\<Day of Week\\> expr \\\\( $( date+\\\\%s ) \\\\/ 604800 \\\\% 2 \\\\) > /dev/null && \\<command to run on odd weeks\\> || \\<command to run on even weeks\\>\n\nCrontab Entries:\nAll crontab entries [made with crontab -e] have this format, per the man page:\n1: The Minute of the hour to execute [command]\nRange: 0-59\n2: The Hour of the Day to execute [command]\nRange: 0-23\n3: The Day of the Month to execute [command]\nRange: 1-31\n4: The Month to execute [command]\nRange: 1-12\n5: The Day of Week to execute [command]\nRange: Check your man page, could be 0-6, 1-7 or 0-7\n6: command to execute\nNote, there are also @ values, which I will not discuss here.\nSome versions of *nix allow for expressions:\n*/2 = every even number in range\n1 + */2 = every odd number in range\n1,15 = First & 15th\n2-8 = Second through the Eighth (inclusive)\nSome versions allow for the Human Readable words also, such as February or Wednesday.\nFor Month, */2 will execute on Feb, Apr, Jun, Aug, Oct, Dec.\nFor Days of Week, */2 will run every even day -- check your man page to see how the Days of Week are numbered. Tue/2 is NOT a valid expression.\nHuman Readable (Calendar) Woes\nSome constants you need to know:\nThere are 365.2464 days in a year (For convenience, we'll round to 365).\nThere are 12 months in a year.\nThere are 7 days in a week.\nThere 86,400 seconds in a day.\nTherefore,\n1 month is 4-1/3 weeks\n[i.e. 3 months is 13 weeks]\n1 year is 52-1/7 weeks\nThe bane of calendar math:\nSemi-Monthly = every half month = 2x/month = 24 times per year.\nBi-weekly = every other week (fortnightly) = 26 times per year.\nNote: These terms are often mis-used.\nSome years have 51 weeks, some have 53, most have 52. If My cron runs every odd week ( date +%W mod 2), and the year has 51 or 53 weeks, it will also run the following week, which is week 1 of the new year. Conversely, if my cron runs every even week, it will skip 2 weeks. Not what I want.\nCRON can support semi-monthly, it cannot support bi-weekly!\nSemi-monthly:\nThe first of the month will always fall between the 1st & 7th. The second half of the week will always occur between the 15th and the 21st.\nSemi-monthly would have 2 values, one in the first half and the other in the second half of the month. Such as:\n2,16\nUnix Time\nAt a very high level, *nix time is 2 values:\ndate +%s = Number of Seconds since Epoch (01/01/1970 00:00:00)\ndate +%N = fractional seconds (in Nano seconds)\nTherefore, time in *nix is date +%s.%N\n*Nix uses epoch time. The /etc/shadow file contains the date of last password change. It is the integer portion of %s divided by 86,400.\nFactino\nThe GPS satellites measure time as \"Number of weeks since epoch time\" and \"(fractional) seconds into the week.\nNote: Epoch weeks are independent of years. It does not matter if the year has 51, 52, or 53 weeks. Epoch weeks never roll over.\nBi-Weekly Time Algorithm\nIn *Nix date +%W is week number of the year, not epoch week. *nix does not have an epoch week value, but it can be computed.\nEpoch Week = Integer( Epoch Seconds / Seconds_per_Day / Days_per_Week )\nFortnightly = Epoch_Week Modulo 2\nThe Fortnightly value will always be 0 or 1, thus, running the command when Fortnightly = 0 runs on every even week, and 1 = every odd week.\nComputing Fortnightly)\nThe first way (bc):\ndate +\"%s / 604800 % 2\" | bc\nThis will generate \"[Epoch Seconds] / 604800 % 2\"\nThat answer is then sent to bc, a basic calculator, which does the math and echoes the answer to STDOUT and any errors to STDERR.\nThe return code is 0.\nThe second way (expr):\nIn this case, send the expression to expr and let it do the math\nexpr $( date +%s ) / 604800 % 2\nThe expr command does the math, echoes the answer to STDOUT, errors to STDERR.\nThe return code is 1 if the answer is 0, otherwise, the return code is 0.\nIn this manner, I don't care what the answer is, only the return code. Consider this:\n$ expr 1 % 2 && echo Odd || echo Even\n1\nOdd \n$ expr 2 % 2 && echo Odd || echo Even \n0 \nEven\n\nSince the result doesn't matter, I can re-direct STDOUT to /dev/null. In this case, I'll leave STDERR incase something unexpected happens, I'll see the error message.\nCrontab Entry\nIn crontab, the percent sign and the parenthesis have special meanings, so they need to be escaped with a backslash (\\).\nFirst, I need to decide if I want to run on Even weeks or odd weeks. Or, perhaps, run Command_O on Odd weeks and command_E on even weeks. Then, I need to escape all the special characters.\nSince the expr only evaluates WEEKS, it is necessary to specify a particular day of the week (and time) to evaluate, such as every Tuesday at 3:15pm. Thus, the first 5 files (the Time Entry) of my crontab entry will be:\n15 3 * * TUE\nThe first part of my cron command will be the expr command, with STDOUT sent to null:\nexpr \\\\( $( date+\\\\%s ) \\\\/ 604800 \\\\% 2 \\\\) > /dev/null\n\nThe second part will be the evaluator, && or ||\nThe Third part will be the command (or script) I want to run. Which looks like this:\nexpr \\\\( $( date+\\\\%s ) \\\\/ 604800 \\\\% 2 \\\\) > /dev/null && \\<command_O\\> || \\<command_E\\>\n\nHopefully, that will clarify some of the confusion\n", "\nTry this\n0 0 1-7,15-21 * 2\n\nThis is run 2 times a month, both on Tuesdays and at least a week apart.\n", "\n30 4 */2 * 1\n4:30 in the morning every 2nd day of a month if it's Monday\n", "\nIf you want every tuesday of second week only:\n00 06 * * 2#2\n", "\nCron provides an 'every other' syntax \"/2\". Just follow the appropriate time unit field with \"/2\" and it will execute the cronjob 'every other time'. In your case...\n0 6 * * Tue/2\n\nThe above should execute every other Tuesday.\n", "\nSyntax \"/2\" is not goes along with weekday.  So my added to the smart above is simply use 1,15 on MonthDay filed.\n0     6     1,15      *      *        /scripts/fornightly.sh > /dev/null 2>&1\n", "\nWhy not something like\n0 0 1-7,15-21,29-31 * 5\n\nIs that appropriate? \n", "\nAs there is no field for the week number in the crontab format, it's not possible to schedule a cron to schedule on odd week numbers (or even).  The solution needs to execute the cronjob weekly and determine before calling the job if the week is odd or even, this is done below.\nFirst we prepare a cron job to execute every friday of the year at 03:00 (you can select another time :) )\n0 3 * * 5 my_weekly_cron\n\nand inside my_weekly_cron (at the beginning) you include the following:\n# this will make the job to exit if the week number is even.\n[ $(expr $(date '+%W') % 2) = 0 ] && exit\n\nto execute you cronjob in odd numbered weeks.\nOr\n# this will make the job to exit if the week number is odd.\n[ $(expr $(date '+%W') % 2) = 0 ] || exit\n\nto execute your cronjob in even numbered weeks.\nYou can also do the following (include your test in the crontab entry, so you don't have to touch the cron script itself)\n# this will execute the crontab if the week is even\n0 3 * * 5 [ $(expr $(date '+%W') % 2) = 0 ] && my_biweekly_cron\n\nwill execute my_biweekly_cron in even weeks, while\n# this will execute the crontab if the week is odd\n0 3 * * 5 [ $(expr $(date '+%W') % 2) = 0 ] || my_biweekly_cron\n\nwill execute it in odd weeks.\nExplanation\n\n[ is the test(1) command.  Allows boolean tests in shell scripts. It is used to test if the division of the week number by two results in 0 as remainder.\nexpr(1) allows to calcualte an expresion like checking the result of the week number modulo 2 (modulo operator is % symbol)  It calculates the week number and divides it by two, taking the remainder as output.\n'+%W' is the format string for date(1) command to print the week number only in the date output.  This is the source for the week number.\n\n", "\nI had this same issue and none of the above fixed the problem. Moving the extra return in the file fixed the issue for me:\ncat logfile | tr -d \\\\r | mailx -s'the logfile' to-me@.....\n\nThanks to this forum:\nhttps://forums.opensuse.org/showthread.php/445955-mailx-creates-unwanted-attachment\n", "\nRan into the same problem myself, only I'm piping text output into mailx - Heirloom mailx 12.4 7/29/08\nWhen running the script on the command line the email came out as normal email with a text body.\nHowever, when I ran the exact same script via crontab the body of the email came as an attachment - ATT00001.BIN (Outlook), application/octet-stream (mutt) or \"noname\" (Gmail).\nTook some research to figure this out, but here goes:\nProblem\nMailx will, if it encounters unknown / control characters in text input, convert it into an attachment with application/octet-stream mime-type set.\nFrom the man page:\n\nfor any file that contains formatting characters other than newlines and horizontal tabulators\n\nSo you need to remove those control characters, which can be done with i.e. tr\necho \"$Output\" | /usr/bin/tr -cd '\\11\\12\\15\\40-\\176' | mail ...\n\nHowever since I had Norwegian UTF8 characters: \u00e6\u00f8\u00e5 - the list expand, and you don't really want to maintain such a list, and I need the norwegian characters.\nAnd inspecting the attachment I found I had only \\r, \\n the \"regular\" ASCII characters in range 32-176 - all printable and 184 and 195 --> UTF8\nSollution\nExplicitly set the locale in your script:\nLANG=\"en_US.UTF8\" ; export LANG\n\nRun export in your shell - or setenv if you run csh or tcsh to determine what your locale is set to.\nExplanation\nMailx - when run in your shell - with LANG set to .UTF8, will correctly identify the UTF8 chars and continue.\nWhen run in crontab LANG is not set, and default to LANG=C, since by default crontab will run only a restricted set of environment variables (system dependant).\nmailx (or other programs) will then not recognize UTF8 characters and determine that the input containes unknown control characters.\nMy issue was UTF8 characters, yours could be other control characters in your input. Run it through hexdump or od -c, but since it works OK in a regular shell I'm suspecting LANG issues.\nReferences:\n\nlinux mail < file.log has Content-Type: application/octet-stream (a noname attachment in Gmail)\nhttp://alvinalexander.com/blog/post/linux-unix/how-remove-non-printable-ascii-characters-file-unix\n\n", "\nMake sure you change this in your script\n#/bin/sh\n\nto be replaced by\n#!/bin/sh\n\nComing to the problem\nYour script assumes that it is being run from a particular directory (note that almost every path is a relative path, not an absolute path). cron happens to be running it from another directory.\nThe Fix for text appearing on email\nmydir=$(dirname \"$0\") && cd \"${mydir}\" || exit 1\n./opt/bin/analysis.sh > test \nmail -s \"Today's Weather\" [email\u00a0protected] < /opt/bin/test\n\nExplanation\n$0 is the (possibly relative) filename of the shell script being executed. Given a filename, the dirname command returns the directory containing the filename. \nSo, that line changes directories to the directory containing the script or exits with an error code if either dirname or cd fails.\nOR try to have full path like\n./opt/bin/analysis.sh > test \nmail -s \"Today's Weather\" [email\u00a0protected] < /opt/bin/test\n\nNote: The same problem is discussed earlier here\nFOLLOW UP:\nTry to remove \nsh -x /opt/bin/exec.sh >> /opt/bin/mailerror 2>&1 \nand instead use \nsh  /opt/bin/exec.sh 2>&1 >> /opt/bin/mailerror\nFOLLOW UP\nYou have to restart cron for changes to take effect if you do not use the crontab command to edit the file.\ncrontab -l > oldcrontab\ncp oldcrontab newcrontab\necho \"$newline\" >> newcrontab\ncrontab < newcrontab\n\n", "\nIn my case, the cron was not a shell script but a PHP script (so I couldn't put the export LANG thing):\n0 9 * * * apache php /test/myscript.php | mail -s \"CRON - myscript\" [email\u00a0protected]\n\n\nSolution:\nIn order to fix the same issue (content is mailed as attachment instead of body), I add LANG=fr_FR.UTF-8 at the beginning of the cron file:\nMAILTO=vme1.etc-crond-backoffice-conf\nSHELL=/bin/bash\nPATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin\nLANG=fr_FR.UTF-8\n\n0 9 * * * apache php /test/myscript.php | mail -s \"CRON - myscript\" [email\u00a0protected]\n\nNB: puting LANG=fr_FR.UTF-8 in the /etc/environment file and restarting cron service worked too.\n\nReference:\n\nSet LANG in crontab https://www.logikdev.com/2010/02/02/locale-settings-for-your-cron-job/\n\n", "\nOP's solution has a bug, it might allow entries to be added twice, use below to fix.\n(crontab -l ; echo \"0 * * * * your_command\") | sort - | uniq - | crontab -\n\n", "\nThe best way if you're running as root, is to drop a file into /etc/cron.d\nif you use a package manager to package your software, you can simply lay down files in that directory and they are interpreted as if they were crontabs, but with an extra field for the username, e.g.:\nFilename: /etc/cron.d/per_minute\nContent:\n* * * * * root /bin/sh /home/root/script.sh\n", "\nTo Add something to cron\n(crontab -l ; echo \"0 * * * * hupChannel.sh\") 2>&1 | grep -v \"no crontab\" | sort | uniq | crontab -\n\nTo remove this from cron\n(crontab -l ; echo \"0 * * * * hupChannel.sh\") 2>&1 | grep -v \"no crontab\" | grep -v hupChannel.sh |  sort | uniq | crontab -\n\nhope would help someone\n", "\nMost of the solutions here are for adding lines to the crontab. If you need more control, you'll want to be able to control the entire contents of the crontab.\nYou can use piping to do this pretty elegantly.\nTo completely rewrite the crontab, do\necho \"2 2 2 2 2 /bin/echo foobar\" |crontab -\n\nThis should be easy to combine with other answers described here like\ncrontab -l | <something> | tee |crontab -\n\nOr, if you have the contents in a file, it is even simpler\ncat <file> |crontab -\n\n", "\nIf you're planning on doing it for a run-once scenario for just wget'ing something, take a look at 'at'\n", "\nAssuming that there is already an entry in your crontab, the following command should work relatively well. Note that the $CMD variable is only there for readability. Sorting before filtering duplicates is important, because uniq only works on adjacent lines.\nCMD='wget -O - -q http://www.example.com/cron.php\"'\n(crontab -l ; echo \"0 * * * * $CMD\") | sort | uniq | crontab -\n\nIf you currently have an empty crontab, you will receive the following error to stderr:\nno crontab for user\n\nIf you want to avoid this, you can add a little bit of complexity add do something like this:\n(crontab -l ; echo \"0 * * * * $CMD\") 2>&1 | sed \"s/no crontab for $(whoami)//\"  | sort | uniq | crontab -\n\n", "\nSimply change the editor to tee command:\nexport EDITOR=\"tee\"\necho \"0 * * * * /bin/echo 'Hello World'\" | crontab -e\n\n", "\nHere's another one-liner way, that avoids duplicates\n(crontab -l 2>/dev/null | fgrep -v \"*/1 *  *  *  * your_command\"; echo \"*/1 *  *  *  * your_command\") | crontab -\n\nAnd here's a way to do JohnZ's answer and avoid no crontab for user message, or if you need to operate in a set -eu type environment and can't have anything return a failure (in which case the 2>/dev/null part is optional):\n( (crontab -l 2>/dev/null || echo \"\")  ; echo \"0 * * * * your_command\") | sort -u - | crontab -\n\nOr if you want to split things up so that they're more readable:\nnew_job=\"0 * * * * your_command\"\npreceding_cron_jobs=$(crontab -l || echo \"\")\n(echo \"$preceding_cron_jobs\" ; echo \"$new_job\") | sort - | uniq - | crontab -\n\nOr optionally remove any references to your_command (ex: if the schedule has changed, you only want it ever cron'ed once).  In this case we no longer need uniq (added bonus, insertion order is also preserved):\nnew_job=\"0 * * * * your_command\"\npreceding_cron_jobs=$(crontab -l || echo \"\")\npreceding_cron_jobs=$(echo \"$preceding_cron_jobs\" | grep -v your_command )\n(echo \"$preceding_cron_jobs\" ; echo \"$new_job\") | crontab -\n\n", "\nman crontab is also useful:\nCRONTAB(1)   \nNAME\n   crontab - manipulate per-user crontabs (Dillon's Cron)\n\nSYNOPSIS\n   crontab file [-u user] - replace crontab from file\n\n   crontab - [-u user] - replace crontab from stdin\n\n   crontab -l [user] - list crontab for user\n\n", "\nfunction cronjob_exists($command){\n\n    $cronjob_exists=false;\n\n    exec('crontab -l', $crontab);\n\n\n    if(isset($crontab)&&is_array($crontab)){\n\n        $crontab = array_flip($crontab);\n\n        if(isset($crontab[$command])){\n\n            $cronjob_exists=true;\n\n        }\n\n    }\n    return $cronjob_exists;\n}\n\nfunction append_cronjob($command){\n\n    if(is_string($command)&&!empty($command)&&cronjob_exists($command)===FALSE){\n\n        //add job to crontab\n        exec('echo -e \"`crontab -l`\\n'.$command.'\" | crontab -', $output);\n\n\n    }\n\n    return $output;\n}\n\n    append_cronjob('* * * * * curl -s http://localhost/cron/test.php');\n\n", "\nAdding to JohnZ's answer, here's the syntax to schedule as root if you are a sudoer:\n(sudo crontab -l ; echo \"0 * * * * your_command\") | sort - | uniq - | sudo crontab -\n\n", "\nThis would check to ensure that your command doesn't already exist before adding it.\ncrontab -l 2>/dev/null | grep -q '/path/to/script' || echo \"5 * * * * /path/to/script\" | crontab -\n\nCheers.\n", "\nBetter way is to use Ansible playbook with the following task:\n---\n- name: Deploy cron\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Update Cron job\n      ansible.builtin.cron:\n        name: Run Drupal Cron Job\n        user: www-data\n        minute: \"0\"\n        job: \"/var/www/html/drupal/vendor/bin/drush core:cron\"\n\nThe above solution uses drush core:cron, since recent Drupal's cron calls require keys (which had to be extracted then hardcoded).\nSee: Configuring cron jobs using the cron command.\nThen use ansible-playbook -i hosts deploy.yml to run it, where hosts file is:\necho \"[all]\\n\\192.168.0.123   ansible_connection=ssh    ansible_user=root\" > hosts\n\nwhere 192.168.0.123 is your host to deploy.\nYou can use it as part of your deploy scripts or put it in your Jenkinsfile as part of your deploy pipeline.\n", "\nalso you can add your tasks to /etc/cron.*/\n", "\nPiping stdout into crontab didn't install the new crontab for me on macOS, so I found this solution instead, using the tee editor in a sub shell:\n(EDITOR=tee && (crontab -l ; echo \"@daily ~/my-script.sh\" ) | uniq - | crontab -e)\n\n", "\nIf you want the task to run as a user:\ncrontab -l | { cat; echo \"@weekly what_you_want_to_execute\"; } | crontab -\n\nIf you want the task to run with privileges:\nsudo crontab -l | { cat; echo \"@weekly what_you_want_to_execute\"; } | sudo crontab -\n\nand check task (with or without 'sudo'):\ncrontab -l | sed '/^$/d; /#/d'\n\n", "\nBelow is what I use in my script\n1.\n(2>/dev/null crontab -l ; echo \"0 3 * * * /usr/local/bin/certbot-auto renew\") | crontab -\n\n\n\n\ncat <(crontab -l 2>/dev/null) <(echo \"0 3 * * * /usr/local/bin/certbot-auto renew\") | crontab -\n\n\n\n\n#write out current crontab\ncrontab -l > mycron 2>/dev/null\n\n#echo new cron into cron file\necho \"0 3 * * * /usr/local/bin/certbot-auto renew\" >> mycron\n\n#install new cron file\ncrontab mycron\n\nrm mycron\n\n", "\nTo have flexibility when changing the command in the future you can do this (works best with an update script)\nMARK=SOME_UNIQUE_MARK_TEXT\nLINE=\"This is the command # $MARK\"\n# NOTE: I'm using -e because I might want to avoid weird bash expansions for '*' or '$' and place:\n# \\x2A instead of *\n# \\x24 instead of $\n( crontab -l | grep -v $MARK ; echo -e \"0 * * * *\" $LINE ) | crontab -\n\nIn this way I can update an old crontab command which no longer serves current purpose.\nBasically I get the current crontab, I eliminate the line containing the MARK (grep -v) and replace it with the new one by appending it at the end of the crontab file via echo -e. In this particular case I want it executed every hour at minute 0 0 * * * * as it can be seen from here.\n", "\nI'm adding a solutions similar to @JohnZ's that does not add duplicates while still preserving the existing order of crontab. We have quite a few jobs that are heavily commented and we need to preserve that structure.\n$ { \\\n    crontab -l; \\\n    echo \"*/1  * * * *   echo job one\"  &>/dev/null; \\\n    echo \"*/30 * * * *   echo job two\"  &>/dev/null; \\\n  } | awk '(/^#/ || !a[$0]++)' | crontab -\n\n", "\nYou could also edit the cron table text file directly, but your solution seems perfectly acceptable.\n", "\nYou can pipe output of a cronjob to a logfile, and you can use unix tools (tail, watch, etc) to view all the output as it goes, e.g. the following redirects STDERR as well as STDOUT to a log file:-\n/usr/bin/really_long_script.sh > /tmp/script.log 2>&1\n\ntail -f /tmp/script.log\n\n", "\nThe easiest (though sligtly dirty) way to do this, is to set an environment variable in crontab:\n* * * * * THIS_IS_A_CRON=1 /path/to/script\n\nThen, to see if they're running on your machine:\nps auxe | grep THIS_IS_A_CRON\n\nThat'll list all proces (if any) that were started with the THIS_IS_A_CRON environment variable\nIf all you're after is a window where you can see the output of the script while it's running, it's really nothing too different from having:\n* * * * * /path/to/script 2>&1 >> /random/output/file.txt\n\nAnd opening a terminal that tails the file:\ntail -100f /random/output/file.txt\n\n", "\nIf the script is generating output, that you would like to monitor, let it log this and use tail -f on the log. \nUsing screen for this is overkill.\n", "\nI would also like to see if any of my cron job is running at the moment?\nps aux |grep \"path/exec.sh\"\n\nwhat time my cron job ran ? \nCron log only show when start task off crond, not log when end. You need put this on your task or embedded your task en one scritp with control time of start and end.\nif it has already run ? \ncat /path/logs/messages or /path/logs/file when your system put logs of crond (this depends on your distribution settings or your computer)\n", "\nto check if cron is actually running anything at this moment in time (works on ubuntu)\npstree -apl `pidof cron`\n\nand you'll either get\n2775,cron # your pid (2775) will be different to mine :-)\n\nor a tree output with all the child processes that cron is running (it may not name them if you don't have sufficient privileges)\nand as Hamoriz says the logs are in /var/log/syslog so\ngrep CRON /var/log/syslog\n\nwill get you the logs just for cron\n", "\nyou can display all active cron jobs using\ncrontab -l\n\nTo vie cron job history, you can show logs by-\ngrep CRON /var/log/syslog\n\nYou can find cron daemon is running or not by-\npgrep cron\n\nor all about cron status by-\nsystemctl status cron\n\n", "\nIf you are just interested in knowing if your cronjob is currently running and when it last started, then I find the following the easiest way:\n0 0 * * * touch /path/cron.start;  /path/exec.sh; touch /path/cron.end\n\nThis will create a file /path/cron.start with a timestamp which is the start time. When the job finishes, the file /path/cron.end will have the timestamp when the cron finished. So a simple ls -lrt /path/cron.{start,end} will tell you when the job started and if it is still running (the order will tell you if it is still running).\n", "\nI think you can only check your processes or monitor /var/log/cron\nupdate: on ubuntu the logs are in /var/log/syslog\n"], "rejected": ["\nI'm not sure what you are trying to do with ESCAPED_WHATIF_POLLING_SCHEDULER=\\\"${WHATIF_POLLING_SCHEDULER}\\\".\nNote that java -Dwhatif.polling.scheduler=\"0 * * ? * *\" -jar \"$MY_JAR\" does not really contain quotes in the value of the parameter. The quotes are part of the shell syntax.\nThe following commands are 100% identical from the viewpoint of the shell:\n\njava \"-Dwhatif.polling.scheduler=0 * * ? * *\" -jar \"$MY_JAR\"\njava -D\"whatif.polling.scheduler\"=\"0 * * ? * *\" -jar \"$MY_JAR\"\njava -D\"whatif.polling.scheduler=0 * * ? * *\" -jar \"$MY_JAR\"\njava -Dwhatif.polling.scheduler=0\" \"\"*\"\" \"\"*\"\" \"\"?\"\" \"\"*\"\" \"*\" -jar \"$MY_JAR\"\njava -Dwhatif.polling.scheduler=0\\ \\*\\ \\*\\ \\?\\ \\*\\ \\* -jar \"$MY_JAR\"\njava -Dwhatif.polling.scheduler='0 * * ? * *' -jar \"$MY_JAR\"\njava -Dwhatif.polling.\"scheduler=0 * * ? * *\" -jar \"$MY_JAR\"\n\nSo the command that you executed is equivalent to:\njava -Dwhatif.polling.scheduler='\"0 * * ? * *\"' -jar \"$MY_JAR\"\n\nYou actually want to run:\nWHATIF_POLLING_SCHEDULER='0 * * ? * *'\njava -Dwhatif.polling.scheduler=\"$WHATIF_POLLING_SCHEDULER\" -jar \"$MY_JAR\"\n\nor maybe:\nWHATIF_POLLING_SCHEDULER='0 * * ? * *'\nCRON1=\"-Dwhatif.polling.scheduler=$WHATIF_POLLING_SCHEDULER\"\njava \"$CRON1\" -jar \"$MY_JAR\"\n\nThere's no need to embed quotes in your value, because the quotes are not actually part of the value.\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nTry this when you call notify-send in your script:\necho \"PASSWORD\" | sudo -u USER notify-send \"your alert message\"\n", "\nlogrotate must be run by cron. On Ubuntu 18.04 cron runs logrotate daily, see /etc/crontab and /etc/cron.daily. You can also run it manually.\nGlobal weekly is the default, /etc/logrotate.d/mongodb overrides it with daily.\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nAlthough answer has been accepted for this question, I will like to add what worked for me.\nit's a good idea to quote the URL, if it contains a query it may not work without everything being quoted.\nDONT FORGET TO PUT YOUR URL WHICH CONTAINS \"?, =, #, %\" IN A QUOTE.\nExample.\nhttps://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\nshould be in a quote like so\n\"https://paystack.com/indexphp?docs/api/#transaction-charge-authorization&date=today\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nSimply crontab -l < \"your-file-path\"\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nwhat worked for me (debian based):\n\ncreate a file with all the needed env var :\n#!/bin/bash \nenv | grep VAR1= > /etc/environment \nenv | grep VAR2= >> /etc/environment \nenv | grep VAR3= >> /etc/environment \n\nthen build the crontab content, by calling the env file before calling the script that needs it, therefore start the cron service\n(crontab -l ; echo '* * * * * . /etc/environment; /usr/local/bin/python /mycode.py >> /var/log/cron-1.log 2>&1') | crontab\nservice cron start\n\n\nnb : for python use case, be sure to call the whole python path, else wrong python could be invocated, generating non-sense syntax error\n", "\nAs a simple variant, use a watchdog. The program on regular intervals writes to a well-specified file. If the file haven't been updated in a long enough time, the program is unresponsive, and you should kill and restart it.\nWith that said, the best solution is of course to fix the problems that cause the crashes or unresponsiveness. You should have enough logging to be able to pinpoint exactly when and where things go wrong. And perhaps make sure there's a coredump available for crashes, so you can debug it.\n", "\nAs a simple variant, use a watchdog. The program on regular intervals writes to a well-specified file. If the file haven't been updated in a long enough time, the program is unresponsive, and you should kill and restart it.\nWith that said, the best solution is of course to fix the problems that cause the crashes or unresponsiveness. You should have enough logging to be able to pinpoint exactly when and where things go wrong. And perhaps make sure there's a coredump available for crashes, so you can debug it.\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\n0 0 */14 * *\nRuns At 00:00 on every 14th day-of-month\n", "\nI think you meant this for odd example:   = 1 not 0\n# this will execute the crontab if the week is odd\n0 3 * * 5 [ $(expr $(date '+%W') % 2) = 1 ] || my_biweekly_cron\n\n", "\nNone of the supplied solutions worked for me, but if you're trying to send an empty message body I found a workaround.\nSince the message body is sent in an empty attachment, I noticed this command line option:\n--[no-]skip-empty-attachments\n                         skip attachments with empty body\n\nWhen including this argument, I no longer am getting that problem.\n", "\nNone of the supplied solutions worked for me, but if you're trying to send an empty message body I found a workaround.\nSince the message body is sent in an empty attachment, I noticed this command line option:\n--[no-]skip-empty-attachments\n                         skip attachments with empty body\n\nWhen including this argument, I no longer am getting that problem.\n", "\nNone of the supplied solutions worked for me, but if you're trying to send an empty message body I found a workaround.\nSince the message body is sent in an empty attachment, I noticed this command line option:\n--[no-]skip-empty-attachments\n                         skip attachments with empty body\n\nWhen including this argument, I no longer am getting that problem.\n", "\nNone of the supplied solutions worked for me, but if you're trying to send an empty message body I found a workaround.\nSince the message body is sent in an empty attachment, I noticed this command line option:\n--[no-]skip-empty-attachments\n                         skip attachments with empty body\n\nWhen including this argument, I no longer am getting that problem.\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nIt's always worked well for me.\nYou should consider a slightly more sophisticated script that can do three things.\n\nAppend a crontab line; assuring that it didn't exist.  Adding when it already exists is bad.\nRemove the crontab line.  Perhaps only warning if it didn't exist.\nA combination of the above two features to replace the crontab line.\n\n", "\nAlso possible to grep output of /var/log/cron to see old crons, and also new running crons. This is the command used to search for \u201cscript.sh\u201d in the cron log file:\ngrep \u201cscript.sh\u201d /var/log/cron\n\nFor checking current running crontabs, it is the best solution as suggested above (using custom log for output), like this:\n* * * * * /root/script.sh > /tmp/script.log 2>&1\n\nthen using tail to check for changes when cron is running:\ntail -f /tmp/script.log\n\n", "\nAlso possible to grep output of /var/log/cron to see old crons, and also new running crons. This is the command used to search for \u201cscript.sh\u201d in the cron log file:\ngrep \u201cscript.sh\u201d /var/log/cron\n\nFor checking current running crontabs, it is the best solution as suggested above (using custom log for output), like this:\n* * * * * /root/script.sh > /tmp/script.log 2>&1\n\nthen using tail to check for changes when cron is running:\ntail -f /tmp/script.log\n\n", "\nAlso possible to grep output of /var/log/cron to see old crons, and also new running crons. This is the command used to search for \u201cscript.sh\u201d in the cron log file:\ngrep \u201cscript.sh\u201d /var/log/cron\n\nFor checking current running crontabs, it is the best solution as suggested above (using custom log for output), like this:\n* * * * * /root/script.sh > /tmp/script.log 2>&1\n\nthen using tail to check for changes when cron is running:\ntail -f /tmp/script.log\n\n", "\nOn Centos the cron logs get generated under /var/log/cron*\nOr if its not then you can follow these steps to enable it:\nvi /etc/rsyslog.conf\n\nIn the file, you will find the following line:\n#cron.*                     -/var/log/cron\n\nUncomment the line (remove the #) and save the rsyslog..conf file.\nNext you will have to restart the rsyslog daemon:\nservice rsyslog restart\n\n", "\nOn Centos the cron logs get generated under /var/log/cron*\nOr if its not then you can follow these steps to enable it:\nvi /etc/rsyslog.conf\n\nIn the file, you will find the following line:\n#cron.*                     -/var/log/cron\n\nUncomment the line (remove the #) and save the rsyslog..conf file.\nNext you will have to restart the rsyslog daemon:\nservice rsyslog restart\n\n", "\nOn Centos the cron logs get generated under /var/log/cron*\nOr if its not then you can follow these steps to enable it:\nvi /etc/rsyslog.conf\n\nIn the file, you will find the following line:\n#cron.*                     -/var/log/cron\n\nUncomment the line (remove the #) and save the rsyslog..conf file.\nNext you will have to restart the rsyslog daemon:\nservice rsyslog restart\n\n", "\nOn Centos the cron logs get generated under /var/log/cron*\nOr if its not then you can follow these steps to enable it:\nvi /etc/rsyslog.conf\n\nIn the file, you will find the following line:\n#cron.*                     -/var/log/cron\n\nUncomment the line (remove the #) and save the rsyslog..conf file.\nNext you will have to restart the rsyslog daemon:\nservice rsyslog restart\n\n", "\nOn Centos the cron logs get generated under /var/log/cron*\nOr if its not then you can follow these steps to enable it:\nvi /etc/rsyslog.conf\n\nIn the file, you will find the following line:\n#cron.*                     -/var/log/cron\n\nUncomment the line (remove the #) and save the rsyslog..conf file.\nNext you will have to restart the rsyslog daemon:\nservice rsyslog restart\n\n"]}