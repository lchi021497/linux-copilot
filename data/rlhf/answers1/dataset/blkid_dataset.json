{"prompt": ["when i compile and link this code to get disk uuid:#include <stdio.h>\n#include <stdlib.h>\n#include <err.h>\n#include <blkid/blkid.h>\n\nint main (int argc, char *argv[]) {\n  blkid_probe pr;\n  const char *uuid;\n\n  if (argc != 2) {\n    fprintf(stderr, \"Usage: %s devname\\n\", argv[0]);\n    exit(1);\n  }\n\n  pr = blkid_new_probe_from_filename(argv[1]);\n  if (!pr) {\n    err(2, \"Failed to open %s\", argv[1]);\n  }\n\n  blkid_do_probe(pr);\n  blkid_probe_lookup_value(pr, \"UUID\", &uuid, NULL);\n\n  printf(\"UUID=%s\\n\", uuid);\n\n  blkid_free_probe(pr);\n\n  return 0;\n}\nit errors out:/home/usr/blkid/blkid.c:15: undefined reference to `blkid_new_probe_from_filename'  \nmake[2]: Leaving directory `/home/usr/blkid'  \nmake[1]: Leaving directory `/home/usr/blkid'  \n/home/usr/blkid/blkid.c:20: undefined reference to `blkid_do_probe'  \n/home/usr/blkid/blkid.c:21: undefined reference to `blkid_probe_lookup_value'  \n/home/usr/blkid/blkid.c:25: undefined reference to `blkid_free_probe'  \nwhen i compile the code by the following command, the code compiles with no error  gcc    -c -g -MMD -MP -MF build/Debug/GNU-Linux-x86/blkid.o.d -o build/Debug/GNU-Linux-x86/blkid.o blkid.c\n"], "chosen": ["\nThe error you show comes from the linker.\nIf you compile one single file to a .o file without linking, no external references will be tried to fulfill.\nBut if you want to compile into an executable, all needed requirements must be fulfilled. If the program requires the presence of a blkid_do_probe(), you should provide it somehow. Probably this will be done by linking with the appropriate library. As someone mentionned in a comment, this is to be done with -lblkid.\n"], "rejected": ["\nTry to put -lblkid into your gcc command so the linker will know that you need to link your code to that library. Be sure to put this option at the end of the command. The order of options somehow matters. From here:\n\nIt makes a difference where in the command you write this option; the\n  linker searches and processes libraries and object files in the order\n  they are specified. Thus, \u2018foo.o -lz bar.o\u2019 searches library \u2018z\u2019 after\n  file foo.o but before bar.o. If bar.o refers to functions in \u2018z\u2019,\n  those functions may not be loaded.\n\nThis command should automatically both compile and link your source code:\ngcc -o test -g -MMD -MP -MF build/Debug/GNU-Linux-x86/blkid.o.d blkid.c -lblkid\n\n"]}