{"prompt": ["I am trying to call a function using nohup like this:function1(){\n    while true \n    do\n        echo \"function1\"\n        sleep 1\n    done\n}\n\nnohup function1 & \n# ...... some other code\nbut may be the function isn't seen by nohup and I get this error:nohup: failed to run command `function1' : No such file or dictionary\nI don't want to create new sh file for my function. How can I fix this?", "I am trying to call a function using nohup like this:function1(){\n    while true \n    do\n        echo \"function1\"\n        sleep 1\n    done\n}\n\nnohup function1 & \n# ...... some other code\nbut may be the function isn't seen by nohup and I get this error:nohup: failed to run command `function1' : No such file or dictionary\nI don't want to create new sh file for my function. How can I fix this?", "I am trying to call a function using nohup like this:function1(){\n    while true \n    do\n        echo \"function1\"\n        sleep 1\n    done\n}\n\nnohup function1 & \n# ...... some other code\nbut may be the function isn't seen by nohup and I get this error:nohup: failed to run command `function1' : No such file or dictionary\nI don't want to create new sh file for my function. How can I fix this?", "I am trying to call a function using nohup like this:function1(){\n    while true \n    do\n        echo \"function1\"\n        sleep 1\n    done\n}\n\nnohup function1 & \n# ...... some other code\nbut may be the function isn't seen by nohup and I get this error:nohup: failed to run command `function1' : No such file or dictionary\nI don't want to create new sh file for my function. How can I fix this?", "I am trying to call a function using nohup like this:function1(){\n    while true \n    do\n        echo \"function1\"\n        sleep 1\n    done\n}\n\nnohup function1 & \n# ...... some other code\nbut may be the function isn't seen by nohup and I get this error:nohup: failed to run command `function1' : No such file or dictionary\nI don't want to create new sh file for my function. How can I fix this?", "I am trying to call a function using nohup like this:function1(){\n    while true \n    do\n        echo \"function1\"\n        sleep 1\n    done\n}\n\nnohup function1 & \n# ...... some other code\nbut may be the function isn't seen by nohup and I get this error:nohup: failed to run command `function1' : No such file or dictionary\nI don't want to create new sh file for my function. How can I fix this?", "I am trying to call a function using nohup like this:function1(){\n    while true \n    do\n        echo \"function1\"\n        sleep 1\n    done\n}\n\nnohup function1 & \n# ...... some other code\nbut may be the function isn't seen by nohup and I get this error:nohup: failed to run command `function1' : No such file or dictionary\nI don't want to create new sh file for my function. How can I fix this?", "UPDATE: Based on below discussion I have edited my answer for more accurate description.I am trying to run a nohup command from jenkins. The full command is nohup java -jar /home/.../jar/server-process-0.35.jar prod >> /var/../server-process-prod.log 2>&1 &\nThis command does not work. I can see status as success in jenkins but no java process in linux. When I do 'ps -ef | grep java'However when I remove the last '&' , that is I change it from run in forground instead of backgroundIt starts working. I can see the java process started. The original command works fine If I run it on linux console.I need to run it from jenkins in the original form that is as a backgorund process. So that it is independant of jenkins. Any clues why is this happening?", "UPDATE: Based on below discussion I have edited my answer for more accurate description.I am trying to run a nohup command from jenkins. The full command is nohup java -jar /home/.../jar/server-process-0.35.jar prod >> /var/../server-process-prod.log 2>&1 &\nThis command does not work. I can see status as success in jenkins but no java process in linux. When I do 'ps -ef | grep java'However when I remove the last '&' , that is I change it from run in forground instead of backgroundIt starts working. I can see the java process started. The original command works fine If I run it on linux console.I need to run it from jenkins in the original form that is as a backgorund process. So that it is independant of jenkins. Any clues why is this happening?", "UPDATE: Based on below discussion I have edited my answer for more accurate description.I am trying to run a nohup command from jenkins. The full command is nohup java -jar /home/.../jar/server-process-0.35.jar prod >> /var/../server-process-prod.log 2>&1 &\nThis command does not work. I can see status as success in jenkins but no java process in linux. When I do 'ps -ef | grep java'However when I remove the last '&' , that is I change it from run in forground instead of backgroundIt starts working. I can see the java process started. The original command works fine If I run it on linux console.I need to run it from jenkins in the original form that is as a backgorund process. So that it is independant of jenkins. Any clues why is this happening?", "UPDATE: Based on below discussion I have edited my answer for more accurate description.I am trying to run a nohup command from jenkins. The full command is nohup java -jar /home/.../jar/server-process-0.35.jar prod >> /var/../server-process-prod.log 2>&1 &\nThis command does not work. I can see status as success in jenkins but no java process in linux. When I do 'ps -ef | grep java'However when I remove the last '&' , that is I change it from run in forground instead of backgroundIt starts working. I can see the java process started. The original command works fine If I run it on linux console.I need to run it from jenkins in the original form that is as a backgorund process. So that it is independant of jenkins. Any clues why is this happening?", "UPDATE: Based on below discussion I have edited my answer for more accurate description.I am trying to run a nohup command from jenkins. The full command is nohup java -jar /home/.../jar/server-process-0.35.jar prod >> /var/../server-process-prod.log 2>&1 &\nThis command does not work. I can see status as success in jenkins but no java process in linux. When I do 'ps -ef | grep java'However when I remove the last '&' , that is I change it from run in forground instead of backgroundIt starts working. I can see the java process started. The original command works fine If I run it on linux console.I need to run it from jenkins in the original form that is as a backgorund process. So that it is independant of jenkins. Any clues why is this happening?", "UPDATE: Based on below discussion I have edited my answer for more accurate description.I am trying to run a nohup command from jenkins. The full command is nohup java -jar /home/.../jar/server-process-0.35.jar prod >> /var/../server-process-prod.log 2>&1 &\nThis command does not work. I can see status as success in jenkins but no java process in linux. When I do 'ps -ef | grep java'However when I remove the last '&' , that is I change it from run in forground instead of backgroundIt starts working. I can see the java process started. The original command works fine If I run it on linux console.I need to run it from jenkins in the original form that is as a backgorund process. So that it is independant of jenkins. Any clues why is this happening?", "UPDATE: Based on below discussion I have edited my answer for more accurate description.I am trying to run a nohup command from jenkins. The full command is nohup java -jar /home/.../jar/server-process-0.35.jar prod >> /var/../server-process-prod.log 2>&1 &\nThis command does not work. I can see status as success in jenkins but no java process in linux. When I do 'ps -ef | grep java'However when I remove the last '&' , that is I change it from run in forground instead of backgroundIt starts working. I can see the java process started. The original command works fine If I run it on linux console.I need to run it from jenkins in the original form that is as a backgorund process. So that it is independant of jenkins. Any clues why is this happening?", "UPDATE: Based on below discussion I have edited my answer for more accurate description.I am trying to run a nohup command from jenkins. The full command is nohup java -jar /home/.../jar/server-process-0.35.jar prod >> /var/../server-process-prod.log 2>&1 &\nThis command does not work. I can see status as success in jenkins but no java process in linux. When I do 'ps -ef | grep java'However when I remove the last '&' , that is I change it from run in forground instead of backgroundIt starts working. I can see the java process started. The original command works fine If I run it on linux console.I need to run it from jenkins in the original form that is as a backgorund process. So that it is independant of jenkins. Any clues why is this happening?", "I have a bash script that will run in both Linux and Mac OS X. One particular line of the script works as is in Linux, but not in OS X.nohup <utility> <arg> > output.txt 2> error.txt </dev/null &\nWhen the bash script runs in Linux, it works like a charm. However, running the bash script in OS X, I get the errornohup: can't detach from console: Inappropriate ioctl for device\nI've done a lot of searching and haven't found a suitable answer as to why this is behaving as such.The executing script exits long before the <utility>, which is why (as far as my knowledge goes) I need to use nohup. However, I've done some testing, and removing nohup from the line in the bash script seems do the trick in that the utility on both systems will launch, and continue to run even after the script exits.", "I have a bash script that will run in both Linux and Mac OS X. One particular line of the script works as is in Linux, but not in OS X.nohup <utility> <arg> > output.txt 2> error.txt </dev/null &\nWhen the bash script runs in Linux, it works like a charm. However, running the bash script in OS X, I get the errornohup: can't detach from console: Inappropriate ioctl for device\nI've done a lot of searching and haven't found a suitable answer as to why this is behaving as such.The executing script exits long before the <utility>, which is why (as far as my knowledge goes) I need to use nohup. However, I've done some testing, and removing nohup from the line in the bash script seems do the trick in that the utility on both systems will launch, and continue to run even after the script exits.", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I'm running a nohup process on the server. When I try to kill it my putty console closes instead.this is how I try to find the process ID:ps -ef |grep nohup \nthis is the command to kill kill -9 1787 787\n", "I\u2019m new to working on Linux. I apologize if this is a dumb question. Despite searching for more than a week, I was not able to derive a clear answer to my question.I\u2019m running a very long Python program on Nvidia CPUs. The output is several csv files. It takes long to compute the output, so I use nohup to be able to exit the process.Let\u2019s say main.py file is thisimport numpy as p\nimport pandas as pd\n\nif __name__ == \u2018__main__\u2019:\n    \n    a = np.arange(1,1000)\n    data = a*2\n\n    filename = \u2018results.csv\u2019\n\n    output = pd.DataFrame(data, columns = [\u201cOutput\u201d])\n    output.to_csv(filename)\nThe calculations for data is more complicated, of course. I build a docker container, and run this program inside this container. When I use python main.py for a smaller-sized example, there is no problem. It writes the csv files.My question is this:\nWhen I do nohup python main.py &, I check what\u2019s going on with tail -f nohup.out in the docker container, I get what it is doing at that time but I cannot exit it and let the execution run its course. It just stops there. How can I exit safely from the screen that comes with tail -f nohup.out?\n\nI tried not checking the condition of the code and letting the code continue for two days, then I returned. The output of tail -f nohup.out indicated that the execution finished but csv files were nowhere to be seen. It is somehow bundled up inside nohup.out or does it indicate something else is wrong?\n\n", "I am trying to run a bot on my linuxserver that checks prices, I used selenium in my python script. I run it with nohup in the backgroun but after a while I encounter the folowing error:File \"selenium_amazon.py\", line 68, in <module>\n    isProduct()\n  File \"selenium_amazon.py\", line 63, in isProduct()\n  File \"selenium_amazon.py\", line 22, in Product_functie\n    EC.presence_of_element_located((By.ID, \"button\"))\n  File \"/usr/local/lib/python3.7/dist-packages/selenium/webdriver/support/wait.py\", line 80, in until\n    raise TimeoutException(message, screen, stacktrace)\nselenium.common.exceptions.TimeoutException: Message:\nAlso i can't find the file /usr/local/lib/python3.7/dis_packages/selenium/webdriver/support/wait.py on my server.Thank you in advance for your answers!", "BACKGROUNDI would like to explain the scenario properly here.\nI am running  jenkins_2.73.3 in my cloud server with ubuntu 16.04.\nCurrently, there are 3 users in the server:\nroot\ndevelop-user (which I had created for many reasons such as test,deploy etc)\njenkins (which was created by jenkins ofcourse, I also added this jenkins user to sudoers group)\nPROBLEMI have a bash script that I am calling from a build step in Jenkins. Within this bash script,there is a nohup command for calling a separate deployScript in the background such as:#!/bin/bash\nnohup deployScript.sh > $WORKSPACE/app.log 2>&1 & echo $! > save_pid.txt\nAfter the build step is completed, I see that a id is generated inside save_pid.txt but app.log is surprisingly empty. I can't kill any processes with this generated pid. So, that means there isn't any process created in the first place here. Also, the deployScript.sh does not seem to have any effect at all. It's just not working. This happens everytime I run the build in Jenkins. I can assure that there is nothing wrong with the deployScript.sh.I have tried running this bash script with the develop-user manually without Jenkins and it works perfectly. Contents are written to the log file and also I can use the generated pid to kill the process. I have also tested this in my local environment and it works.QUESTIONI have been looking at this for days. What might be the root cause here ?Where can I look into to see some logs or other info ? How is the pid generated whereas the log file is empty ? Is it a permission issue with the jenkins user ? Please help."], "chosen": ["\nnohup applies to commands and not to script functions.\nFor example, the script (say func.sh) that contains function1() should call the function-:\nfunction1(){\n    while true \n    do\n        echo \"function1\"\n        sleep 1\n    done\n\n}\n\nfunction1\n\nNow call the script func.sh with nohup in the background-:\nnohup ./func.sh &\n\nIf you need to disable the hangup signal from within the script use the shell built-in trap. The example ignores SIGHUP but can be used to ignore others (e.g. SIGINT).\ntrap \"\" HUP   # script will ignore HANGUP signal\n\n", "\nAnother solution:\nfunction background {\n    echo TEST\n}\nexport -f background \n\nnohup bash -c background &\n\n", "\nI find a working solution for me - define the function in a file (e.g. .functions) then run the function with nohup:\nnohup bash -c \"source .functions; function1\" &\nTested on Ubuntu 13.04.\n", "\nInstead of using nohup, which is tailored for files, you can implement the same result like this:\n(trap '' HUP INT\n while true\n do\n   echo \"function1\"\n   sleep 1\n done\n) </dev/null 2>&1 1>nohup.out &\n\nAs I tend to launch these processes from a parent script and the parent script may do other work if the parent process is interrupted I want the child process to ignore the INT signal and keep on running.\n", "\nSince nohup must be supplied with a filename not a function as a workaround this is what can be done:\nfunction1(){\n    while true \n    do\n        echo \"function1\"\n        sleep 1\n    done\n\n}\n\necho \"$@\" | grep -q -- \"--nohup\" && function1 || nohup $0 \"$@\" --nohup & \n\nSo when this script gets called with the current arguments:\n\n`echo \"$@\" | grep -q -- \"--nohup\" will return an error status so\nnohup $0 \"$@\" --nohup & will be invoked, which will invoke this script passing the current arguments and a new argument --nohup\n\nAnd when this script is called with argument --nohup\n\n`echo \"$@\" | grep -q -- \"--nohup\" will return with zero status (success) so\nfunction1 will be invoked\n\n", "\nYes ! It is possible however tricky, and strictly bash > v2 compatible :\nfunction1(){ local msg=${*:-function1}; echo msg=$msg; }\nnohup -- sh -c \"$(typeset -f function1); function1 MESSAGE\" >nohup.log 2>&1 0</dev/null &\n\nAnd don't forget \"typeset\" is bash deprecated in favor of \"declare\" (though I don't entirely agree with this).\n", "\nAbout:\nfunction background {\n     echo TEST \n} \nexport -f background \n\nnohup bash -c background &\n\nFor people encountering the issue:\nexport: -f: unknown option \u2013 \n\nBe sure to be in bash or csh, because \"export -f\" is usually not recognized in e.g. ksh\nSorry, not yet the reputation to comment the IceTea answer directly.\n", "\nLong story short, Jenkins kills all processes spawned by a job once that job finishes.  To override this behavior, you need to set an environment variable.\nThe variable appears to vary from job type to job type.  It used to be BUILD_ID, but for Pipeline jobs it is JENKINS_NODE_COOKIE, and there are several others mentioned in this answer.\nSo if you're running your command in Pipeline, it would look like this:\nsh 'JENKINS_NODE_COOKIE=dontKillMe nohup java -jar /home/.../jar/server-process-0.35.jar prod >> /var/../server-process-prod.log 2>&1 &'\n\nSee the wiki on ProcessTreeKiller and this comment in the Jenkins Jira for more information.\n", "\nIn your jenkins shell script try:\n  export BUILD_ID=dontKillMe\n  nohup java -jar your_java_app.jar &\n\nIt worked for me!\n", "\nI tried every possible combination with BUILD_ID but it didn't work.\nI made it though by putting \"nohup command > output.txt&\" inside a shell script ran by the execute shell in jenkins, it worked perfectly!\n", "\nGot the same problem, added:\nBUILD_ID=dontKillMe python /var/lib/jenkins/release.py\n\ninto Execute Shell -> Command and inside release.py there is:\nos.system('nohup java -jar ' + new_jars_on_server + '/' + generated_jar_by_mvn_name + '&')\n\nand it works\n", "\nBest simple solution is to use \"at now\" instead of \"nohup\"\nIn your job jenkins (execute shell) put :\nset +e #so \"at now\" will run even if java -jar fails\n#Run java app in background\necho \"java -jar $(ls | grep *.jar | head -n 1)\" | at now + 1 min\n\n", "\nwhat worked for me was wrapping the nohup java -jar ... command into sh file inside execute shell command, and running that same sh file right after:\necho \"starting java jar...\"\ncd [some location where jar is]\necho \"nohup java -jar [jar_name].jar &\" > start-jar-in-background.sh\nsh start-jar-in-background.sh\necho \"started java jar\"\n\nIf I had nohup java -jar ... inline with Execute shell command, then it didn't start it from some reasons. I spent quite some time on this, hope it helps to someone ';)\n", "\nSimplest way : \n`nohup java -jar [jar_name].jar >log_file_you_want 2>another_file`&\n", "\nset +e #so \"at now\" will run even if java -jar fails\n\n#Run java app in background\necho \"java -jar $(ls | grep *.jar | head -n 1)\" | at now + 1 min\n\nabove command worked for him, thanks @walid, & remove at the end (+ 1 min)\n", "\ntry this :\nnohup <utility> <arg> > output.txt 2> error.txt >/dev/null &\n\n", "\nYou could try this\nnohup <utility> <arg> > output.txt 2> error.txt >/dev/null & disown\n\n", "\nI am using red hat linux on a VPS server (and via SSH - putty), for me the following worked:\nFirst, you list all the running processes:\nps -ef\n\nThen in the first column you find your user name; I found it the following three times:\n\nOne was the SSH connection\nThe second was an FTP connection\nThe last one was the nohup process\n\nThen in the second column you can find the PID of the nohup process and you only type:\nkill PID \n\n(replacing the PID with the nohup process's PID of course)\nAnd that is it!\nI hope this answer will be useful for someone I'm also very new to bash and SSH, but found 95% of the knowledge I need here :) \n", "\nWhen using nohup and you put the task in the background, the background operator (&) will give you the PID at the command prompt. If your plan is to manually manage the process, you can save that PID and use it later to kill the process if needed, via kill PID or kill -9 PID (if you need to force kill). Alternatively, you can find the PID later on by ps -ef | grep \"command name\" and locate the PID from there. Note that nohup keyword/command itself does not appear in the ps output for the command in question.\nIf you use a script, you could do something like this in the script:\nnohup my_command > my.log 2>&1 &\necho $! > save_pid.txt\n\nThis will run my_command saving all output into my.log (in a script, $! represents the PID of the last process executed). The 2 is the file descriptor for standard error (stderr) and 2>&1 tells the shell to route standard error output to the standard output (file descriptor 1). It requires &1 so that the shell knows it's a file descriptor in that context instead of just a file named 1. The 2>&1 is needed to capture any error messages that normally are written to standard error into our my.log file (which is coming from standard output). See I/O Redirection for more details on handling I/O redirection with the shell.\nIf the command sends output on a regular basis, you can check the output occasionally with tail my.log, or if you want to follow it \"live\" you can use tail -f my.log. Finally, if you need to kill the process, you can do it via:\nkill -9 `cat save_pid.txt`\nrm save_pid.txt\n\n", "\nsuppose i am running ruby script in the background with below command\nnohup ruby script.rb &\n\nthen i can get the pid of above background process by specifying command name. In my case command is ruby.\nps -ef | grep ruby\n\noutput\nubuntu   25938 25742  0 05:16 pts/0    00:00:00 ruby test.rb\n\nNow you can easily kill the process by using kill command\nkill 25938\n\n", "\njobs -l should give you the pid for the list of nohup processes.\nkill (-9) them gently.\n;)\n", "\nYou could try\nkill -9 `pgrep [command name]`\n\n", "\nSuppose you are executing a java program with nohup you can get java process id by\nps aux | grep java\n\noutput\nxxxxx     9643  0.0  0.0  14232   968 pts/2   \n\nthen you can kill the process by typing\nsudo kill 9643\n\nor lets say that you need to kill all the java processes then just use\nsudo killall java\n\nthis command kills all the java processes. you can use this with process. just give the process name at the end of the command\nsudo killall {processName}\n\n", "\nIf your application always uses the same port, you can kill all the processes in that port like this.\nkill -9 $(lsof -t -i:8080)\n", "\nThis works in Ubuntu\nType this to find out the PID\nps aux | grep java\n\nAll the running process regarding to java will be shown\nIn my case is \njohnjoe      3315  9.1  4.0 1465240 335728 ?      Sl   09:42   3:19 java -jar batch.jar\n\nNow kill it kill -9 3315\nThe zombie process finally stopped.\n", "\nwhen you create a job in nohup it will tell you the process ID !\nnohup sh test.sh &\n\nthe output will show you the process ID like \n25013\n\nyou can kill it then :\nkill 25013\n\n", "\nI started django server with the following command.\nnohup manage.py runserver <localhost:port>\n\nThis works on CentOS:\n:~ ns$netstat -ntlp\n:~ ns$kill -9 PID \n\n", "\nI often do this way. Try this way :\nps aux | grep script_Name\n\nHere, script_Name could be any script/file run by nohup.\nThis command gets you a process ID. Then use this command below to kill the script running on nohup.\nkill -9 1787 787\n\nHere, 1787 and 787 are Process ID as mentioned in the question as an example.\nThis should do what was intended in the question.\n", "\nIf you are unaware of the PID, then first find it using TOP command\ntop -U userid\nPID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n\nYou will get the PID using top, then perform the kill operation.\n$ kill -9 <PID>\n\n", "\nps -ef | grep <file_type>| grep <username>\n\nFor example, if you are running a Python file, use the following command:\nps -ef | grep python | grep user_name\n\nIt will list all the python processes that are initiated by you. Now you can kill those processes as:\nkill -9 <p_id>\n\n", "\nToday I met the same problem. And since it was a long time ago, I totally forgot which command I used and when. I tried three methods:\n\nUsing the STIME shown in ps -ef command. This shows the time you start your process, and it's very likely that you nohup you command just before you close ssh(depends on you) . Unfortunately I don't think the latest command is the command I run using nohup, so this doesn't work for me.\nSecond is the PPID, also shown in ps -ef command. It means Parent Process ID, the ID of process that creates the process. The ppid is 1 in ubuntu for process that using nohup to run. Then you can use ps --ppid \"1\" to get the list, and check TIME(the total CPU time your process use) or CMD to find the process's PID.\nUse lsof -i:port if the process occupy some ports, and you will get the command. Then just like the answer above, use ps -ef | grep command and you will get the PID.\n\nOnce you find the PID of the process, then can use kill pid to terminal the process.\n", "\nThis works for mi fine on mac\nkill -9 `ps -ef | awk '/nohup/{ print \\$2 }'`\n\n", "\nAbout losing your putty: often the ps ... | awk/grep/perl/... process gets matched, too!  So the old school trick is like this\nps -ef | grep -i [n]ohup \n\nThat way the regex search doesn't match the regex search process!\n", "\n1- Container is a foreground process. Use CMD or Entrypoint in Dockerfile.\n2- Map volume in docker to linux directory's.\n", "\nI had the same problem!\nexecute your command( nohup python3 -u main.py > out.out & )\nnormally , open a second terminal and execute the command screen -r ( this will attach in the process the screen that selenium needs) . After that close the both terminal and check the size file from your logs. ( I use snowflake to connect in my terminals )\n", "\nYou can use below line inside the execute shell in jenkins to run it in background without the process being killed.\nBUILD_ID=dontKillMe <command> &\n\n"], "rejected": ["\ntry edit nohup function1 & to this\n\nfunction1=$(function1)\nnohup $function1 --nohup &\n\n\n", "\ntry edit nohup function1 & to this\n\nfunction1=$(function1)\nnohup $function1 --nohup &\n\n\n", "\ntry edit nohup function1 & to this\n\nfunction1=$(function1)\nnohup $function1 --nohup &\n\n\n", "\ntry edit nohup function1 & to this\n\nfunction1=$(function1)\nnohup $function1 --nohup &\n\n\n", "\ntry edit nohup function1 & to this\n\nfunction1=$(function1)\nnohup $function1 --nohup &\n\n\n", "\ntry edit nohup function1 & to this\n\nfunction1=$(function1)\nnohup $function1 --nohup &\n\n\n", "\ntry edit nohup function1 & to this\n\nfunction1=$(function1)\nnohup $function1 --nohup &\n\n\n", "\nvi /etc/sudoers\nadd line \"jenkins ALL=(ALL)       NOPASSWD:\u00a0ALL\" below wheels line\nnow save it\ngo to bash execute the command \"usermod -aG wheel\u00a0jenkins\"\nuse the nohup command like this \"sudo nohup npx serve -s build -p 3007 > server.log 2>&1 &\"\ngive permission for \"server.log\" once it created in your application path\nit will work\n", "\nvi /etc/sudoers\nadd line \"jenkins ALL=(ALL)       NOPASSWD:\u00a0ALL\" below wheels line\nnow save it\ngo to bash execute the command \"usermod -aG wheel\u00a0jenkins\"\nuse the nohup command like this \"sudo nohup npx serve -s build -p 3007 > server.log 2>&1 &\"\ngive permission for \"server.log\" once it created in your application path\nit will work\n", "\nvi /etc/sudoers\nadd line \"jenkins ALL=(ALL)       NOPASSWD:\u00a0ALL\" below wheels line\nnow save it\ngo to bash execute the command \"usermod -aG wheel\u00a0jenkins\"\nuse the nohup command like this \"sudo nohup npx serve -s build -p 3007 > server.log 2>&1 &\"\ngive permission for \"server.log\" once it created in your application path\nit will work\n", "\nvi /etc/sudoers\nadd line \"jenkins ALL=(ALL)       NOPASSWD:\u00a0ALL\" below wheels line\nnow save it\ngo to bash execute the command \"usermod -aG wheel\u00a0jenkins\"\nuse the nohup command like this \"sudo nohup npx serve -s build -p 3007 > server.log 2>&1 &\"\ngive permission for \"server.log\" once it created in your application path\nit will work\n", "\nvi /etc/sudoers\nadd line \"jenkins ALL=(ALL)       NOPASSWD:\u00a0ALL\" below wheels line\nnow save it\ngo to bash execute the command \"usermod -aG wheel\u00a0jenkins\"\nuse the nohup command like this \"sudo nohup npx serve -s build -p 3007 > server.log 2>&1 &\"\ngive permission for \"server.log\" once it created in your application path\nit will work\n", "\nvi /etc/sudoers\nadd line \"jenkins ALL=(ALL)       NOPASSWD:\u00a0ALL\" below wheels line\nnow save it\ngo to bash execute the command \"usermod -aG wheel\u00a0jenkins\"\nuse the nohup command like this \"sudo nohup npx serve -s build -p 3007 > server.log 2>&1 &\"\ngive permission for \"server.log\" once it created in your application path\nit will work\n", "\nvi /etc/sudoers\nadd line \"jenkins ALL=(ALL)       NOPASSWD:\u00a0ALL\" below wheels line\nnow save it\ngo to bash execute the command \"usermod -aG wheel\u00a0jenkins\"\nuse the nohup command like this \"sudo nohup npx serve -s build -p 3007 > server.log 2>&1 &\"\ngive permission for \"server.log\" once it created in your application path\nit will work\n", "\nvi /etc/sudoers\nadd line \"jenkins ALL=(ALL)       NOPASSWD:\u00a0ALL\" below wheels line\nnow save it\ngo to bash execute the command \"usermod -aG wheel\u00a0jenkins\"\nuse the nohup command like this \"sudo nohup npx serve -s build -p 3007 > server.log 2>&1 &\"\ngive permission for \"server.log\" once it created in your application path\nit will work\n", "\nYou don't need nohup at all.\nnohup has only the following features:\n\nIt declines to forward HUP signals to its children (which you can also do in bash with disown -h).\nIt redirects stdin from /dev/null if it was previously pointing to a terminal (which it isn't because you're running </dev/null).\nIt redirects stdout to nohup.out if it was previously pointing to a terminal (which it isn't because you're running >output.txt).\nIt redirects stderr to nohup.out if it was previously pointing to a terminal (which it isn't because you're running 2>error.txt).\n\nThat's it. That's all it does. And you don't need something that'll decline to forward HUP signals unless you're in an interactive shell (because noninteractive shells with default settings don't forward HUP signals at all in the first place).\n", "\nYou don't need nohup at all.\nnohup has only the following features:\n\nIt declines to forward HUP signals to its children (which you can also do in bash with disown -h).\nIt redirects stdin from /dev/null if it was previously pointing to a terminal (which it isn't because you're running </dev/null).\nIt redirects stdout to nohup.out if it was previously pointing to a terminal (which it isn't because you're running >output.txt).\nIt redirects stderr to nohup.out if it was previously pointing to a terminal (which it isn't because you're running 2>error.txt).\n\nThat's it. That's all it does. And you don't need something that'll decline to forward HUP signals unless you're in an interactive shell (because noninteractive shells with default settings don't forward HUP signals at all in the first place).\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nif you are on a remote server, check memory usage with top , and find your process and its ID. After that, just execute kill [your process ID] .\n", "\nIf you're going to run this setup in a Docker container:\n\nA Docker container runs only one process, as a foreground process; when that process exits the container completes.  That process is almost always the script or server you're trying to run and not an interactive shell.  But;\n\nIt's possible to use Docker constructs to run the container itself in the background, and collect its logs while it's running or after it completes.\n\n\nA typical Dockerfile for a Python program like this might look like:\nFROM python:3.10\n\n# Create and use some directory; it can be anything, but do\n# create _some_ directory.\nWORKDIR /app\n\n# Install Python dependencies as a separate step.  Doing this first\n# saves time if you repeat `docker build` without changing the\n# requirements list.\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\n# Copy in the rest of the application.\nCOPY . .\n\n# Set the main container command to be the script.\nCMD [\"./main.py\"]\n\nThe script should be executable (chmod +x main.py on your host) and begin with a \"shebang\" line (#!/usr/bin/env python3) so the system knows where to find the interpreter.\nYou will hear recommendations to use both CMD and ENTRYPOINT for the final line.  It doesn't matter much to your immediate question.  I prefer CMD for two reasons: it's easier to launch an alternate command to debug your container (docker run --rm your-image ls -l vs. docker run --rm --entrypoint ls your-image -l), and there's a very useful pattern of using ENTRYPOINT to do some initial setup (creating environment variables dynamically, running database migrations, ...) and then launching CMD.\nHaving built the image, you can use the docker run -d option to launch it in the background, and then run docker logs to see what comes out of it.\n# Build the image.\ndocker build -t long-python-program .\n\n# Run it, in the background.\ndocker run -d --name run1 long-python-program\n\n# Review its logs.\ndocker logs run1\n\n\nIf you're running this to produce files that need to be read back from the host, you need to mount a host directory into your container at the time you start it.  You need to make a couple of changes to do this successfully.\nIn your code, you need to write the results somewhere different than your application code.  You can't mount a host directory over the /app directory since it will hide the code you're actually trying to run.\ndata_dir = os.getenv('DATA_DIR', 'data')\nfilename = os.path.join(data_dir, 'results.csv')\n\nOptionally, in your Dockerfile, create this directory and set a pointer to it.  Since my sample code gets its location from an environment variable you can again use any path you want.\n# Create the data directory.\nRUN mkdir /data\nENV DATA_DIR=/data\n\nWhen you launch the container, the docker run -v option mounts filesystems into the container.  For this sort of output file you're looking for a bind mount that directly attaches a host directory to the container.\ndocker run -d --name run2 \\\n  -v \"$PWD/results:/data\" \\\n  long-python-program\n\nIn this example so far we haven't set the USER of the program, and it will run as root.  You can change the Dockerfile to set up an alternate USER (which is good practice); you do not need to chown anything except the data directory to be owned by that user (leaving your code owned by root and not world-writeable is also good practice).  If you do this, when you launch the container (on native Linux) you need to provide the host numeric user ID that can write to the host directory; you do not need to make other changes in the Dockerfile.\ndocker run -d --name run2 \\\n  -u $(id -u) \\\n  -v \"$PWD/results:/data\" \\\n  long-python-program\n\n", "\nAn implicit wait tells WebDriver to poll the DOM for a certain amount of time when trying to find any element (or elements) not immediately available. The default setting is 0 (zero). Once set, the implicit wait is set for the life of the WebDriver object.\nfrom selenium import webdriver\n\ndriver = webdriver.Firefox()\ndriver.implicitly_wait(10) # seconds\ndriver.get(\"http://somedomain/url_that_delays_loading\")\nmyDynamicElement = driver.find_element_by_id(\"myDynamicElement\")\n\nUse this link for more details\n", "\nSo, it turned out to be a permission issue and also the script wasn't executable I guess as pointed out in the comments above.\nSo, now the bash script looks like below:\n#!/bin/bash\nsudo chmod a+x deployScript.sh\nsudo nohup deployScript.sh > $WORKSPACE/app.log 2>&1 & echo $! > save_pid.txt\n\nThis works.\n"]}