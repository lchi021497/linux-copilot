{"prompt": ["I have created an Ansbile script to check uptime of Remote Servers (nearly 60+ servers in a inventory group linux) and to send it to email with CSV and HTML file. It's working but its sending seperate mail for each server.I need it to gather the output and send a single mail with all server uptime and hostname in csv and HTML.Here is my script.main.yaml---\n- name: Generate Uptime HTML Report and Send Email\n  hosts: linux\n  gather_facts: true\n\n  vars:\n\n    email_subject: Uptime Report\n    email_host: xyz\n    email_from: xyz\n    email_to: xyz\n    email_body_template: templates/report.html.j2\n    csv_path: /tmp\n    csv_filename: report.csv\n    headers: Hostname,Uptime_In_Days\n\n  tasks:\n\n    - name: Get Uptime\n      command: uptime\n      register: uptime_result\n\n    - name: Extract Uptime in Days\n      set_fact:\n        uptime_days: \"{{ uptime_result.stdout | regex_replace('^.*up ([0-9]+) day.*', '\\\\1') | int }}\"\n      when: uptime_result.rc == 0\n\n    - name: Create CSV Data\n      set_fact:\n        csv_data:\n          - Hostname: \"{{ inventory_hostname }}\"\n            Uptime_In_Days: \"{{ uptime_days }}\"\n      when: uptime_result.rc == 0\n\n    - name: Transfer CSV Data File\n      copy:\n        content: \"{{ csv_data | to_nice_json }}\"\n        dest: \"{{ csv_path }}/{{ csv_filename }}\"\n        mode: '0644'\n\n    - name: Send Email\n      mail:\n        host: \"{{ email_host }}\"\n        from: \"{{ email_from }}\"\n        to: \"{{ email_to }}\"\n        subject: \"[Ansible] {{ email_subject }}\"\n        body: \"{{ lookup('template', email_body_template) }}\"\n        attach: \"{{ csv_path }}/{{ csv_filename }}\"\n        subtype: html\nhtml.j2<sub><table style=\"border: 1px solid black; border-collapse: collapse;\">\n<tr>\n    {% for header in headers.split(\",\") %}\n    <th style=\"border: 1px solid black; padding: 8px 16px;\">{{ header }}</th>\n    {% endfor %}\n</tr>\n{% for host in csv_data %}\n<tr>\n    {% for header in headers.split(\",\") %}\n    <td style=\"border: 1px solid black; padding: 8px 16px;\">{{ host[header] }}</td>\n    {% endfor %}\n</tr>\n{% endfor %}\n</table></sub>\n", "I am trying a linux command for uptime in a php file on a server as below<p> The uptime for this system is <?php $up_time=shell_exec('uptime');\necho $uptime; ?</p>\nBut when I open my webpage it just shows :The uptime for this system is\nPHP doesn't appear to be running the command.\nIf I go to command prompt and run uptime, I do see the results.I am doing ssh into a Linux webserver. The php file resides in my folder on the server.", "I'm using uptime in bash in order to get the current runtime of the machine. I need to grab the time and display a format like 2 days, 12 hours, 23 minutes.", "I'm using uptime in bash in order to get the current runtime of the machine. I need to grab the time and display a format like 2 days, 12 hours, 23 minutes.", "I'm using uptime in bash in order to get the current runtime of the machine. I need to grab the time and display a format like 2 days, 12 hours, 23 minutes.", "I'm using uptime in bash in order to get the current runtime of the machine. I need to grab the time and display a format like 2 days, 12 hours, 23 minutes.", "I'm using uptime in bash in order to get the current runtime of the machine. I need to grab the time and display a format like 2 days, 12 hours, 23 minutes.", "I'm using uptime in bash in order to get the current runtime of the machine. I need to grab the time and display a format like 2 days, 12 hours, 23 minutes.", "I'm using uptime in bash in order to get the current runtime of the machine. I need to grab the time and display a format like 2 days, 12 hours, 23 minutes.", "So I've been experimenting with Bash not too long ago, and I want to manipulate the output from the \"uptime\" command. I managed to change the output of up x minutes to 0:05 for example if the up time is 5 minutes, but the rest of the things disappear.What method should I use to also display the time, the amount of users and its load average without affecting my current up time output.This is the desired output: 21:08:13 up 0:10, 3 users, load average: 0.30, 0.30, 0.25Any help would be appreciated!since=\"`uptime --since`\"\nstart=\"`date --date \"$since\" '+%s'`\"\nnow=\"`date '+%s'`\"\nsec=$((now-start))\n\ndays=$((sec/(60*60*24)))\nsec=$((sec-days*(60*60*24)))\n\nhr=$((sec/(60*60)))\nsec=$((sec-hr*(60*60)))\n\nmin=$((sec/60))\nsec=$((sec-min*60))\n\nrest=\"$(uptime | perl -npe'{s/(.*,\\s+)(\\d+\\s+user)/$2/}')\"\n\nprintf \"%d(days), %02d:%02d:%02d(hms), %s\\n\" $days $hr $min $sec \"$rest\"\nCURRENT OUTPUT0(days), 00:34:00(hms), 3 users, load average: 0.09, 0.14, 0.14\n", "I am trying to hit a PHP url and post some information about my linux box using a cron job and wget.*/30 * * * * wget -O /dev/null http://ping.xxx.com/xxx/up.php?mac=`ifconfig eth1 | awk '/HWaddr/ { print $5 }`\\&uptime=`uptime`\\&ip=`ifconfig eth1 | awk '/inet addr:/ {sub(/addr:/, \"\", $2); print $2 }`;\non php side i am tryint to get request parameters like mac, uptime and ip but i am only able to record mac. Reason i think is because uptime command has 23:42:10 up 22 min,  load average: 0.00, 0.01, 0.04 as output which may be breaking the wget process. I am getting following message when i run wgetwget: not an http or ftp url: 23:42:10\nCan someone please tell me how to pass parameters correctly?", "I am trying to hit a PHP url and post some information about my linux box using a cron job and wget.*/30 * * * * wget -O /dev/null http://ping.xxx.com/xxx/up.php?mac=`ifconfig eth1 | awk '/HWaddr/ { print $5 }`\\&uptime=`uptime`\\&ip=`ifconfig eth1 | awk '/inet addr:/ {sub(/addr:/, \"\", $2); print $2 }`;\non php side i am tryint to get request parameters like mac, uptime and ip but i am only able to record mac. Reason i think is because uptime command has 23:42:10 up 22 min,  load average: 0.00, 0.01, 0.04 as output which may be breaking the wget process. I am getting following message when i run wgetwget: not an http or ftp url: 23:42:10\nCan someone please tell me how to pass parameters correctly?", "I'm creating an game server list, and I want to measure uptime for certain server (to be specific, uptime should be displayed in percents). I have configured a cronjob for my script, which is checking every 5 minutes if server is up or down, so I can easly get the server status.I need an idea on how can I measure each server uptime basing on the above data. I'd have to save down and up time for each server every one minute the script is executing?", "I'm creating an game server list, and I want to measure uptime for certain server (to be specific, uptime should be displayed in percents). I have configured a cronjob for my script, which is checking every 5 minutes if server is up or down, so I can easly get the server status.I need an idea on how can I measure each server uptime basing on the above data. I'd have to save down and up time for each server every one minute the script is executing?", "I'm creating an game server list, and I want to measure uptime for certain server (to be specific, uptime should be displayed in percents). I have configured a cronjob for my script, which is checking every 5 minutes if server is up or down, so I can easly get the server status.I need an idea on how can I measure each server uptime basing on the above data. I'd have to save down and up time for each server every one minute the script is executing?", "I'm creating an game server list, and I want to measure uptime for certain server (to be specific, uptime should be displayed in percents). I have configured a cronjob for my script, which is checking every 5 minutes if server is up or down, so I can easly get the server status.I need an idea on how can I measure each server uptime basing on the above data. I'd have to save down and up time for each server every one minute the script is executing?", "I'm having some performance issue on my embedded device:# uptime \n 14:59:39 up  5:37, load average: 1.60, 1.50, 1.53\nVery bad for a monocore system ... :-p! However if I check with the top utility, I always have an idle time around 80% !Mem: 49020K used, 75960K free, 0K shrd, 0K buff, 21476K cached\nCPU: 12.5% usr  4.8% sys  0.0% nic 81.7% idle  0.0% io  0.9% irq  0.0% sirq\nLoad average: 1.30 1.42 1.51 1/80 18696\nAfter reading some articles, I would better believe the uptime command. But why this difference? Is my CPU really idle ??!", "I'm having some performance issue on my embedded device:# uptime \n 14:59:39 up  5:37, load average: 1.60, 1.50, 1.53\nVery bad for a monocore system ... :-p! However if I check with the top utility, I always have an idle time around 80% !Mem: 49020K used, 75960K free, 0K shrd, 0K buff, 21476K cached\nCPU: 12.5% usr  4.8% sys  0.0% nic 81.7% idle  0.0% io  0.9% irq  0.0% sirq\nLoad average: 1.30 1.42 1.51 1/80 18696\nAfter reading some articles, I would better believe the uptime command. But why this difference? Is my CPU really idle ??!", "feels like I visited stackoverflow 100 times before. Always found good solutions, but now I'm stuck.I want to monitor how long a computer runs every day. This is part of a program written in Ruby, running on a Fedora machine.Previously I did similar things under Windows, where it is possible to catch the related power events using WndProc. However, with Fedora (or Linux in general) I don't find a good hook to detect power-on and power-off/suspend/hibernate/....Any suggestion is highly appreciated.Thanks,\njayrockEDIT: Seems I haven't been clear in what I want to achieve. Actually want to have information about not only the current uptime but also past uptimes. Thus I should know \"the computer has been running for x hours over the last 14 days\" or similar.Another addition is that e.g. the last command doesn't do the job either - it doesn't show if the system goes to hibernate or suspend.", "feels like I visited stackoverflow 100 times before. Always found good solutions, but now I'm stuck.I want to monitor how long a computer runs every day. This is part of a program written in Ruby, running on a Fedora machine.Previously I did similar things under Windows, where it is possible to catch the related power events using WndProc. However, with Fedora (or Linux in general) I don't find a good hook to detect power-on and power-off/suspend/hibernate/....Any suggestion is highly appreciated.Thanks,\njayrockEDIT: Seems I haven't been clear in what I want to achieve. Actually want to have information about not only the current uptime but also past uptimes. Thus I should know \"the computer has been running for x hours over the last 14 days\" or similar.Another addition is that e.g. the last command doesn't do the job either - it doesn't show if the system goes to hibernate or suspend."], "chosen": ["\n\nHow to gather uptime on Linux Remote Nodes?\n\nSince you are already  gather_facts in order to have Ansible facts avaibale, it also contain ansible_uptime_seconds. See the minimal reproducible example\n---\n- hosts: localhost\n  become: false\n  gather_facts: true\n\n  tasks:\n\n  - debug:\n      msg: \"Days up: {{ (ansible_facts.uptime_seconds / 86400) | int }}\"\n\nThere is no need for command and set_fact.\n\nIt's working but its ... for each server.\n\nA CSV report can therefore directly be written on the Control Node for all hosts in the current play.\n---\n- hosts: linux\n  become: false\n  gather_facts: true\n\n  vars:\n\n    csv_path: '.'\n    csv_filename: 'report.csv'\n\n  tasks:\n\n  - name: Write uptime into CSV\n    delegate_to: localhost # aka Control Node\n    lineinfile:\n      dest: \"{{ csv_path }}/{{ csv_filename }}\"\n      line: \"{{ inventory_hostname }},{{ (ansible_facts.uptime_seconds / 86400) | int }}\"\n      create: true\n      state: present\n    loop: \"{{ ansible_play_hosts }}\"\n\nFor How to proceed further? you may have a look into\nSimilar Q&A\n\nAnsible: Playbook to export systemd status into CSV format\n\n", "\nI think the following code will work.\nThe uptime for this system is <?php passthru('/usr/bin/uptime'); ?>\n\nexecuting system command in a php, I suggest you always provide the full path of the command.\n", "\nJust vor completeness... what's about:\n$ uptime -p\nup 2 weeks, 3 days, 14 hours, 27 minutes\n\n", "\nSolution: In order to get the linux uptime in seconds, Go to bash and type cat /proc/uptime.Parse the first number and convert it according to your requirement.\nFrom RedHat documentation:\n\nThis file contains information detailing how long the system has been on since its last restart. The output of /proc/uptime is quite minimal:\n350735.47 234388.90\n\nThe First number is the total number of seconds the system has been\nup.\nThe Second number is how much of that time the machine has spent\nidle, in\nseconds.\n\n", "\nMy uptime produces output that looks like:\n$ uptime\n 12:49:10 up 25 days, 21:30, 28 users,  load average: 0.50, 0.66, 0.52\n\nTo convert that to your format:\n$ uptime | awk -F'( |,|:)+' '{print $6,$7\",\",$8,\"hours,\",$9,\"minutes.\"}'\n25 days, 21 hours, 34 minutes.\n\nHow it works\n\n-F'( |,|:)+'\nawk divides its input up into fields.  This tells awk to use any combination of one or more of space, comma, or colon as the field separator.\nprint $6,$7\",\",$8,\"hours,\",$9,\"minutes.\"\nThis tells awk to print the sixth field and seventh fields (separated by a space) followed by a comma, the 8th field, the string hours, the ninth field, and, lastly, the string minutes..\n\nHandling computers with short uptimes using sed\nStarting from a reboot, my uptime produces output like:\n 03:14:20 up 1 min,  2 users,  load average: 2.28, 1.29, 0.50\n 04:12:29 up 59 min,  5 users,  load average: 0.06, 0.08, 0.48\n 05:14:09 up  2:01,  5 users,  load average: 0.13, 0.10, 0.45\n 03:13:19 up 1 day, 0 min,  8 users,  load average: 0.01, 0.04, 0.05\n 04:13:19 up 1 day,  1:00,  8 users,  load average: 0.02, 0.05, 0.21\n 12:49:10 up 25 days, 21:30, 28 users,  load average: 0.50, 0.66, 0.52\n\nThe following sed command handles these formats:\nuptime | sed -E 's/^[^,]*up *//; s/, *[[:digit:]]* users.*//; s/min/minutes/; s/([[:digit:]]+):0?([[:digit:]]+)/\\1 hours, \\2 minutes/' \n\nWith the above times, this produces:\n1 minutes\n59 minutes\n2 hours, 1 minutes\n1 day, 0 minutes\n1 day,  1 hours, 0 minutes\n25 days, 21 hours, 30 minutes\n\nHow it works\n\n-E turns on extended regular expression syntax.  (On older GNU seds, use -r in place of -E)\ns/^[^,]*up *//\nThis substitutes command removes all text up to up.\ns/, *[[:digit:]]* users.*//\nThis substitute command removes the user count and all text which follows it.\ns/min/minutes/\nThis replaces min with minutes.\ns/([[:digit:]]+):0?([[:digit:]]+)/\\1 hours, \\2 minutes/'\nIf the line contains a time in the hh:mm format, this separates the hours from the minutes and replaces it with hh hours, mm minutes.\n\nHandling computers with short uptimes using awk\nuptime | awk -F'( |,|:)+' '{d=h=m=0; if ($7==\"min\") m=$6; else {if ($7~/^day/) {d=$6;h=$8;m=$9} else {h=$6;m=$7}}} {print d+0,\"days,\",h+0,\"hours,\",m+0,\"minutes.\"}'\n\nOn the same test cases as above, this produces:\n0 days, 0 hours, 1 minutes.\n0 days, 0 hours, 59 minutes.\n0 days, 2 hours, 1 minutes.\n1 days, 0 hours, 0 minutes.\n1 days, 1 hours, 0 minutes.\n25 days, 21 hours, 30 minutes.\n\nFor those who prefer awk code spread out over multiple lines:\nuptime | awk -F'( |,|:)+' '{\n    d=h=m=0;\n    if ($7==\"min\")\n        m=$6;\n    else {\n        if ($7~/^day/) { d=$6; h=$8; m=$9}\n        else {h=$6;m=$7}\n        }\n    }\n    {\n        print d+0,\"days,\",h+0,\"hours,\",m+0,\"minutes.\"\n    }'\n\n", "\nI made a universal shell script, for systems which support uptime -p like newer linux and for those that don't, like Mac OS X. \n#!/bin/sh\n\nuptime -p >/dev/null 2>&1\n\nif [ \"$?\" -eq 0 ]; then\n  # Supports most Linux distro\n  # when the machine is up for less than '0' minutes then\n  # 'uptime -p' returns ONLY 'up', so we need to set a default value\n  UP_SET_OR_EMPTY=$(uptime -p | awk -F 'up ' '{print $2}')\n  UP=${UP_SET_OR_EMPTY:-'less than a minute'}\nelse\n  # Supports Mac OS X, Debian 7, etc\n  UP=$(uptime | sed -E 's/^[^,]*up *//; s/mins/minutes/; s/hrs?/hours/;\n  s/([[:digit:]]+):0?([[:digit:]]+)/\\1 hours, \\2 minutes/;\n  s/^1 hours/1 hour/; s/ 1 hours/ 1 hour/;\n  s/min,/minutes,/; s/ 0 minutes,/ less than a minute,/; s/ 1 minutes/ 1 minute/;\n  s/  / /; s/, *[[:digit:]]* users?.*//')\nfi\n\necho \"up $UP\"\n\nGist\nReferenced John1024 answer with my own customizations.\n", "\nFor this:  \n\n0 days, 0 hours, 1 minutes. \n0 days, 0 hours, 59 minutes. \n0 days, 2 hours, 1 minutes. \n1 days, 0 hours, 0 minutes. \n1 days, 1 hours, 0 minutes. \n25 days, 21 hours, 30 minutes\n\nMore simple is:\nuptime -p | cut -d \" \" -f2-\n", "\nFor the sake of variety, here's an example with sed:\nMy raw output:\n$ uptime\n15:44:56 up 3 days, 22:58,  7 users,  load average: 0.48, 0.40, 0.31\n\nConverted output:\n$uptime|sed 's/.*\\([0-9]\\+ days\\), \\([0-9]\\+\\):\\([0-9]\\+\\).*/\\1, \\2 hours, \\3 minutes./'\n3 days, 22 hours, 58 minutes.\n\n", "\nThis answer is pretty specific for the uptime shipped in OS X, but takes into account any case of output.\n#!/bin/bash\n\nINFO=`uptime`\necho $INFO | awk -F'[ ,:\\t\\n]+' '{\n        msg = \"\u2191 \"\n        if ($5 == \"day\" || $5 == \"days\") {      # up for a day or more\n            msg = msg $4 \" \" $5 \", \"\n\n            n = $6\n            o = $7\n        } else {\n            n = $4\n            o = $5\n        }\n\n        if (int(o) == 0) {                      # words evaluate to zero\n            msg = msg int(n)\" \"o\n        } else {                                # hh:mm format\n            msg = msg int(n)\" hr\"\n            if (n > 1) { msg = msg \"s\" }\n\n            msg = msg \", \" int(o) \" min\"\n            if (o > 1) { msg = msg \"s\" }\n        }\n\n        print \"[\", msg, \"]\"\n    }'\n\n\nSome example possible outputs:\n22:49 up 24 secs, 2 users, load averages: 8.37 2.09 0.76\n[ \u2191 24 secs ]\n\n22:50 up 1 min, 2 users, load averages: 5.59 2.39 0.95\n[ \u2191 1 min ]\n\n23:39 up 51 mins, 3 users, load averages: 2.18 1.94 1.74\n[ \u2191 51 mins ]\n\n23:54 up 1:06, 3 users, load averages: 3.67 2.57 2.07\n[ \u2191 1 hr, 6 mins ]\n\n16:20 up 120 days, 10:46, 3 users, load averages: 1.21 2.88 0.80\n[ \u2191 120 days, 10 hrs, 46 mins ]\n\n", "\nThis might be a way using just uptime, date and of course bash:\n#!/bin/bash\n\nsince=\"`uptime --since`\"\nstart=\"`date --date \"$since\" '+%s'`\"\nnow=\"`date '+%s'`\"\nsec=$((now-start))\n\ndays=$((sec/(60*60*24)))\nsec=$((sec-days*(60*60*24)))\n\nhr=$((sec/(60*60)))\nsec=$((sec-hr*(60*60)))\n\nmin=$((sec/60))\nsec=$((sec-min*60))\n\nprintf \"%d(days), %02d:%02d:%02d(hms)\\n\" $days $hr $min $sec\n\n", "\nTry it this way:\n*/30 * * * * wget -O http://ping.xxx.com/xxx/up.php?mac=`ifconfig eth1 | awk '/HWaddr/ { print $5 }`\\&uptime=`uptime`\\&ip=`ifconfig eth1 | awk '/inet addr:/ {sub(/addr:/, \"\", $2); print $2 }` /dev/null;\n\nYou are putting /dev/null where wget expects the url, you just have to switch /dev/null and the url\n", "\nYou can get the uptime in seconds from /proc/uptime:\ncut -d \" \" -f 1 /proc/uptime\n", "\nYou could parse the /proc/uptime file. It is a textual file on Linux (which you should read sequentially), giving the uptime of the server machine:\n   % cat /proc/uptime \n   129657.69 506917.57\n\nMore details in the proc(5) man page.\nPS. No real disk IO is involved when reading /proc/ filesystem (with pseudo-files). So reading it is really fast.\n", "\nAre you talking about the Apache server or the entire computer server?  If you're only monitoring Apache:\n\nAutomatically monitor and restart apache\n\nIf you want to monitor the entire system, cronjobs might be a bit futile since they won't be running if their host OS is down.  In this case, the server logs should contain all the information you need. \n", "\nIf you don't care about many details and you just want the up and down time. Then you could save 2 numbers in a file, one being the current percentage and the other being the current number of measures the script took.\nFor example: '96 800'.\nThen, whenever the script is executed, use this formula, assuming that the percentage (96) is X, the number of saves is Y (800) and the current measure is Z (0 or 1)\nX=X/100;\nX=(X*Y+Z)/(Y+1);  //You get the new value of the percentage, X. Be careful as they need to be long values.\nY=Y+1;    //And the current number of interactions.\nX=X*100;\n\nThat's of course just pseudo code and won't work straight away, it's just to give you an idea of one way to do it. You must also include a way of reading a file and saving it wherever you want of your page that contains those 2 numbers.\nAs Jamie stated, this is assuming that crontime is still working despite of the server is down.\nPS, you could also add a system from other server to check this server uptime, but it would need to be statistically calculated (and error tends to 0 when many other servers are added, but that'd be too difficult) as you'd need to take into account the other server's uptime also...\n", "\nyour question is not clear.If you want to get remote server uptime stat, SSH is an option.schedule cron in one server for a script which will remotely check uptime for others.\n", "\nyou'd better to learn what 'load average' stands for.\nin short, it's a number of processes, waiting for some resource, and the resource may be CPU, HDD, serial port, ...\n", "\nLoad is not just a measure of how many processes in the R state (runnable, could use CPU time), but also processes in the D state (uninterruptable sleep, usually waiting for IO). You likely have a process in the D state which is contributing to load, but not using cpu.  This command would show you all the current processes which are contributing to load:\nps aux | awk '$8~/[RD]/'\n\nHave a look at that output and see if you have commands in the D state (in the 8th column)\n", "\nYou may want to parse the output from the last command, which logs users' logins. If the pseudo-user reboot \"logged in\", you know the system was rebooted. (This is valid for Ubuntu; maybe Fedora uses a different name, such as boot.)\nThere may be a more direct interface; Google around for ruby + utmp. The utmp file, commonly in /var/run, records the data that the last command reports.\n", "\nI don't know the ruby specifics but there is a command uptime in linux.\nI think in ruby you need to use System \nso it would be something like system 'uptime' \nThen you can parse the results of that \n"], "rejected": ["\nTake the attribute uptime_seconds from ansible_facts and set the variable uptime in days\n    - set_fact:\n        uptime: \"{{ (ansible_facts.uptime_seconds/86400)|round(2) }}\"\n\nDeclare the dictionary\n  host_uptime: \"{{ dict(ansible_play_hosts|\n                        zip(ansible_play_hosts|\n                            map('extract', hostvars, 'uptime'))) }}\"\n\ngives, for example\n  host_uptime:\n    test_11: '0.52'\n    test_13: '0.52'\n\nCreate the templates. Fit the formats to your needs\nshell> cat templates/report.html.j2\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Report hosts uptime</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n{% for header in headers.split(',') %}\n        <th>{{ header }}</th>\n{% endfor %}\n      </tr>\n{% for host in ansible_play_hosts %}\n      <tr>\n        <td>{{ host }}</td><td>{{ host_uptime[host] }}</td>\n      </tr>\n{% endfor %}\n    </table>\n  </body>\n</html>\n\nshell> cat templates/report.csv.j2\n{{ headers }}\n{% for host,uptime in host_uptime.items() %}\n{{ host }},{{ uptime }}\n{% endfor %}\n\nTest the HTML template\n    - debug:\n        msg: \"{{ lookup('template', 'report.html.j2') }}\"\n\ngives\n  msg: |-\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <title>Report hosts uptime</title>\n      </head>\n      <body>\n        <table>\n          <tr>\n            <th>Host</th>\n            <th>Uptime_In_Days</th>\n          </tr>\n          <tr>\n            <td>test_11</td><td>0.52</td>\n          </tr>\n          <tr>\n            <td>test_13</td><td>0.52</td>\n          </tr>\n        </table>\n      </body>\n    </html>\n\nTest the CSV template\n    - debug:\n        msg: \"{{ lookup('template', 'report.csv.j2') }}\"\n\ngives\n  msg: |-\n    Host,Uptime_In_Days\n    test_11,0.52\n    test_13,0.52\n\nWrite the file on the localhost\n    - template:\n        src: report.csv.j2\n        dest: /tmp/report.csv\n        mode: 0644\n      delegate_to: localhost\n      run_once: true\n\ngives\nshell> cat /tmp/report.csv \nHost,Uptime_In_Days\ntest_11,0.52\ntest_13,0.52\n\nSend the email\n   - mail:\n        host: localhost\n        from: \"{{ ansible_user }}\"\n        to: root\n        subject: '[Ansible] Report uptime'\n        body: \"{{ lookup('template', 'report.html.j2') }}\"\n        subtype: html\n        attach: /tmp/report.csv\n      delegate_to: localhost\n      run_once: true\n\ngives (where the email client renders HTML to text)\n\nReturn-Path: <[email\u00a0protected]>\nX-Original-To: root\nDelivered-To: [email\u00a0protected]\nReceived: from [127.0.0.1] (localhost [127.0.0.1])\n by example.org (Postfix) with ESMTPS id 2FCC41802F6\n for <root>; Tue, 24 Oct 2023 05:24:20 +0200 (CEST)\nContent-Type: multipart/mixed; -charset=\"utf-8\"; boundary=\"===============6826681646037083043==\"\nMIME-Version: 1.0\nFrom: [email\u00a0protected]\nDate: Tue, 24 Oct 2023 05:24:20 +0200\nSubject: [Ansible] Report uptime\nX-Mailer: Ansible mail module\nTo: [email\u00a0protected]\nCc: \nMessage-Id: <[email\u00a0protected]>\n\nReport hosts uptime\nHost Uptime_In_Days\ntest_110.52\ntest_130.52\n\n\n\n[report.csv  application/octet-stream (65 bytes)]\n\n\nExample of a complete playbook for testing\n- name: Mail uptime table\n  hosts: all\n  gather_facts: true\n\n  vars:\n\n    headers: Host,Uptime_In_Days\n    host_uptime: \"{{ dict(ansible_play_hosts|\n                          zip(ansible_play_hosts|\n                              map('extract', hostvars, 'uptime'))) }}\"\n    \n  tasks:\n\n    - set_fact:\n        uptime: \"{{ (ansible_facts.uptime_seconds/86400)|round(2) }}\"\n\n    - block:\n        \n        - debug:\n            var: host_uptime\n        - debug:\n            msg: \"{{ lookup('template', 'report.html.j2') }}\"\n        - debug:\n            msg: \"{{ lookup('template', 'report.csv.j2') }}\"\n\n      when: debug|d(false)|bool\n      run_once: true\n\n    - block:\n\n        - template:\n            src: report.csv.j2\n            dest: /tmp/report.csv\n            mode: 0644\n\n        - mail:\n            host: localhost\n            from: \"{{ ansible_user }}\"\n            to: root\n            subject: '[Ansible] Report uptime'\n            body: \"{{ lookup('template', 'report.html.j2') }}\"\n            subtype: html\n            attach: /tmp/report.csv\n          when: mail_enable|d(false)|bool\n\n      delegate_to: localhost\n      run_once: true\n\n\n", "\nLinux server uptime can be easily obtained in PHP using the /proc/uptime\n$uptimeseconds = (int)shell_exec('cat /proc/uptime');\necho \"This server has been running for $uptimeseconds seconds.\\n\";\n\n", "\nuptime_minutes() {\n  set `uptime -p`\n  local minutes=0\n\n  shift\n  while [ -n \"$1\" ]; do\n    case $2 in\n      day*)\n        ((minutes+=$1*1440))\n        ;;\n      hour*)\n        ((minutes+=$1*60))\n        ;;\n      minute*)\n        ((minutes+=$1))\n        ;;\n    esac\n   shift\n   shift\n  done\n\n  echo $minutes\n}\n\n", "\nuptime_minutes() {\n  set `uptime -p`\n  local minutes=0\n\n  shift\n  while [ -n \"$1\" ]; do\n    case $2 in\n      day*)\n        ((minutes+=$1*1440))\n        ;;\n      hour*)\n        ((minutes+=$1*60))\n        ;;\n      minute*)\n        ((minutes+=$1))\n        ;;\n    esac\n   shift\n   shift\n  done\n\n  echo $minutes\n}\n\n", "\nuptime_minutes() {\n  set `uptime -p`\n  local minutes=0\n\n  shift\n  while [ -n \"$1\" ]; do\n    case $2 in\n      day*)\n        ((minutes+=$1*1440))\n        ;;\n      hour*)\n        ((minutes+=$1*60))\n        ;;\n      minute*)\n        ((minutes+=$1))\n        ;;\n    esac\n   shift\n   shift\n  done\n\n  echo $minutes\n}\n\n", "\nuptime_minutes() {\n  set `uptime -p`\n  local minutes=0\n\n  shift\n  while [ -n \"$1\" ]; do\n    case $2 in\n      day*)\n        ((minutes+=$1*1440))\n        ;;\n      hour*)\n        ((minutes+=$1*60))\n        ;;\n      minute*)\n        ((minutes+=$1))\n        ;;\n    esac\n   shift\n   shift\n  done\n\n  echo $minutes\n}\n\n", "\nuptime_minutes() {\n  set `uptime -p`\n  local minutes=0\n\n  shift\n  while [ -n \"$1\" ]; do\n    case $2 in\n      day*)\n        ((minutes+=$1*1440))\n        ;;\n      hour*)\n        ((minutes+=$1*60))\n        ;;\n      minute*)\n        ((minutes+=$1))\n        ;;\n    esac\n   shift\n   shift\n  done\n\n  echo $minutes\n}\n\n", "\nuptime_minutes() {\n  set `uptime -p`\n  local minutes=0\n\n  shift\n  while [ -n \"$1\" ]; do\n    case $2 in\n      day*)\n        ((minutes+=$1*1440))\n        ;;\n      hour*)\n        ((minutes+=$1*60))\n        ;;\n      minute*)\n        ((minutes+=$1))\n        ;;\n    esac\n   shift\n   shift\n  done\n\n  echo $minutes\n}\n\n", "\nuptime_minutes() {\n  set `uptime -p`\n  local minutes=0\n\n  shift\n  while [ -n \"$1\" ]; do\n    case $2 in\n      day*)\n        ((minutes+=$1*1440))\n        ;;\n      hour*)\n        ((minutes+=$1*60))\n        ;;\n      minute*)\n        ((minutes+=$1))\n        ;;\n    esac\n   shift\n   shift\n  done\n\n  echo $minutes\n}\n\n", "\nUsing your output into a file named date, i tried this :\ncat date | awk '{print $1 \" \"  $2 \" \"  0 \":\"  $3  \",\" $5 \" \" $6 \" \" $7 \" \" $8 \" \" $9 \" \" $10 \" \" $11}'\n\n21:08:13 up 0:10,4 users, load average: 0.30, 0.30, 0.25\n\n", "\n ?mac=`ifconfig eth1 | awk '/HWaddr/ { print $5 }`\n\\&uptime=`uptime`\n\\&ip=`ifconfig eth1 | awk '/inet addr:/ {sub(/addr:/, \"\", $2); print $2 }`;\n\nAdd quotes\n                                                 V\n ?mac=`ifconfig eth1 | awk '/HWaddr/ { print $5 }'`\n\\&uptime=`uptime`\n\\&ip=`ifconfig eth1 | awk '/inet addr:/ {sub(/addr:/, \"\", $2); print $2 }'`;\n                                                                         ^\n\n", "\n ?mac=`ifconfig eth1 | awk '/HWaddr/ { print $5 }`\n\\&uptime=`uptime`\n\\&ip=`ifconfig eth1 | awk '/inet addr:/ {sub(/addr:/, \"\", $2); print $2 }`;\n\nAdd quotes\n                                                 V\n ?mac=`ifconfig eth1 | awk '/HWaddr/ { print $5 }'`\n\\&uptime=`uptime`\n\\&ip=`ifconfig eth1 | awk '/inet addr:/ {sub(/addr:/, \"\", $2); print $2 }'`;\n                                                                         ^\n\n", "\nIf your \"game servers\" are running in actual unix or linux virtual machines, a better idea  might be to measure the ACTUAL server uptime.\nIn Unix-like operating systems, you have a command called uptime:\n[ghoti@pc ~]$ uptime\n 6:37PM  up 10 days,  1:26, 52 users, load averages: 0.26, 0.35, 0.34\n[ghoti@pc ~]$ \n\nIf you have the ability to execute shell commands from PHP, then you can capture this output to a variable in PHP and parse it to determine the actual server uptime.  Record this wherever you like, but one of the favourite ways is using RRDTool graphs.  RRD is the database format, then you can use tools like Munin or Cacti to build the graphs.  Might be more interesting than just the uptime as a number!\nOn the other hand, if you'd also like the ability to automatically notify people when their servers go offline, and you want the flexibility to monitor ANY kind of service (HTTP, SMTP, Unreal Server, whatever), have a look at tools like Nagios or Icinga.\n", "\nIf your \"game servers\" are running in actual unix or linux virtual machines, a better idea  might be to measure the ACTUAL server uptime.\nIn Unix-like operating systems, you have a command called uptime:\n[ghoti@pc ~]$ uptime\n 6:37PM  up 10 days,  1:26, 52 users, load averages: 0.26, 0.35, 0.34\n[ghoti@pc ~]$ \n\nIf you have the ability to execute shell commands from PHP, then you can capture this output to a variable in PHP and parse it to determine the actual server uptime.  Record this wherever you like, but one of the favourite ways is using RRDTool graphs.  RRD is the database format, then you can use tools like Munin or Cacti to build the graphs.  Might be more interesting than just the uptime as a number!\nOn the other hand, if you'd also like the ability to automatically notify people when their servers go offline, and you want the flexibility to monitor ANY kind of service (HTTP, SMTP, Unreal Server, whatever), have a look at tools like Nagios or Icinga.\n", "\nIf your \"game servers\" are running in actual unix or linux virtual machines, a better idea  might be to measure the ACTUAL server uptime.\nIn Unix-like operating systems, you have a command called uptime:\n[ghoti@pc ~]$ uptime\n 6:37PM  up 10 days,  1:26, 52 users, load averages: 0.26, 0.35, 0.34\n[ghoti@pc ~]$ \n\nIf you have the ability to execute shell commands from PHP, then you can capture this output to a variable in PHP and parse it to determine the actual server uptime.  Record this wherever you like, but one of the favourite ways is using RRDTool graphs.  RRD is the database format, then you can use tools like Munin or Cacti to build the graphs.  Might be more interesting than just the uptime as a number!\nOn the other hand, if you'd also like the ability to automatically notify people when their servers go offline, and you want the flexibility to monitor ANY kind of service (HTTP, SMTP, Unreal Server, whatever), have a look at tools like Nagios or Icinga.\n", "\nIf your \"game servers\" are running in actual unix or linux virtual machines, a better idea  might be to measure the ACTUAL server uptime.\nIn Unix-like operating systems, you have a command called uptime:\n[ghoti@pc ~]$ uptime\n 6:37PM  up 10 days,  1:26, 52 users, load averages: 0.26, 0.35, 0.34\n[ghoti@pc ~]$ \n\nIf you have the ability to execute shell commands from PHP, then you can capture this output to a variable in PHP and parse it to determine the actual server uptime.  Record this wherever you like, but one of the favourite ways is using RRDTool graphs.  RRD is the database format, then you can use tools like Munin or Cacti to build the graphs.  Might be more interesting than just the uptime as a number!\nOn the other hand, if you'd also like the ability to automatically notify people when their servers go offline, and you want the flexibility to monitor ANY kind of service (HTTP, SMTP, Unreal Server, whatever), have a look at tools like Nagios or Icinga.\n", "\nThe Load average seems a little high, that could meen that the cpu is busy with things like I/O(disk/network) or thread managment(you may have too meny running).\n", "\nThe Load average seems a little high, that could meen that the cpu is busy with things like I/O(disk/network) or thread managment(you may have too meny running).\n", "\nYou would use backticks like uptime\nStackOverflow regards them as code styles though in this answer box.\n", "\nYou would use backticks like uptime\nStackOverflow regards them as code styles though in this answer box.\n"]}