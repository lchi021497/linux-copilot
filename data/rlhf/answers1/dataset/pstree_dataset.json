{"prompt": ["I am using pstree to get a set of process and the result will be like processA(123)---processB(124)---processC(125)---processTarget(126)---processD(127)I would like to use the keyword \"processTarget\" to get the pid, that is 126.The reason why i chose the pstree is that I will send SIGTSTP signal and SIGCONT to this set of process.How could I do that? Is there any easy to do it?Note:The processTarget(126) is not in the fixed position, therefore I could not use awk to get the PID. ", "I am using pstree to get a set of process and the result will be like processA(123)---processB(124)---processC(125)---processTarget(126)---processD(127)I would like to use the keyword \"processTarget\" to get the pid, that is 126.The reason why i chose the pstree is that I will send SIGTSTP signal and SIGCONT to this set of process.How could I do that? Is there any easy to do it?Note:The processTarget(126) is not in the fixed position, therefore I could not use awk to get the PID. ", "I want to run pstree on a set of pid which I find using psps -aux | grep ^username | awk '{pstree $2}'\nUnfortunately, the output is empty, but if I run the pstree command manually with the same pids I get the desired output. What is wrong with the awk command? Or how do I achieve the desired result by other means?", "I want to run pstree on a set of pid which I find using psps -aux | grep ^username | awk '{pstree $2}'\nUnfortunately, the output is empty, but if I run the pstree command manually with the same pids I get the desired output. What is wrong with the awk command? Or how do I achieve the desired result by other means?"], "chosen": ["\nYou can use grep.\n<pstree command> | grep -P -o 'processTarget\\([0-9]+\\)'\n-P means use Perl regex\n-o mean only return the match\nman grep for more details\nIf the goal is to get just the id you can continue this approach to return just the integer\n<pstree command> | grep -P -o 'processTarget\\([0-9]+\\)' | grep -P -o '[0-9]+'\n", "\nThis is quite easy with parameter expansion/substring extraction. Example:\n#!/bin/bash\n\n##plist=$( pstree something )  # actual command to fill plist\n\nplist=\"processA(123)---processB(124)---processC(125)---processTarget(126)---processD(127)\"\n\ntemp=\"${plist##*processTarget(}\"\nptgtnum=\"${temp%%)--*}\"\n\nprintf \"\\n  processTarget = %s\\n\\n\" \"$ptgtnum\"\n\nexit 0\n\nOutput\n$ bash ptgt.sh\n\n  processTarget = 126\n\n", "\nuse the system function in awk. Also you dont need grep here too\nps -aux | awk '$1==\"username\"{system(\"pstree $2\")}'\n\n", "\nUse system function in awk like this:\nawk '{system(\"pstree \" $2)}'\n\nYou can shorten your command to:\nps -aux | awk ' /^username/ { system(\"pstree \" $2) }'\n\n"], "rejected": ["\nYou might consider sed:\necho 'processA(123)---processB(124)---processC(125)---processTarget(126)---processD(127)' \\ | sed 's/.*processTarget(\\([0-9]*\\)).*/\\1/'\n126\n\n", "\nYou might consider sed:\necho 'processA(123)---processB(124)---processC(125)---processTarget(126)---processD(127)' \\ | sed 's/.*processTarget(\\([0-9]*\\)).*/\\1/'\n126\n\n", "\nTry\n  ps -aux | grep ^username | awk '{print $2}' | xargs pstree\n\n(As is, pstree is an empty variable value )\nThis can  can be boiled down to\nps -aux |  awk '/^username/{print $2}' | xargs pstree\n\nIHTH\n", "\nTry\n  ps -aux | grep ^username | awk '{print $2}' | xargs pstree\n\n(As is, pstree is an empty variable value )\nThis can  can be boiled down to\nps -aux |  awk '/^username/{print $2}' | xargs pstree\n\nIHTH\n"]}